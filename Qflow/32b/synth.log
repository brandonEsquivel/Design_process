Running yosys for verilog parsing and synthesis

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `counter.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `counter.v' to AST representation.
Generating RTLIL representation for module `\counter_4b'.
Generating RTLIL representation for module `\counter'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \counter
Used module:     \counter_4b

3.1.2. Analyzing design hierarchy..
Top module:  \counter
Used module:     \counter_4b
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$counter_4b.v:42$2 in module counter_4b.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\counter.$proc$counter.v:217$406'.
     1/4: $0\nRCO[7:0]
     2/4: $0\LOAD[7:0]
     3/4: $0\Q[31:0]
     4/4: $0\RCO[0:0]
Creating decoders for process `\counter.$proc$counter.v:50$164'.
     1/235: $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167
     2/235: $0$memwr$\MODO_reg$counter.v:56$86_DATA[1:0]$166
     3/235: $0$memwr$\MODO_reg$counter.v:56$86_ADDR[31:0]$165
     4/235: $0$memwr$\MODO_reg$counter.v:56$87_EN[1:0]$170
     5/235: $0$memwr$\MODO_reg$counter.v:56$87_DATA[1:0]$169
     6/235: $0$memwr$\MODO_reg$counter.v:56$87_ADDR[31:0]$168
     7/235: $0$memwr$\MODO_reg$counter.v:56$88_EN[1:0]$173
     8/235: $0$memwr$\MODO_reg$counter.v:56$88_DATA[1:0]$172
     9/235: $0$memwr$\MODO_reg$counter.v:56$88_ADDR[31:0]$171
    10/235: $0$memwr$\MODO_reg$counter.v:56$89_EN[1:0]$176
    11/235: $0$memwr$\MODO_reg$counter.v:56$89_DATA[1:0]$175
    12/235: $0$memwr$\MODO_reg$counter.v:56$89_ADDR[31:0]$174
    13/235: $0$memwr$\MODO_reg$counter.v:56$90_EN[1:0]$179
    14/235: $0$memwr$\MODO_reg$counter.v:56$90_DATA[1:0]$178
    15/235: $0$memwr$\MODO_reg$counter.v:56$90_ADDR[31:0]$177
    16/235: $0$memwr$\MODO_reg$counter.v:56$91_EN[1:0]$182
    17/235: $0$memwr$\MODO_reg$counter.v:56$91_DATA[1:0]$181
    18/235: $0$memwr$\MODO_reg$counter.v:56$91_ADDR[31:0]$180
    19/235: $0$memwr$\MODO_reg$counter.v:56$92_EN[1:0]$185
    20/235: $0$memwr$\MODO_reg$counter.v:56$92_DATA[1:0]$184
    21/235: $0$memwr$\MODO_reg$counter.v:56$92_ADDR[31:0]$183
    22/235: $0$memwr$\MODO_reg$counter.v:56$93_EN[1:0]$188
    23/235: $0$memwr$\MODO_reg$counter.v:56$93_DATA[1:0]$187
    24/235: $0$memwr$\MODO_reg$counter.v:56$93_ADDR[31:0]$186
    25/235: $0$memwr$\MODO_reg$counter.v:56$94_EN[1:0]$191
    26/235: $0$memwr$\MODO_reg$counter.v:56$94_DATA[1:0]$190
    27/235: $0$memwr$\MODO_reg$counter.v:56$94_ADDR[31:0]$189
    28/235: $0$memwr$\MODO_reg$counter.v:56$95_EN[1:0]$194
    29/235: $0$memwr$\MODO_reg$counter.v:56$95_DATA[1:0]$193
    30/235: $0$memwr$\MODO_reg$counter.v:56$95_ADDR[31:0]$192
    31/235: $0$memwr$\MODO_reg$counter.v:56$96_EN[1:0]$197
    32/235: $0$memwr$\MODO_reg$counter.v:56$96_DATA[1:0]$196
    33/235: $0$memwr$\MODO_reg$counter.v:56$96_ADDR[31:0]$195
    34/235: $0$memwr$\MODO_reg$counter.v:56$97_EN[1:0]$200
    35/235: $0$memwr$\MODO_reg$counter.v:56$97_DATA[1:0]$199
    36/235: $0$memwr$\MODO_reg$counter.v:56$97_ADDR[31:0]$198
    37/235: $0$memwr$\MODO_reg$counter.v:56$98_EN[1:0]$203
    38/235: $0$memwr$\MODO_reg$counter.v:56$98_DATA[1:0]$202
    39/235: $0$memwr$\MODO_reg$counter.v:56$98_ADDR[31:0]$201
    40/235: $0$memwr$\MODO_reg$counter.v:56$99_EN[1:0]$206
    41/235: $0$memwr$\MODO_reg$counter.v:56$99_DATA[1:0]$205
    42/235: $0$memwr$\MODO_reg$counter.v:56$99_ADDR[31:0]$204
    43/235: $0$memwr$\MODO_reg$counter.v:56$100_EN[1:0]$209
    44/235: $0$memwr$\MODO_reg$counter.v:56$100_DATA[1:0]$208
    45/235: $0$memwr$\MODO_reg$counter.v:56$100_ADDR[31:0]$207
    46/235: $0$memwr$\MODO_reg$counter.v:56$101_EN[1:0]$212
    47/235: $0$memwr$\MODO_reg$counter.v:56$101_DATA[1:0]$211
    48/235: $0$memwr$\MODO_reg$counter.v:56$101_ADDR[31:0]$210
    49/235: $0$memwr$\MODO_reg$counter.v:56$102_EN[1:0]$215
    50/235: $0$memwr$\MODO_reg$counter.v:56$102_DATA[1:0]$214
    51/235: $0$memwr$\MODO_reg$counter.v:56$102_ADDR[31:0]$213
    52/235: $0$memwr$\MODO_reg$counter.v:56$103_EN[1:0]$218
    53/235: $0$memwr$\MODO_reg$counter.v:56$103_DATA[1:0]$217
    54/235: $0$memwr$\MODO_reg$counter.v:56$103_ADDR[31:0]$216
    55/235: $0$memwr$\MODO_reg$counter.v:56$104_EN[1:0]$221
    56/235: $0$memwr$\MODO_reg$counter.v:56$104_DATA[1:0]$220
    57/235: $0$memwr$\MODO_reg$counter.v:56$104_ADDR[31:0]$219
    58/235: $0$memwr$\MODO_reg$counter.v:56$105_EN[1:0]$224
    59/235: $0$memwr$\MODO_reg$counter.v:56$105_DATA[1:0]$223
    60/235: $0$memwr$\MODO_reg$counter.v:56$105_ADDR[31:0]$222
    61/235: $0$memwr$\MODO_reg$counter.v:56$106_EN[1:0]$227
    62/235: $0$memwr$\MODO_reg$counter.v:56$106_DATA[1:0]$226
    63/235: $0$memwr$\MODO_reg$counter.v:56$106_ADDR[31:0]$225
    64/235: $0$memwr$\MODO_reg$counter.v:56$107_EN[1:0]$230
    65/235: $0$memwr$\MODO_reg$counter.v:56$107_DATA[1:0]$229
    66/235: $0$memwr$\MODO_reg$counter.v:56$107_ADDR[31:0]$228
    67/235: $0$memwr$\MODO_reg$counter.v:56$108_EN[1:0]$233
    68/235: $0$memwr$\MODO_reg$counter.v:56$108_DATA[1:0]$232
    69/235: $0$memwr$\MODO_reg$counter.v:56$108_ADDR[31:0]$231
    70/235: $0$memwr$\MODO_reg$counter.v:56$109_EN[1:0]$236
    71/235: $0$memwr$\MODO_reg$counter.v:56$109_DATA[1:0]$235
    72/235: $0$memwr$\MODO_reg$counter.v:56$109_ADDR[31:0]$234
    73/235: $0$memwr$\MODO_reg$counter.v:56$110_EN[1:0]$239
    74/235: $0$memwr$\MODO_reg$counter.v:56$110_DATA[1:0]$238
    75/235: $0$memwr$\MODO_reg$counter.v:56$110_ADDR[31:0]$237
    76/235: $0$memwr$\MODO_reg$counter.v:56$111_EN[1:0]$242
    77/235: $0$memwr$\MODO_reg$counter.v:56$111_DATA[1:0]$241
    78/235: $0$memwr$\MODO_reg$counter.v:56$111_ADDR[31:0]$240
    79/235: $0$memwr$\MODO_reg$counter.v:56$112_EN[1:0]$245
    80/235: $0$memwr$\MODO_reg$counter.v:56$112_DATA[1:0]$244
    81/235: $0$memwr$\MODO_reg$counter.v:56$112_ADDR[31:0]$243
    82/235: $0$memwr$\MODO_reg$counter.v:56$113_EN[1:0]$248
    83/235: $0$memwr$\MODO_reg$counter.v:56$113_DATA[1:0]$247
    84/235: $0$memwr$\MODO_reg$counter.v:56$113_ADDR[31:0]$246
    85/235: $0$memwr$\MODO_reg$counter.v:56$114_EN[1:0]$251
    86/235: $0$memwr$\MODO_reg$counter.v:56$114_DATA[1:0]$250
    87/235: $0$memwr$\MODO_reg$counter.v:56$114_ADDR[31:0]$249
    88/235: $0$memwr$\MODO_reg$counter.v:56$115_EN[1:0]$254
    89/235: $0$memwr$\MODO_reg$counter.v:56$115_DATA[1:0]$253
    90/235: $0$memwr$\MODO_reg$counter.v:56$115_ADDR[31:0]$252
    91/235: $0$memwr$\MODO_reg$counter.v:56$116_EN[1:0]$257
    92/235: $0$memwr$\MODO_reg$counter.v:56$116_DATA[1:0]$256
    93/235: $0$memwr$\MODO_reg$counter.v:56$116_ADDR[31:0]$255
    94/235: $0$memwr$\MODO_reg$counter.v:56$117_EN[1:0]$260
    95/235: $0$memwr$\MODO_reg$counter.v:56$117_DATA[1:0]$259
    96/235: $0$memwr$\MODO_reg$counter.v:56$117_ADDR[31:0]$258
    97/235: $0$memwr$\MODO_reg$counter.v:56$118_EN[1:0]$263
    98/235: $0$memwr$\MODO_reg$counter.v:56$118_DATA[1:0]$262
    99/235: $0$memwr$\MODO_reg$counter.v:56$118_ADDR[31:0]$261
   100/235: $0$memwr$\MODO_reg$counter.v:56$119_EN[1:0]$266
   101/235: $0$memwr$\MODO_reg$counter.v:56$119_DATA[1:0]$265
   102/235: $0$memwr$\MODO_reg$counter.v:56$119_ADDR[31:0]$264
   103/235: $0$memwr$\MODO_reg$counter.v:56$120_EN[1:0]$269
   104/235: $0$memwr$\MODO_reg$counter.v:56$120_DATA[1:0]$268
   105/235: $0$memwr$\MODO_reg$counter.v:56$120_ADDR[31:0]$267
   106/235: $0$memwr$\MODO_reg$counter.v:56$121_EN[1:0]$272
   107/235: $0$memwr$\MODO_reg$counter.v:56$121_DATA[1:0]$271
   108/235: $0$memwr$\MODO_reg$counter.v:56$121_ADDR[31:0]$270
   109/235: $0$memwr$\MODO_reg$counter.v:56$122_EN[1:0]$275
   110/235: $0$memwr$\MODO_reg$counter.v:56$122_DATA[1:0]$274
   111/235: $0$memwr$\MODO_reg$counter.v:56$122_ADDR[31:0]$273
   112/235: $0$memwr$\MODO_reg$counter.v:56$123_EN[1:0]$278
   113/235: $0$memwr$\MODO_reg$counter.v:56$123_DATA[1:0]$277
   114/235: $0$memwr$\MODO_reg$counter.v:56$123_ADDR[31:0]$276
   115/235: $0$memwr$\MODO_reg$counter.v:56$124_EN[1:0]$281
   116/235: $0$memwr$\MODO_reg$counter.v:56$124_DATA[1:0]$280
   117/235: $0$memwr$\MODO_reg$counter.v:56$124_ADDR[31:0]$279
   118/235: $0$memwr$\MODO_reg$counter.v:56$125_EN[1:0]$284
   119/235: $0$memwr$\MODO_reg$counter.v:56$125_DATA[1:0]$283
   120/235: $0$memwr$\MODO_reg$counter.v:56$125_ADDR[31:0]$282
   121/235: $0$memwr$\MODO_reg$counter.v:56$126_EN[1:0]$287
   122/235: $0$memwr$\MODO_reg$counter.v:56$126_DATA[1:0]$286
   123/235: $0$memwr$\MODO_reg$counter.v:56$126_ADDR[31:0]$285
   124/235: $0$memwr$\MODO_reg$counter.v:56$127_EN[1:0]$290
   125/235: $0$memwr$\MODO_reg$counter.v:56$127_DATA[1:0]$289
   126/235: $0$memwr$\MODO_reg$counter.v:56$127_ADDR[31:0]$288
   127/235: $0$memwr$\MODO_reg$counter.v:56$128_EN[1:0]$293
   128/235: $0$memwr$\MODO_reg$counter.v:56$128_DATA[1:0]$292
   129/235: $0$memwr$\MODO_reg$counter.v:56$128_ADDR[31:0]$291
   130/235: $0$memwr$\MODO_reg$counter.v:56$129_EN[1:0]$296
   131/235: $0$memwr$\MODO_reg$counter.v:56$129_DATA[1:0]$295
   132/235: $0$memwr$\MODO_reg$counter.v:56$129_ADDR[31:0]$294
   133/235: $0$memwr$\MODO_reg$counter.v:56$130_EN[1:0]$299
   134/235: $0$memwr$\MODO_reg$counter.v:56$130_DATA[1:0]$298
   135/235: $0$memwr$\MODO_reg$counter.v:56$130_ADDR[31:0]$297
   136/235: $0$memwr$\MODO_reg$counter.v:56$131_EN[1:0]$302
   137/235: $0$memwr$\MODO_reg$counter.v:56$131_DATA[1:0]$301
   138/235: $0$memwr$\MODO_reg$counter.v:56$131_ADDR[31:0]$300
   139/235: $0$memwr$\MODO_reg$counter.v:56$132_EN[1:0]$305
   140/235: $0$memwr$\MODO_reg$counter.v:56$132_DATA[1:0]$304
   141/235: $0$memwr$\MODO_reg$counter.v:56$132_ADDR[31:0]$303
   142/235: $0$memwr$\MODO_reg$counter.v:56$133_EN[1:0]$308
   143/235: $0$memwr$\MODO_reg$counter.v:56$133_DATA[1:0]$307
   144/235: $0$memwr$\MODO_reg$counter.v:56$133_ADDR[31:0]$306
   145/235: $0$memwr$\MODO_reg$counter.v:56$134_EN[1:0]$311
   146/235: $0$memwr$\MODO_reg$counter.v:56$134_DATA[1:0]$310
   147/235: $0$memwr$\MODO_reg$counter.v:56$134_ADDR[31:0]$309
   148/235: $0$memwr$\MODO_reg$counter.v:56$135_EN[1:0]$314
   149/235: $0$memwr$\MODO_reg$counter.v:56$135_DATA[1:0]$313
   150/235: $0$memwr$\MODO_reg$counter.v:56$135_ADDR[31:0]$312
   151/235: $0$memwr$\MODO_reg$counter.v:56$136_EN[1:0]$317
   152/235: $0$memwr$\MODO_reg$counter.v:56$136_DATA[1:0]$316
   153/235: $0$memwr$\MODO_reg$counter.v:56$136_ADDR[31:0]$315
   154/235: $0$memwr$\MODO_reg$counter.v:56$137_EN[1:0]$320
   155/235: $0$memwr$\MODO_reg$counter.v:56$137_DATA[1:0]$319
   156/235: $0$memwr$\MODO_reg$counter.v:56$137_ADDR[31:0]$318
   157/235: $0$memwr$\MODO_reg$counter.v:56$138_EN[1:0]$323
   158/235: $0$memwr$\MODO_reg$counter.v:56$138_DATA[1:0]$322
   159/235: $0$memwr$\MODO_reg$counter.v:56$138_ADDR[31:0]$321
   160/235: $0$memwr$\MODO_reg$counter.v:56$139_EN[1:0]$326
   161/235: $0$memwr$\MODO_reg$counter.v:56$139_DATA[1:0]$325
   162/235: $0$memwr$\MODO_reg$counter.v:56$139_ADDR[31:0]$324
   163/235: $0$memwr$\MODO_reg$counter.v:56$140_EN[1:0]$329
   164/235: $0$memwr$\MODO_reg$counter.v:56$140_DATA[1:0]$328
   165/235: $0$memwr$\MODO_reg$counter.v:56$140_ADDR[31:0]$327
   166/235: $0$memwr$\MODO_reg$counter.v:56$141_EN[1:0]$332
   167/235: $0$memwr$\MODO_reg$counter.v:56$141_DATA[1:0]$331
   168/235: $0$memwr$\MODO_reg$counter.v:56$141_ADDR[31:0]$330
   169/235: $0$memwr$\MODO_reg$counter.v:56$142_EN[1:0]$335
   170/235: $0$memwr$\MODO_reg$counter.v:56$142_DATA[1:0]$334
   171/235: $0$memwr$\MODO_reg$counter.v:56$142_ADDR[31:0]$333
   172/235: $0$memwr$\MODO_reg$counter.v:56$143_EN[1:0]$338
   173/235: $0$memwr$\MODO_reg$counter.v:56$143_DATA[1:0]$337
   174/235: $0$memwr$\MODO_reg$counter.v:56$143_ADDR[31:0]$336
   175/235: $0$memwr$\MODO_reg$counter.v:56$144_EN[1:0]$341
   176/235: $0$memwr$\MODO_reg$counter.v:56$144_DATA[1:0]$340
   177/235: $0$memwr$\MODO_reg$counter.v:56$144_ADDR[31:0]$339
   178/235: $0$memwr$\MODO_reg$counter.v:56$145_EN[1:0]$344
   179/235: $0$memwr$\MODO_reg$counter.v:56$145_DATA[1:0]$343
   180/235: $0$memwr$\MODO_reg$counter.v:56$145_ADDR[31:0]$342
   181/235: $0$memwr$\MODO_reg$counter.v:56$146_EN[1:0]$347
   182/235: $0$memwr$\MODO_reg$counter.v:56$146_DATA[1:0]$346
   183/235: $0$memwr$\MODO_reg$counter.v:56$146_ADDR[31:0]$345
   184/235: $0$memwr$\MODO_reg$counter.v:56$147_EN[1:0]$350
   185/235: $0$memwr$\MODO_reg$counter.v:56$147_DATA[1:0]$349
   186/235: $0$memwr$\MODO_reg$counter.v:56$147_ADDR[31:0]$348
   187/235: $0$memwr$\MODO_reg$counter.v:56$148_EN[1:0]$353
   188/235: $0$memwr$\MODO_reg$counter.v:56$148_DATA[1:0]$352
   189/235: $0$memwr$\MODO_reg$counter.v:56$148_ADDR[31:0]$351
   190/235: $0$memwr$\MODO_reg$counter.v:56$149_EN[1:0]$356
   191/235: $0$memwr$\MODO_reg$counter.v:56$149_DATA[1:0]$355
   192/235: $0$memwr$\MODO_reg$counter.v:56$149_ADDR[31:0]$354
   193/235: $0$memwr$\MODO_reg$counter.v:63$150_EN[1:0]$359
   194/235: $0$memwr$\MODO_reg$counter.v:63$150_DATA[1:0]$358
   195/235: $0$memwr$\MODO_reg$counter.v:63$150_ADDR[31:0]$357
   196/235: $0$memwr$\MODO_reg$counter.v:65$151_EN[1:0]$362
   197/235: $0$memwr$\MODO_reg$counter.v:65$151_DATA[1:0]$361
   198/235: $0$memwr$\MODO_reg$counter.v:65$151_ADDR[31:0]$360
   199/235: $0$memwr$\MODO_reg$counter.v:69$152_EN[1:0]$365
   200/235: $0$memwr$\MODO_reg$counter.v:69$152_DATA[1:0]$364
   201/235: $0$memwr$\MODO_reg$counter.v:69$152_ADDR[31:0]$363
   202/235: $0$memwr$\MODO_reg$counter.v:71$153_EN[1:0]$368
   203/235: $0$memwr$\MODO_reg$counter.v:71$153_DATA[1:0]$367
   204/235: $0$memwr$\MODO_reg$counter.v:71$153_ADDR[31:0]$366
   205/235: $0$memwr$\MODO_reg$counter.v:75$154_EN[1:0]$371
   206/235: $0$memwr$\MODO_reg$counter.v:75$154_DATA[1:0]$370
   207/235: $0$memwr$\MODO_reg$counter.v:75$154_ADDR[31:0]$369
   208/235: $0$memwr$\MODO_reg$counter.v:77$155_EN[1:0]$374
   209/235: $0$memwr$\MODO_reg$counter.v:77$155_DATA[1:0]$373
   210/235: $0$memwr$\MODO_reg$counter.v:77$155_ADDR[31:0]$372
   211/235: $0$memwr$\MODO_reg$counter.v:81$156_EN[1:0]$377
   212/235: $0$memwr$\MODO_reg$counter.v:81$156_DATA[1:0]$376
   213/235: $0$memwr$\MODO_reg$counter.v:81$156_ADDR[31:0]$375
   214/235: $0$memwr$\MODO_reg$counter.v:83$157_EN[1:0]$380
   215/235: $0$memwr$\MODO_reg$counter.v:83$157_DATA[1:0]$379
   216/235: $0$memwr$\MODO_reg$counter.v:83$157_ADDR[31:0]$378
   217/235: $0$memwr$\MODO_reg$counter.v:87$158_EN[1:0]$383
   218/235: $0$memwr$\MODO_reg$counter.v:87$158_DATA[1:0]$382
   219/235: $0$memwr$\MODO_reg$counter.v:87$158_ADDR[31:0]$381
   220/235: $0$memwr$\MODO_reg$counter.v:89$159_EN[1:0]$386
   221/235: $0$memwr$\MODO_reg$counter.v:89$159_DATA[1:0]$385
   222/235: $0$memwr$\MODO_reg$counter.v:89$159_ADDR[31:0]$384
   223/235: $0$memwr$\MODO_reg$counter.v:93$160_EN[1:0]$389
   224/235: $0$memwr$\MODO_reg$counter.v:93$160_DATA[1:0]$388
   225/235: $0$memwr$\MODO_reg$counter.v:93$160_ADDR[31:0]$387
   226/235: $0$memwr$\MODO_reg$counter.v:95$161_EN[1:0]$392
   227/235: $0$memwr$\MODO_reg$counter.v:95$161_DATA[1:0]$391
   228/235: $0$memwr$\MODO_reg$counter.v:95$161_ADDR[31:0]$390
   229/235: $0$memwr$\MODO_reg$counter.v:99$162_EN[1:0]$395
   230/235: $0$memwr$\MODO_reg$counter.v:99$162_DATA[1:0]$394
   231/235: $0$memwr$\MODO_reg$counter.v:99$162_ADDR[31:0]$393
   232/235: $0$memwr$\MODO_reg$counter.v:101$163_EN[1:0]$398
   233/235: $0$memwr$\MODO_reg$counter.v:101$163_DATA[1:0]$397
   234/235: $0$memwr$\MODO_reg$counter.v:101$163_ADDR[31:0]$396
   235/235: $0\D_reg[31:0]
Creating decoders for process `\counter_4b.$proc$counter_4b.v:42$2'.
     1/3: $0\LOAD[0:0]
     2/3: $0\RCO[0:0]
     3/3: $0\Q[3:0]
Creating decoders for process `\counter_4b.$proc$counter_4b.v:31$1'.
     1/1: $0\MODO_reg[1:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\counter.\Q' from process `\counter.$proc$counter.v:217$406'.
No latch inferred for signal `\counter.\RCO' from process `\counter.$proc$counter.v:217$406'.
No latch inferred for signal `\counter.\LOAD' from process `\counter.$proc$counter.v:217$406'.
No latch inferred for signal `\counter.\nRCO' from process `\counter.$proc$counter.v:217$406'.
No latch inferred for signal `\counter_4b.\MODO_reg' from process `\counter_4b.$proc$counter_4b.v:31$1'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\counter.\D_reg' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1277' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$86_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1278' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$86_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1279' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$86_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1280' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$87_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1281' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$87_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1282' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$87_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1283' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$88_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1284' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$88_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1285' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$88_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1286' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$89_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1287' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$89_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1288' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$89_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1289' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$90_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1290' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$90_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1291' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$90_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1292' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$91_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1293' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$91_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1294' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$91_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1295' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$92_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1296' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$92_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1297' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$92_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1298' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$93_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1299' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$93_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1300' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$93_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1301' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$94_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1302' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$94_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1303' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$94_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1304' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$95_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1305' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$95_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1306' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$95_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1307' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$96_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1308' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$96_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1309' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$96_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1310' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$97_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1311' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$97_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1312' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$97_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1313' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$98_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1314' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$98_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1315' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$98_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1316' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$99_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1317' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$99_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1318' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$99_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1319' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$100_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1320' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$100_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1321' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$100_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1322' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$101_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1323' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$101_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1324' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$101_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1325' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$102_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1326' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$102_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1327' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$102_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1328' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$103_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1329' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$103_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1330' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$103_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1331' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$104_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1332' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$104_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1333' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$104_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1334' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$105_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1335' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$105_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1336' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$105_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1337' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$106_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1338' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$106_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1339' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$106_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1340' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$107_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1341' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$107_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1342' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$107_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1343' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$108_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1344' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$108_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1345' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$108_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1346' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$109_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1347' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$109_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1348' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$109_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1349' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$110_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1350' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$110_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1351' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$110_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1352' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$111_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1353' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$111_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1354' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$111_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1355' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$112_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1356' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$112_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1357' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$112_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1358' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$113_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1359' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$113_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1360' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$113_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1361' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$114_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1362' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$114_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1363' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$114_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1364' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$115_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1365' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$115_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1366' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$115_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1367' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$116_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1368' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$116_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1369' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$116_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1370' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$117_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1371' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$117_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1372' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$117_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1373' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$118_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1374' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$118_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1375' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$118_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1376' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$119_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1377' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$119_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1378' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$119_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1379' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$120_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1380' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$120_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1381' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$120_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1382' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$121_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1383' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$121_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1384' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$121_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1385' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$122_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1386' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$122_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1387' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$122_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1388' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$123_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1389' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$123_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1390' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$123_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1391' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$124_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1392' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$124_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1393' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$124_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1394' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$125_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1395' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$125_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1396' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$125_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1397' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$126_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1398' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$126_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1399' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$126_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1400' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$127_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1401' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$127_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1402' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$127_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1403' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$128_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1404' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$128_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1405' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$128_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1406' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$129_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1407' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$129_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1408' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$129_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1409' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$130_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1410' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$130_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1411' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$130_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1412' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$131_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1413' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$131_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1414' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$131_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1415' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$132_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1416' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$132_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1417' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$132_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1418' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$133_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1419' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$133_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1420' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$133_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1421' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$134_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1422' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$134_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1423' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$134_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1424' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$135_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1425' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$135_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1426' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$135_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1427' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$136_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1428' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$136_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1429' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$136_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1430' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$137_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1431' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$137_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1432' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$137_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1433' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$138_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1434' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$138_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1435' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$138_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1436' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$139_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1437' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$139_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1438' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$139_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1439' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$140_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1440' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$140_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1441' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$140_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1442' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$141_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1443' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$141_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1444' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$141_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1445' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$142_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1446' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$142_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1447' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$142_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1448' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$143_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1449' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$143_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1450' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$143_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1451' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$144_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1452' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$144_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1453' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$144_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1454' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$145_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1455' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$145_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1456' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$145_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1457' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$146_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1458' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$146_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1459' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$146_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1460' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$147_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1461' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$147_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1462' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$147_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1463' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$148_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1464' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$148_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1465' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$148_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1466' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$149_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1467' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$149_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1468' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:56$149_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1469' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:63$150_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1470' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:63$150_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1471' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:63$150_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1472' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:65$151_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1473' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:65$151_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1474' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:65$151_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1475' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:69$152_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1476' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:69$152_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1477' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:69$152_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1478' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:71$153_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1479' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:71$153_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1480' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:71$153_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1481' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:75$154_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1482' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:75$154_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1483' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:75$154_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1484' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:77$155_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1485' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:77$155_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1486' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:77$155_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1487' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:81$156_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1488' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:81$156_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1489' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:81$156_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1490' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:83$157_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1491' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:83$157_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1492' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:83$157_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1493' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:87$158_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1494' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:87$158_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1495' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:87$158_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1496' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:89$159_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1497' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:89$159_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1498' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:89$159_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1499' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:93$160_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1500' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:93$160_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1501' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:93$160_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1502' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:95$161_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1503' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:95$161_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1504' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:95$161_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1505' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:99$162_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1506' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:99$162_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1507' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:99$162_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1508' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:101$163_ADDR' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1509' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:101$163_DATA' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1510' with positive edge clock.
Creating register for signal `\counter.$memwr$\MODO_reg$counter.v:101$163_EN' using process `\counter.$proc$counter.v:50$164'.
  created $dff cell `$procdff$1511' with positive edge clock.
Creating register for signal `\counter_4b.\Q' using process `\counter_4b.$proc$counter_4b.v:42$2'.
  created $dff cell `$procdff$1512' with positive edge clock.
Creating register for signal `\counter_4b.\RCO' using process `\counter_4b.$proc$counter_4b.v:42$2'.
  created $dff cell `$procdff$1513' with positive edge clock.
Creating register for signal `\counter_4b.\LOAD' using process `\counter_4b.$proc$counter_4b.v:42$2'.
  created $dff cell `$procdff$1514' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `counter.$proc$counter.v:217$406'.
Found and cleaned up 8 empty switches in `\counter.$proc$counter.v:50$164'.
Removing empty process `counter.$proc$counter.v:50$164'.
Found and cleaned up 6 empty switches in `\counter_4b.$proc$counter_4b.v:42$2'.
Removing empty process `counter_4b.$proc$counter_4b.v:42$2'.
Removing empty process `counter_4b.$proc$counter_4b.v:31$1'.
Cleaned up 14 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$eq$counter_4b.v:63$8' in module `counter_4b' with $logic_not.
Replacing $eq cell `$procmux$1225_CMP0' in module `counter_4b' with $logic_not.
Replacing $eq cell `$procmux$1243_CMP0' in module `counter_4b' with $logic_not.
Replacing $eq cell `$procmux$1263_CMP0' in module `counter_4b' with $logic_not.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
  removing unused non-port wire \y.
  removing unused non-port wire \x.
  removed 2 unused temporary wires.
Finding unused cells or wires in module \counter_4b..

3.5. Executing CHECK pass (checking for obvious problems).
checking module counter..
checking module counter_4b..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
  Cell `$procdff$1288' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$89_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1288' from module `\counter'.
  Cell `$procdff$1289' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$89_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1289' from module `\counter'.
  Cell `$procdff$1291' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$90_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1291' from module `\counter'.
  Cell `$procdff$1292' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$90_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1292' from module `\counter'.
  Cell `$procdff$1294' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$91_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1294' from module `\counter'.
  Cell `$procdff$1295' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$91_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1295' from module `\counter'.
  Cell `$procdff$1297' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$92_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1297' from module `\counter'.
  Cell `$procdff$1298' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$92_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1298' from module `\counter'.
  Cell `$procdff$1300' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$93_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1300' from module `\counter'.
  Cell `$procdff$1301' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$93_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1301' from module `\counter'.
  Cell `$procdff$1309' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$96_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1309' from module `\counter'.
  Cell `$procdff$1310' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$96_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1310' from module `\counter'.
  Cell `$procdff$1312' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$97_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1312' from module `\counter'.
  Cell `$procdff$1313' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$97_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1313' from module `\counter'.
  Cell `$procdff$1315' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$98_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1315' from module `\counter'.
  Cell `$procdff$1316' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$98_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1316' from module `\counter'.
  Cell `$procdff$1318' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$99_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1318' from module `\counter'.
  Cell `$procdff$1319' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$99_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1319' from module `\counter'.
  Cell `$procdff$1321' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$100_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1321' from module `\counter'.
  Cell `$procdff$1322' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$100_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1322' from module `\counter'.
  Cell `$procdff$1324' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$101_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1324' from module `\counter'.
  Cell `$procdff$1325' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$101_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1325' from module `\counter'.
  Cell `$procdff$1333' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$104_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1333' from module `\counter'.
  Cell `$procdff$1334' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$104_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1334' from module `\counter'.
  Cell `$procdff$1336' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$105_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1336' from module `\counter'.
  Cell `$procdff$1337' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$105_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1337' from module `\counter'.
  Cell `$procdff$1339' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$106_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1339' from module `\counter'.
  Cell `$procdff$1340' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$106_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1340' from module `\counter'.
  Cell `$procdff$1342' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$107_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1342' from module `\counter'.
  Cell `$procdff$1343' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$107_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1343' from module `\counter'.
  Cell `$procdff$1345' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$108_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1345' from module `\counter'.
  Cell `$procdff$1346' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$108_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1346' from module `\counter'.
  Cell `$procdff$1348' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$109_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1348' from module `\counter'.
  Cell `$procdff$1349' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$109_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1349' from module `\counter'.
  Cell `$procdff$1357' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$112_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1357' from module `\counter'.
  Cell `$procdff$1358' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$112_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1358' from module `\counter'.
  Cell `$procdff$1360' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$113_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1360' from module `\counter'.
  Cell `$procdff$1361' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$113_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1361' from module `\counter'.
  Cell `$procdff$1363' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$114_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1363' from module `\counter'.
  Cell `$procdff$1364' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$114_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1364' from module `\counter'.
  Cell `$procdff$1366' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$115_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1366' from module `\counter'.
  Cell `$procdff$1367' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$115_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1367' from module `\counter'.
  Cell `$procdff$1369' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$116_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1369' from module `\counter'.
  Cell `$procdff$1370' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$116_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1370' from module `\counter'.
  Cell `$procdff$1372' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$117_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1372' from module `\counter'.
  Cell `$procdff$1373' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$117_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1373' from module `\counter'.
  Cell `$procdff$1381' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$120_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1381' from module `\counter'.
  Cell `$procdff$1382' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$120_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1382' from module `\counter'.
  Cell `$procdff$1384' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$121_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1384' from module `\counter'.
  Cell `$procdff$1385' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$121_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1385' from module `\counter'.
  Cell `$procdff$1387' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$122_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1387' from module `\counter'.
  Cell `$procdff$1388' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$122_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1388' from module `\counter'.
  Cell `$procdff$1390' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$123_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1390' from module `\counter'.
  Cell `$procdff$1391' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$123_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1391' from module `\counter'.
  Cell `$procdff$1393' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$124_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1393' from module `\counter'.
  Cell `$procdff$1394' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$124_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1394' from module `\counter'.
  Cell `$procdff$1396' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$125_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1396' from module `\counter'.
  Cell `$procdff$1397' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$125_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1397' from module `\counter'.
  Cell `$procdff$1405' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$128_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1405' from module `\counter'.
  Cell `$procdff$1406' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$128_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1406' from module `\counter'.
  Cell `$procdff$1408' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$129_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1408' from module `\counter'.
  Cell `$procdff$1409' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$129_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1409' from module `\counter'.
  Cell `$procdff$1411' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$130_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1411' from module `\counter'.
  Cell `$procdff$1412' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$130_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1412' from module `\counter'.
  Cell `$procdff$1414' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$131_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1414' from module `\counter'.
  Cell `$procdff$1415' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$131_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1415' from module `\counter'.
  Cell `$procdff$1417' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$132_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1417' from module `\counter'.
  Cell `$procdff$1418' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$132_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1418' from module `\counter'.
  Cell `$procdff$1420' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$133_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1420' from module `\counter'.
  Cell `$procdff$1421' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$133_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1421' from module `\counter'.
  Cell `$procdff$1429' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$136_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1429' from module `\counter'.
  Cell `$procdff$1430' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$136_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1430' from module `\counter'.
  Cell `$procdff$1432' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$137_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1432' from module `\counter'.
  Cell `$procdff$1433' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$137_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1433' from module `\counter'.
  Cell `$procdff$1435' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$138_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1435' from module `\counter'.
  Cell `$procdff$1436' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$138_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1436' from module `\counter'.
  Cell `$procdff$1438' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$139_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1438' from module `\counter'.
  Cell `$procdff$1439' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$139_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1439' from module `\counter'.
  Cell `$procdff$1441' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$140_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1441' from module `\counter'.
  Cell `$procdff$1442' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$140_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1442' from module `\counter'.
  Cell `$procdff$1444' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$141_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1444' from module `\counter'.
  Cell `$procdff$1445' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$141_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1445' from module `\counter'.
  Cell `$procdff$1453' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$144_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1453' from module `\counter'.
  Cell `$procdff$1454' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$144_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1454' from module `\counter'.
  Cell `$procdff$1456' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$145_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1456' from module `\counter'.
  Cell `$procdff$1457' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$145_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1457' from module `\counter'.
  Cell `$procdff$1459' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$146_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1459' from module `\counter'.
  Cell `$procdff$1460' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$146_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1460' from module `\counter'.
  Cell `$procdff$1462' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$147_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1462' from module `\counter'.
  Cell `$procdff$1463' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$147_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1463' from module `\counter'.
  Cell `$procdff$1465' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$148_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1465' from module `\counter'.
  Cell `$procdff$1466' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$148_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1466' from module `\counter'.
  Cell `$procdff$1468' is identical to cell `$procdff$1285'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$149_DATA = $memwr$\MODO_reg$counter.v:56$88_DATA
    Removing $dff cell `$procdff$1468' from module `\counter'.
  Cell `$procdff$1469' is identical to cell `$procdff$1286'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$149_EN = $memwr$\MODO_reg$counter.v:56$88_EN
    Removing $dff cell `$procdff$1469' from module `\counter'.
Finding identical cells in module `\counter_4b'.
  Cell `$add$counter_4b.v:80$13' is identical to cell `$add$counter_4b.v:77$12'.
    Redirecting output \Y: $add$counter_4b.v:80$13_Y = $add$counter_4b.v:77$12_Y
    Removing $add cell `$add$counter_4b.v:80$13' from module `\counter_4b'.
  Cell `$procmux$1239_CMP0' is identical to cell `$procmux$1222_CMP0'.
    Redirecting output \Y: $procmux$1239_CMP = $procmux$1222_CMP
    Removing $eq cell `$procmux$1239_CMP0' from module `\counter_4b'.
  Cell `$procmux$1243_CMP0' is identical to cell `$procmux$1225_CMP0'.
    Redirecting output \Y: $procmux$1243_CMP = $procmux$1225_CMP
    Removing $logic_not cell `$procmux$1243_CMP0' from module `\counter_4b'.
  Cell `$procmux$1247_CMP0' is identical to cell `$procmux$1228_CMP0'.
    Redirecting output \Y: $procmux$1247_CMP = $procmux$1228_CMP
    Removing $eq cell `$procmux$1247_CMP0' from module `\counter_4b'.
  Cell `$procmux$1251_CMP0' is identical to cell `$procmux$1231_CMP0'.
    Redirecting output \Y: $procmux$1251_CMP = $procmux$1231_CMP
    Removing $eq cell `$procmux$1251_CMP0' from module `\counter_4b'.
  Cell `$procmux$1259_CMP0' is identical to cell `$procmux$1222_CMP0'.
    Redirecting output \Y: $procmux$1259_CMP = $procmux$1222_CMP
    Removing $eq cell `$procmux$1259_CMP0' from module `\counter_4b'.
  Cell `$procmux$1263_CMP0' is identical to cell `$procmux$1225_CMP0'.
    Redirecting output \Y: $procmux$1263_CMP = $procmux$1225_CMP
    Removing $logic_not cell `$procmux$1263_CMP0' from module `\counter_4b'.
  Cell `$procmux$1267_CMP0' is identical to cell `$procmux$1228_CMP0'.
    Redirecting output \Y: $procmux$1267_CMP = $procmux$1228_CMP
    Removing $eq cell `$procmux$1267_CMP0' from module `\counter_4b'.
  Cell `$procmux$1271_CMP0' is identical to cell `$procmux$1231_CMP0'.
    Redirecting output \Y: $procmux$1271_CMP = $procmux$1231_CMP
    Removing $eq cell `$procmux$1271_CMP0' from module `\counter_4b'.
  Cell `$sub$counter_4b.v:56$7' is identical to cell `$sub$counter_4b.v:53$6'.
    Redirecting output \Y: $sub$counter_4b.v:56$7_Y = $sub$counter_4b.v:53$6_Y
    Removing $sub cell `$sub$counter_4b.v:56$7' from module `\counter_4b'.
  Cell `$sub$counter_4b.v:68$10' is identical to cell `$sub$counter_4b.v:65$9'.
    Redirecting output \Y: $sub$counter_4b.v:68$10_Y = $sub$counter_4b.v:65$9_Y
    Removing $sub cell `$sub$counter_4b.v:68$10' from module `\counter_4b'.
Removed a total of 105 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$1005 (pure)
    Root of a mux tree: $procmux$1011 (pure)
    Root of a mux tree: $procmux$1017 (pure)
    Root of a mux tree: $procmux$1023 (pure)
    Root of a mux tree: $procmux$1029 (pure)
    Root of a mux tree: $procmux$1035 (pure)
    Root of a mux tree: $procmux$1041 (pure)
    Root of a mux tree: $procmux$1047 (pure)
    Root of a mux tree: $procmux$1053 (pure)
    Root of a mux tree: $procmux$1059 (pure)
    Root of a mux tree: $procmux$1065 (pure)
    Root of a mux tree: $procmux$1071 (pure)
    Root of a mux tree: $procmux$1077 (pure)
    Root of a mux tree: $procmux$1083 (pure)
    Root of a mux tree: $procmux$1089 (pure)
    Root of a mux tree: $procmux$1095 (pure)
    Root of a mux tree: $procmux$1101 (pure)
    Root of a mux tree: $procmux$1107 (pure)
    Root of a mux tree: $procmux$1113 (pure)
    Root of a mux tree: $procmux$1119 (pure)
    Root of a mux tree: $procmux$1125 (pure)
    Root of a mux tree: $procmux$1131 (pure)
    Root of a mux tree: $procmux$1137 (pure)
    Root of a mux tree: $procmux$1143 (pure)
    Root of a mux tree: $procmux$1149 (pure)
    Root of a mux tree: $procmux$1155 (pure)
    Root of a mux tree: $procmux$1161 (pure)
    Root of a mux tree: $procmux$1167 (pure)
    Root of a mux tree: $procmux$1173 (pure)
    Root of a mux tree: $procmux$1179 (pure)
    Root of a mux tree: $procmux$1185 (pure)
    Root of a mux tree: $procmux$1191 (pure)
    Root of a mux tree: $procmux$1197 (pure)
    Root of a mux tree: $procmux$1203 (pure)
    Root of a mux tree: $procmux$1209 (pure)
    Root of a mux tree: $procmux$1215 (pure)
    Root of a mux tree: $procmux$1218 (pure)
    Root of a mux tree: $procmux$486 (pure)
    Root of a mux tree: $procmux$489 (pure)
    Root of a mux tree: $procmux$492 (pure)
    Root of a mux tree: $procmux$495 (pure)
    Root of a mux tree: $procmux$498 (pure)
    Root of a mux tree: $procmux$501 (pure)
    Root of a mux tree: $procmux$508 (pure)
    Root of a mux tree: $procmux$515 (pure)
    Root of a mux tree: $procmux$522 (pure)
    Root of a mux tree: $procmux$529 (pure)
    Root of a mux tree: $procmux$536 (pure)
    Root of a mux tree: $procmux$543 (pure)
    Root of a mux tree: $procmux$546 (pure)
    Root of a mux tree: $procmux$549 (pure)
    Root of a mux tree: $procmux$552 (pure)
    Root of a mux tree: $procmux$555 (pure)
    Root of a mux tree: $procmux$558 (pure)
    Root of a mux tree: $procmux$561 (pure)
    Root of a mux tree: $procmux$568 (pure)
    Root of a mux tree: $procmux$575 (pure)
    Root of a mux tree: $procmux$582 (pure)
    Root of a mux tree: $procmux$589 (pure)
    Root of a mux tree: $procmux$596 (pure)
    Root of a mux tree: $procmux$603 (pure)
    Root of a mux tree: $procmux$606 (pure)
    Root of a mux tree: $procmux$609 (pure)
    Root of a mux tree: $procmux$612 (pure)
    Root of a mux tree: $procmux$615 (pure)
    Root of a mux tree: $procmux$618 (pure)
    Root of a mux tree: $procmux$621 (pure)
    Root of a mux tree: $procmux$628 (pure)
    Root of a mux tree: $procmux$635 (pure)
    Root of a mux tree: $procmux$642 (pure)
    Root of a mux tree: $procmux$649 (pure)
    Root of a mux tree: $procmux$656 (pure)
    Root of a mux tree: $procmux$663 (pure)
    Root of a mux tree: $procmux$666 (pure)
    Root of a mux tree: $procmux$669 (pure)
    Root of a mux tree: $procmux$672 (pure)
    Root of a mux tree: $procmux$675 (pure)
    Root of a mux tree: $procmux$678 (pure)
    Root of a mux tree: $procmux$681 (pure)
    Root of a mux tree: $procmux$688 (pure)
    Root of a mux tree: $procmux$695 (pure)
    Root of a mux tree: $procmux$702 (pure)
    Root of a mux tree: $procmux$709 (pure)
    Root of a mux tree: $procmux$716 (pure)
    Root of a mux tree: $procmux$723 (pure)
    Root of a mux tree: $procmux$726 (pure)
    Root of a mux tree: $procmux$729 (pure)
    Root of a mux tree: $procmux$732 (pure)
    Root of a mux tree: $procmux$735 (pure)
    Root of a mux tree: $procmux$738 (pure)
    Root of a mux tree: $procmux$741 (pure)
    Root of a mux tree: $procmux$748 (pure)
    Root of a mux tree: $procmux$755 (pure)
    Root of a mux tree: $procmux$762 (pure)
    Root of a mux tree: $procmux$769 (pure)
    Root of a mux tree: $procmux$776 (pure)
    Root of a mux tree: $procmux$783 (pure)
    Root of a mux tree: $procmux$786 (pure)
    Root of a mux tree: $procmux$789 (pure)
    Root of a mux tree: $procmux$792 (pure)
    Root of a mux tree: $procmux$795 (pure)
    Root of a mux tree: $procmux$798 (pure)
    Root of a mux tree: $procmux$801 (pure)
    Root of a mux tree: $procmux$808 (pure)
    Root of a mux tree: $procmux$815 (pure)
    Root of a mux tree: $procmux$822 (pure)
    Root of a mux tree: $procmux$829 (pure)
    Root of a mux tree: $procmux$836 (pure)
    Root of a mux tree: $procmux$843 (pure)
    Root of a mux tree: $procmux$846 (pure)
    Root of a mux tree: $procmux$849 (pure)
    Root of a mux tree: $procmux$852 (pure)
    Root of a mux tree: $procmux$855 (pure)
    Root of a mux tree: $procmux$858 (pure)
    Root of a mux tree: $procmux$861 (pure)
    Root of a mux tree: $procmux$868 (pure)
    Root of a mux tree: $procmux$875 (pure)
    Root of a mux tree: $procmux$882 (pure)
    Root of a mux tree: $procmux$889 (pure)
    Root of a mux tree: $procmux$896 (pure)
    Root of a mux tree: $procmux$903 (pure)
    Root of a mux tree: $procmux$906 (pure)
    Root of a mux tree: $procmux$909 (pure)
    Root of a mux tree: $procmux$912 (pure)
    Root of a mux tree: $procmux$915 (pure)
    Root of a mux tree: $procmux$918 (pure)
    Root of a mux tree: $procmux$921 (pure)
    Root of a mux tree: $procmux$928 (pure)
    Root of a mux tree: $procmux$935 (pure)
    Root of a mux tree: $procmux$942 (pure)
    Root of a mux tree: $procmux$949 (pure)
    Root of a mux tree: $procmux$956 (pure)
    Root of a mux tree: $procmux$963 (pure)
    Root of a mux tree: $procmux$969 (pure)
    Root of a mux tree: $procmux$975 (pure)
    Root of a mux tree: $procmux$981 (pure)
    Root of a mux tree: $procmux$987 (pure)
    Root of a mux tree: $procmux$993 (pure)
    Root of a mux tree: $procmux$999 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \counter_4b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$1235 (pure)
    Root of a mux tree: $procmux$1255 (pure)
    Root of a mux tree: $procmux$1275 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
    Consolidated identical input bits for $mux cell $procmux$1002:
      Old ports: A=2'00, B=2'11, Y=$procmux$1002_Y
      New ports: A=1'0, B=1'1, Y=$procmux$1002_Y [0]
      New connections: $procmux$1002_Y [1] = $procmux$1002_Y [0]
    Consolidated identical input bits for $mux cell $procmux$1020:
      Old ports: A=2'11, B=2'00, Y=$procmux$1020_Y
      New ports: A=1'1, B=1'0, Y=$procmux$1020_Y [0]
      New connections: $procmux$1020_Y [1] = $procmux$1020_Y [0]
    Consolidated identical input bits for $mux cell $procmux$1038:
      Old ports: A=2'00, B=2'11, Y=$procmux$1038_Y
      New ports: A=1'0, B=1'1, Y=$procmux$1038_Y [0]
      New connections: $procmux$1038_Y [1] = $procmux$1038_Y [0]
    Consolidated identical input bits for $mux cell $procmux$1056:
      Old ports: A=2'11, B=2'00, Y=$procmux$1056_Y
      New ports: A=1'1, B=1'0, Y=$procmux$1056_Y [0]
      New connections: $procmux$1056_Y [1] = $procmux$1056_Y [0]
    Consolidated identical input bits for $mux cell $procmux$1074:
      Old ports: A=2'00, B=2'11, Y=$procmux$1074_Y
      New ports: A=1'0, B=1'1, Y=$procmux$1074_Y [0]
      New connections: $procmux$1074_Y [1] = $procmux$1074_Y [0]
    Consolidated identical input bits for $mux cell $procmux$1092:
      Old ports: A=2'11, B=2'00, Y=$procmux$1092_Y
      New ports: A=1'1, B=1'0, Y=$procmux$1092_Y [0]
      New connections: $procmux$1092_Y [1] = $procmux$1092_Y [0]
    Consolidated identical input bits for $mux cell $procmux$1110:
      Old ports: A=2'00, B=2'11, Y=$procmux$1110_Y
      New ports: A=1'0, B=1'1, Y=$procmux$1110_Y [0]
      New connections: $procmux$1110_Y [1] = $procmux$1110_Y [0]
    Consolidated identical input bits for $mux cell $procmux$1128:
      Old ports: A=2'11, B=2'00, Y=$procmux$1128_Y
      New ports: A=1'1, B=1'0, Y=$procmux$1128_Y [0]
      New connections: $procmux$1128_Y [1] = $procmux$1128_Y [0]
    Consolidated identical input bits for $mux cell $procmux$1146:
      Old ports: A=2'00, B=2'11, Y=$procmux$1146_Y
      New ports: A=1'0, B=1'1, Y=$procmux$1146_Y [0]
      New connections: $procmux$1146_Y [1] = $procmux$1146_Y [0]
    Consolidated identical input bits for $mux cell $procmux$1164:
      Old ports: A=2'11, B=2'00, Y=$procmux$1164_Y
      New ports: A=1'1, B=1'0, Y=$procmux$1164_Y [0]
      New connections: $procmux$1164_Y [1] = $procmux$1164_Y [0]
    Consolidated identical input bits for $mux cell $procmux$1182:
      Old ports: A=2'00, B=2'11, Y=$procmux$1182_Y
      New ports: A=1'0, B=1'1, Y=$procmux$1182_Y [0]
      New connections: $procmux$1182_Y [1] = $procmux$1182_Y [0]
    Consolidated identical input bits for $mux cell $procmux$1200:
      Old ports: A=2'11, B=2'00, Y=$procmux$1200_Y
      New ports: A=1'1, B=1'0, Y=$procmux$1200_Y [0]
      New connections: $procmux$1200_Y [1] = $procmux$1200_Y [0]
    Consolidated identical input bits for $mux cell $procmux$486:
      Old ports: A=2'00, B=2'01, Y=$0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$495:
      Old ports: A=2'00, B=2'10, Y=$0$memwr$\MODO_reg$counter.v:56$87_EN[1:0]$170
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$87_EN[1:0]$170 [1]
      New connections: $0$memwr$\MODO_reg$counter.v:56$87_EN[1:0]$170 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$546:
      Old ports: A=2'00, B=2'01, Y=$0$memwr$\MODO_reg$counter.v:56$94_EN[1:0]$191
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$94_EN[1:0]$191 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:56$94_EN[1:0]$191 [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$555:
      Old ports: A=2'00, B=2'10, Y=$0$memwr$\MODO_reg$counter.v:56$95_EN[1:0]$194
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$95_EN[1:0]$194 [1]
      New connections: $0$memwr$\MODO_reg$counter.v:56$95_EN[1:0]$194 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$606:
      Old ports: A=2'00, B=2'01, Y=$0$memwr$\MODO_reg$counter.v:56$102_EN[1:0]$215
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$102_EN[1:0]$215 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:56$102_EN[1:0]$215 [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$615:
      Old ports: A=2'00, B=2'10, Y=$0$memwr$\MODO_reg$counter.v:56$103_EN[1:0]$218
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$103_EN[1:0]$218 [1]
      New connections: $0$memwr$\MODO_reg$counter.v:56$103_EN[1:0]$218 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$666:
      Old ports: A=2'00, B=2'01, Y=$0$memwr$\MODO_reg$counter.v:56$110_EN[1:0]$239
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$110_EN[1:0]$239 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:56$110_EN[1:0]$239 [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$675:
      Old ports: A=2'00, B=2'10, Y=$0$memwr$\MODO_reg$counter.v:56$111_EN[1:0]$242
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$111_EN[1:0]$242 [1]
      New connections: $0$memwr$\MODO_reg$counter.v:56$111_EN[1:0]$242 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$726:
      Old ports: A=2'00, B=2'01, Y=$0$memwr$\MODO_reg$counter.v:56$118_EN[1:0]$263
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$118_EN[1:0]$263 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:56$118_EN[1:0]$263 [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$735:
      Old ports: A=2'00, B=2'10, Y=$0$memwr$\MODO_reg$counter.v:56$119_EN[1:0]$266
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$119_EN[1:0]$266 [1]
      New connections: $0$memwr$\MODO_reg$counter.v:56$119_EN[1:0]$266 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$786:
      Old ports: A=2'00, B=2'01, Y=$0$memwr$\MODO_reg$counter.v:56$126_EN[1:0]$287
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$126_EN[1:0]$287 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:56$126_EN[1:0]$287 [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$795:
      Old ports: A=2'00, B=2'10, Y=$0$memwr$\MODO_reg$counter.v:56$127_EN[1:0]$290
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$127_EN[1:0]$290 [1]
      New connections: $0$memwr$\MODO_reg$counter.v:56$127_EN[1:0]$290 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$846:
      Old ports: A=2'00, B=2'01, Y=$0$memwr$\MODO_reg$counter.v:56$134_EN[1:0]$311
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$134_EN[1:0]$311 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:56$134_EN[1:0]$311 [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$855:
      Old ports: A=2'00, B=2'10, Y=$0$memwr$\MODO_reg$counter.v:56$135_EN[1:0]$314
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$135_EN[1:0]$314 [1]
      New connections: $0$memwr$\MODO_reg$counter.v:56$135_EN[1:0]$314 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$906:
      Old ports: A=2'00, B=2'01, Y=$0$memwr$\MODO_reg$counter.v:56$142_EN[1:0]$335
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$142_EN[1:0]$335 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:56$142_EN[1:0]$335 [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$915:
      Old ports: A=2'00, B=2'10, Y=$0$memwr$\MODO_reg$counter.v:56$143_EN[1:0]$338
      New ports: A=1'0, B=1'1, Y=$0$memwr$\MODO_reg$counter.v:56$143_EN[1:0]$338 [1]
      New connections: $0$memwr$\MODO_reg$counter.v:56$143_EN[1:0]$338 [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$966:
      Old ports: A=2'00, B=2'11, Y=$procmux$966_Y
      New ports: A=1'0, B=1'1, Y=$procmux$966_Y [0]
      New connections: $procmux$966_Y [1] = $procmux$966_Y [0]
    Consolidated identical input bits for $mux cell $procmux$984:
      Old ports: A=2'11, B=2'00, Y=$procmux$984_Y
      New ports: A=1'1, B=1'0, Y=$procmux$984_Y [0]
      New connections: $procmux$984_Y [1] = $procmux$984_Y [0]
  Optimizing cells in module \counter.
    Consolidated identical input bits for $mux cell $procmux$1005:
      Old ports: A=$procmux$1002_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:69$152_EN[1:0]$365
      New ports: A=$procmux$1002_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:69$152_EN[1:0]$365 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:69$152_EN[1:0]$365 [1] = $0$memwr$\MODO_reg$counter.v:69$152_EN[1:0]$365 [0]
    Consolidated identical input bits for $mux cell $procmux$1023:
      Old ports: A=$procmux$1020_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:71$153_EN[1:0]$368
      New ports: A=$procmux$1020_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:71$153_EN[1:0]$368 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:71$153_EN[1:0]$368 [1] = $0$memwr$\MODO_reg$counter.v:71$153_EN[1:0]$368 [0]
    Consolidated identical input bits for $mux cell $procmux$1041:
      Old ports: A=$procmux$1038_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:75$154_EN[1:0]$371
      New ports: A=$procmux$1038_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:75$154_EN[1:0]$371 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:75$154_EN[1:0]$371 [1] = $0$memwr$\MODO_reg$counter.v:75$154_EN[1:0]$371 [0]
    Consolidated identical input bits for $mux cell $procmux$1059:
      Old ports: A=$procmux$1056_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:77$155_EN[1:0]$374
      New ports: A=$procmux$1056_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:77$155_EN[1:0]$374 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:77$155_EN[1:0]$374 [1] = $0$memwr$\MODO_reg$counter.v:77$155_EN[1:0]$374 [0]
    Consolidated identical input bits for $mux cell $procmux$1077:
      Old ports: A=$procmux$1074_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:81$156_EN[1:0]$377
      New ports: A=$procmux$1074_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:81$156_EN[1:0]$377 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:81$156_EN[1:0]$377 [1] = $0$memwr$\MODO_reg$counter.v:81$156_EN[1:0]$377 [0]
    Consolidated identical input bits for $mux cell $procmux$1095:
      Old ports: A=$procmux$1092_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:83$157_EN[1:0]$380
      New ports: A=$procmux$1092_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:83$157_EN[1:0]$380 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:83$157_EN[1:0]$380 [1] = $0$memwr$\MODO_reg$counter.v:83$157_EN[1:0]$380 [0]
    Consolidated identical input bits for $mux cell $procmux$1113:
      Old ports: A=$procmux$1110_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:87$158_EN[1:0]$383
      New ports: A=$procmux$1110_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:87$158_EN[1:0]$383 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:87$158_EN[1:0]$383 [1] = $0$memwr$\MODO_reg$counter.v:87$158_EN[1:0]$383 [0]
    Consolidated identical input bits for $mux cell $procmux$1131:
      Old ports: A=$procmux$1128_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:89$159_EN[1:0]$386
      New ports: A=$procmux$1128_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:89$159_EN[1:0]$386 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:89$159_EN[1:0]$386 [1] = $0$memwr$\MODO_reg$counter.v:89$159_EN[1:0]$386 [0]
    Consolidated identical input bits for $mux cell $procmux$1149:
      Old ports: A=$procmux$1146_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:93$160_EN[1:0]$389
      New ports: A=$procmux$1146_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:93$160_EN[1:0]$389 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:93$160_EN[1:0]$389 [1] = $0$memwr$\MODO_reg$counter.v:93$160_EN[1:0]$389 [0]
    Consolidated identical input bits for $mux cell $procmux$1167:
      Old ports: A=$procmux$1164_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:95$161_EN[1:0]$392
      New ports: A=$procmux$1164_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:95$161_EN[1:0]$392 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:95$161_EN[1:0]$392 [1] = $0$memwr$\MODO_reg$counter.v:95$161_EN[1:0]$392 [0]
    Consolidated identical input bits for $mux cell $procmux$1185:
      Old ports: A=$procmux$1182_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:99$162_EN[1:0]$395
      New ports: A=$procmux$1182_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:99$162_EN[1:0]$395 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:99$162_EN[1:0]$395 [1] = $0$memwr$\MODO_reg$counter.v:99$162_EN[1:0]$395 [0]
    Consolidated identical input bits for $mux cell $procmux$1203:
      Old ports: A=$procmux$1200_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:101$163_EN[1:0]$398
      New ports: A=$procmux$1200_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:101$163_EN[1:0]$398 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:101$163_EN[1:0]$398 [1] = $0$memwr$\MODO_reg$counter.v:101$163_EN[1:0]$398 [0]
    Consolidated identical input bits for $mux cell $procmux$969:
      Old ports: A=$procmux$966_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:63$150_EN[1:0]$359
      New ports: A=$procmux$966_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:63$150_EN[1:0]$359 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:63$150_EN[1:0]$359 [1] = $0$memwr$\MODO_reg$counter.v:63$150_EN[1:0]$359 [0]
    Consolidated identical input bits for $mux cell $procmux$987:
      Old ports: A=$procmux$984_Y, B=2'00, Y=$0$memwr$\MODO_reg$counter.v:65$151_EN[1:0]$362
      New ports: A=$procmux$984_Y [0], B=1'0, Y=$0$memwr$\MODO_reg$counter.v:65$151_EN[1:0]$362 [0]
      New connections: $0$memwr$\MODO_reg$counter.v:65$151_EN[1:0]$362 [1] = $0$memwr$\MODO_reg$counter.v:65$151_EN[1:0]$362 [0]
  Optimizing cells in module \counter.
  Optimizing cells in module \counter_4b.
    New ctrl vector for $mux cell $procmux$1261: { }
    New ctrl vector for $mux cell $procmux$1265: { }
    New ctrl vector for $mux cell $procmux$1269: { }
    New ctrl vector for $pmux cell $procmux$1221: { $auto$opt_reduce.cc:132:opt_mux$1516 $procmux$1222_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1515: { $procmux$1225_CMP $procmux$1228_CMP $procmux$1231_CMP }
  Optimizing cells in module \counter_4b.
Performed a total of 49 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
  Cell `$procmux$495' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$87_EN[1:0]$170 [1] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$495' from module `\counter'.
  Cell `$procmux$501' is identical to cell `$procmux$492'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$87_ADDR[31:0]$168 = $0$memwr$\MODO_reg$counter.v:56$86_ADDR[31:0]$165
    Removing $mux cell `$procmux$501' from module `\counter'.
  Cell `$procmux$508' is identical to cell `$procmux$492'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$88_ADDR[31:0]$171 = $0$memwr$\MODO_reg$counter.v:56$86_ADDR[31:0]$165
    Removing $mux cell `$procmux$508' from module `\counter'.
  Cell `$procmux$515' is identical to cell `$procmux$492'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$89_ADDR[31:0]$174 = $0$memwr$\MODO_reg$counter.v:56$86_ADDR[31:0]$165
    Removing $mux cell `$procmux$515' from module `\counter'.
  Cell `$procmux$522' is identical to cell `$procmux$492'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$90_ADDR[31:0]$177 = $0$memwr$\MODO_reg$counter.v:56$86_ADDR[31:0]$165
    Removing $mux cell `$procmux$522' from module `\counter'.
  Cell `$procmux$529' is identical to cell `$procmux$492'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$91_ADDR[31:0]$180 = $0$memwr$\MODO_reg$counter.v:56$86_ADDR[31:0]$165
    Removing $mux cell `$procmux$529' from module `\counter'.
  Cell `$procmux$536' is identical to cell `$procmux$492'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$92_ADDR[31:0]$183 = $0$memwr$\MODO_reg$counter.v:56$86_ADDR[31:0]$165
    Removing $mux cell `$procmux$536' from module `\counter'.
  Cell `$procmux$543' is identical to cell `$procmux$492'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$93_ADDR[31:0]$186 = $0$memwr$\MODO_reg$counter.v:56$86_ADDR[31:0]$165
    Removing $mux cell `$procmux$543' from module `\counter'.
  Cell `$procmux$546' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$94_EN[1:0]$191 [0] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$546' from module `\counter'.
  Cell `$procmux$549' is identical to cell `$procmux$489'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$94_DATA[1:0]$190 = $0$memwr$\MODO_reg$counter.v:56$86_DATA[1:0]$166
    Removing $mux cell `$procmux$549' from module `\counter'.
  Cell `$procmux$555' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$95_EN[1:0]$194 [1] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$555' from module `\counter'.
  Cell `$procmux$558' is identical to cell `$procmux$498'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$95_DATA[1:0]$193 = $0$memwr$\MODO_reg$counter.v:56$87_DATA[1:0]$169
    Removing $mux cell `$procmux$558' from module `\counter'.
  Cell `$procmux$561' is identical to cell `$procmux$552'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$95_ADDR[31:0]$192 = $0$memwr$\MODO_reg$counter.v:56$94_ADDR[31:0]$189
    Removing $mux cell `$procmux$561' from module `\counter'.
  Cell `$procmux$568' is identical to cell `$procmux$552'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$96_ADDR[31:0]$195 = $0$memwr$\MODO_reg$counter.v:56$94_ADDR[31:0]$189
    Removing $mux cell `$procmux$568' from module `\counter'.
  Cell `$procmux$575' is identical to cell `$procmux$552'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$97_ADDR[31:0]$198 = $0$memwr$\MODO_reg$counter.v:56$94_ADDR[31:0]$189
    Removing $mux cell `$procmux$575' from module `\counter'.
  Cell `$procmux$582' is identical to cell `$procmux$552'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$98_ADDR[31:0]$201 = $0$memwr$\MODO_reg$counter.v:56$94_ADDR[31:0]$189
    Removing $mux cell `$procmux$582' from module `\counter'.
  Cell `$procmux$589' is identical to cell `$procmux$552'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$99_ADDR[31:0]$204 = $0$memwr$\MODO_reg$counter.v:56$94_ADDR[31:0]$189
    Removing $mux cell `$procmux$589' from module `\counter'.
  Cell `$procmux$596' is identical to cell `$procmux$552'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$100_ADDR[31:0]$207 = $0$memwr$\MODO_reg$counter.v:56$94_ADDR[31:0]$189
    Removing $mux cell `$procmux$596' from module `\counter'.
  Cell `$procmux$603' is identical to cell `$procmux$552'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$101_ADDR[31:0]$210 = $0$memwr$\MODO_reg$counter.v:56$94_ADDR[31:0]$189
    Removing $mux cell `$procmux$603' from module `\counter'.
  Cell `$procmux$606' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$102_EN[1:0]$215 [0] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$606' from module `\counter'.
  Cell `$procmux$609' is identical to cell `$procmux$489'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$102_DATA[1:0]$214 = $0$memwr$\MODO_reg$counter.v:56$86_DATA[1:0]$166
    Removing $mux cell `$procmux$609' from module `\counter'.
  Cell `$procmux$615' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$103_EN[1:0]$218 [1] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$615' from module `\counter'.
  Cell `$procmux$618' is identical to cell `$procmux$498'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$103_DATA[1:0]$217 = $0$memwr$\MODO_reg$counter.v:56$87_DATA[1:0]$169
    Removing $mux cell `$procmux$618' from module `\counter'.
  Cell `$procmux$621' is identical to cell `$procmux$612'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$103_ADDR[31:0]$216 = $0$memwr$\MODO_reg$counter.v:56$102_ADDR[31:0]$213
    Removing $mux cell `$procmux$621' from module `\counter'.
  Cell `$procmux$628' is identical to cell `$procmux$612'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$104_ADDR[31:0]$219 = $0$memwr$\MODO_reg$counter.v:56$102_ADDR[31:0]$213
    Removing $mux cell `$procmux$628' from module `\counter'.
  Cell `$procmux$635' is identical to cell `$procmux$612'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$105_ADDR[31:0]$222 = $0$memwr$\MODO_reg$counter.v:56$102_ADDR[31:0]$213
    Removing $mux cell `$procmux$635' from module `\counter'.
  Cell `$procmux$642' is identical to cell `$procmux$612'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$106_ADDR[31:0]$225 = $0$memwr$\MODO_reg$counter.v:56$102_ADDR[31:0]$213
    Removing $mux cell `$procmux$642' from module `\counter'.
  Cell `$procmux$649' is identical to cell `$procmux$612'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$107_ADDR[31:0]$228 = $0$memwr$\MODO_reg$counter.v:56$102_ADDR[31:0]$213
    Removing $mux cell `$procmux$649' from module `\counter'.
  Cell `$procmux$656' is identical to cell `$procmux$612'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$108_ADDR[31:0]$231 = $0$memwr$\MODO_reg$counter.v:56$102_ADDR[31:0]$213
    Removing $mux cell `$procmux$656' from module `\counter'.
  Cell `$procmux$663' is identical to cell `$procmux$612'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$109_ADDR[31:0]$234 = $0$memwr$\MODO_reg$counter.v:56$102_ADDR[31:0]$213
    Removing $mux cell `$procmux$663' from module `\counter'.
  Cell `$procmux$666' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$110_EN[1:0]$239 [0] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$666' from module `\counter'.
  Cell `$procmux$669' is identical to cell `$procmux$489'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$110_DATA[1:0]$238 = $0$memwr$\MODO_reg$counter.v:56$86_DATA[1:0]$166
    Removing $mux cell `$procmux$669' from module `\counter'.
  Cell `$procmux$675' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$111_EN[1:0]$242 [1] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$675' from module `\counter'.
  Cell `$procmux$678' is identical to cell `$procmux$498'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$111_DATA[1:0]$241 = $0$memwr$\MODO_reg$counter.v:56$87_DATA[1:0]$169
    Removing $mux cell `$procmux$678' from module `\counter'.
  Cell `$procmux$681' is identical to cell `$procmux$672'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$111_ADDR[31:0]$240 = $0$memwr$\MODO_reg$counter.v:56$110_ADDR[31:0]$237
    Removing $mux cell `$procmux$681' from module `\counter'.
  Cell `$procmux$688' is identical to cell `$procmux$672'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$112_ADDR[31:0]$243 = $0$memwr$\MODO_reg$counter.v:56$110_ADDR[31:0]$237
    Removing $mux cell `$procmux$688' from module `\counter'.
  Cell `$procmux$695' is identical to cell `$procmux$672'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$113_ADDR[31:0]$246 = $0$memwr$\MODO_reg$counter.v:56$110_ADDR[31:0]$237
    Removing $mux cell `$procmux$695' from module `\counter'.
  Cell `$procmux$702' is identical to cell `$procmux$672'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$114_ADDR[31:0]$249 = $0$memwr$\MODO_reg$counter.v:56$110_ADDR[31:0]$237
    Removing $mux cell `$procmux$702' from module `\counter'.
  Cell `$procmux$709' is identical to cell `$procmux$672'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$115_ADDR[31:0]$252 = $0$memwr$\MODO_reg$counter.v:56$110_ADDR[31:0]$237
    Removing $mux cell `$procmux$709' from module `\counter'.
  Cell `$procmux$716' is identical to cell `$procmux$672'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$116_ADDR[31:0]$255 = $0$memwr$\MODO_reg$counter.v:56$110_ADDR[31:0]$237
    Removing $mux cell `$procmux$716' from module `\counter'.
  Cell `$procmux$723' is identical to cell `$procmux$672'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$117_ADDR[31:0]$258 = $0$memwr$\MODO_reg$counter.v:56$110_ADDR[31:0]$237
    Removing $mux cell `$procmux$723' from module `\counter'.
  Cell `$procmux$726' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$118_EN[1:0]$263 [0] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$726' from module `\counter'.
  Cell `$procmux$729' is identical to cell `$procmux$489'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$118_DATA[1:0]$262 = $0$memwr$\MODO_reg$counter.v:56$86_DATA[1:0]$166
    Removing $mux cell `$procmux$729' from module `\counter'.
  Cell `$procmux$735' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$119_EN[1:0]$266 [1] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$735' from module `\counter'.
  Cell `$procmux$738' is identical to cell `$procmux$498'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$119_DATA[1:0]$265 = $0$memwr$\MODO_reg$counter.v:56$87_DATA[1:0]$169
    Removing $mux cell `$procmux$738' from module `\counter'.
  Cell `$procmux$741' is identical to cell `$procmux$732'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$119_ADDR[31:0]$264 = $0$memwr$\MODO_reg$counter.v:56$118_ADDR[31:0]$261
    Removing $mux cell `$procmux$741' from module `\counter'.
  Cell `$procmux$748' is identical to cell `$procmux$732'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$120_ADDR[31:0]$267 = $0$memwr$\MODO_reg$counter.v:56$118_ADDR[31:0]$261
    Removing $mux cell `$procmux$748' from module `\counter'.
  Cell `$procmux$755' is identical to cell `$procmux$732'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$121_ADDR[31:0]$270 = $0$memwr$\MODO_reg$counter.v:56$118_ADDR[31:0]$261
    Removing $mux cell `$procmux$755' from module `\counter'.
  Cell `$procmux$762' is identical to cell `$procmux$732'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$122_ADDR[31:0]$273 = $0$memwr$\MODO_reg$counter.v:56$118_ADDR[31:0]$261
    Removing $mux cell `$procmux$762' from module `\counter'.
  Cell `$procmux$769' is identical to cell `$procmux$732'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$123_ADDR[31:0]$276 = $0$memwr$\MODO_reg$counter.v:56$118_ADDR[31:0]$261
    Removing $mux cell `$procmux$769' from module `\counter'.
  Cell `$procmux$776' is identical to cell `$procmux$732'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$124_ADDR[31:0]$279 = $0$memwr$\MODO_reg$counter.v:56$118_ADDR[31:0]$261
    Removing $mux cell `$procmux$776' from module `\counter'.
  Cell `$procmux$783' is identical to cell `$procmux$732'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$125_ADDR[31:0]$282 = $0$memwr$\MODO_reg$counter.v:56$118_ADDR[31:0]$261
    Removing $mux cell `$procmux$783' from module `\counter'.
  Cell `$procmux$786' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$126_EN[1:0]$287 [0] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$786' from module `\counter'.
  Cell `$procmux$789' is identical to cell `$procmux$489'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$126_DATA[1:0]$286 = $0$memwr$\MODO_reg$counter.v:56$86_DATA[1:0]$166
    Removing $mux cell `$procmux$789' from module `\counter'.
  Cell `$procmux$795' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$127_EN[1:0]$290 [1] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$795' from module `\counter'.
  Cell `$procmux$798' is identical to cell `$procmux$498'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$127_DATA[1:0]$289 = $0$memwr$\MODO_reg$counter.v:56$87_DATA[1:0]$169
    Removing $mux cell `$procmux$798' from module `\counter'.
  Cell `$procmux$801' is identical to cell `$procmux$792'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$127_ADDR[31:0]$288 = $0$memwr$\MODO_reg$counter.v:56$126_ADDR[31:0]$285
    Removing $mux cell `$procmux$801' from module `\counter'.
  Cell `$procmux$808' is identical to cell `$procmux$792'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$128_ADDR[31:0]$291 = $0$memwr$\MODO_reg$counter.v:56$126_ADDR[31:0]$285
    Removing $mux cell `$procmux$808' from module `\counter'.
  Cell `$procmux$815' is identical to cell `$procmux$792'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$129_ADDR[31:0]$294 = $0$memwr$\MODO_reg$counter.v:56$126_ADDR[31:0]$285
    Removing $mux cell `$procmux$815' from module `\counter'.
  Cell `$procmux$822' is identical to cell `$procmux$792'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$130_ADDR[31:0]$297 = $0$memwr$\MODO_reg$counter.v:56$126_ADDR[31:0]$285
    Removing $mux cell `$procmux$822' from module `\counter'.
  Cell `$procmux$829' is identical to cell `$procmux$792'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$131_ADDR[31:0]$300 = $0$memwr$\MODO_reg$counter.v:56$126_ADDR[31:0]$285
    Removing $mux cell `$procmux$829' from module `\counter'.
  Cell `$procmux$836' is identical to cell `$procmux$792'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$132_ADDR[31:0]$303 = $0$memwr$\MODO_reg$counter.v:56$126_ADDR[31:0]$285
    Removing $mux cell `$procmux$836' from module `\counter'.
  Cell `$procmux$843' is identical to cell `$procmux$792'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$133_ADDR[31:0]$306 = $0$memwr$\MODO_reg$counter.v:56$126_ADDR[31:0]$285
    Removing $mux cell `$procmux$843' from module `\counter'.
  Cell `$procmux$846' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$134_EN[1:0]$311 [0] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$846' from module `\counter'.
  Cell `$procmux$849' is identical to cell `$procmux$489'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$134_DATA[1:0]$310 = $0$memwr$\MODO_reg$counter.v:56$86_DATA[1:0]$166
    Removing $mux cell `$procmux$849' from module `\counter'.
  Cell `$procmux$855' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$135_EN[1:0]$314 [1] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$855' from module `\counter'.
  Cell `$procmux$858' is identical to cell `$procmux$498'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$135_DATA[1:0]$313 = $0$memwr$\MODO_reg$counter.v:56$87_DATA[1:0]$169
    Removing $mux cell `$procmux$858' from module `\counter'.
  Cell `$procmux$861' is identical to cell `$procmux$852'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$135_ADDR[31:0]$312 = $0$memwr$\MODO_reg$counter.v:56$134_ADDR[31:0]$309
    Removing $mux cell `$procmux$861' from module `\counter'.
  Cell `$procmux$868' is identical to cell `$procmux$852'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$136_ADDR[31:0]$315 = $0$memwr$\MODO_reg$counter.v:56$134_ADDR[31:0]$309
    Removing $mux cell `$procmux$868' from module `\counter'.
  Cell `$procmux$875' is identical to cell `$procmux$852'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$137_ADDR[31:0]$318 = $0$memwr$\MODO_reg$counter.v:56$134_ADDR[31:0]$309
    Removing $mux cell `$procmux$875' from module `\counter'.
  Cell `$procmux$882' is identical to cell `$procmux$852'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$138_ADDR[31:0]$321 = $0$memwr$\MODO_reg$counter.v:56$134_ADDR[31:0]$309
    Removing $mux cell `$procmux$882' from module `\counter'.
  Cell `$procmux$889' is identical to cell `$procmux$852'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$139_ADDR[31:0]$324 = $0$memwr$\MODO_reg$counter.v:56$134_ADDR[31:0]$309
    Removing $mux cell `$procmux$889' from module `\counter'.
  Cell `$procmux$896' is identical to cell `$procmux$852'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$140_ADDR[31:0]$327 = $0$memwr$\MODO_reg$counter.v:56$134_ADDR[31:0]$309
    Removing $mux cell `$procmux$896' from module `\counter'.
  Cell `$procmux$903' is identical to cell `$procmux$852'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$141_ADDR[31:0]$330 = $0$memwr$\MODO_reg$counter.v:56$134_ADDR[31:0]$309
    Removing $mux cell `$procmux$903' from module `\counter'.
  Cell `$procmux$906' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$142_EN[1:0]$335 [0] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$906' from module `\counter'.
  Cell `$procmux$909' is identical to cell `$procmux$489'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$142_DATA[1:0]$334 = $0$memwr$\MODO_reg$counter.v:56$86_DATA[1:0]$166
    Removing $mux cell `$procmux$909' from module `\counter'.
  Cell `$procmux$915' is identical to cell `$procmux$486'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$143_EN[1:0]$338 [1] = $0$memwr$\MODO_reg$counter.v:56$86_EN[1:0]$167 [0]
    Removing $mux cell `$procmux$915' from module `\counter'.
  Cell `$procmux$918' is identical to cell `$procmux$498'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$143_DATA[1:0]$337 = $0$memwr$\MODO_reg$counter.v:56$87_DATA[1:0]$169
    Removing $mux cell `$procmux$918' from module `\counter'.
  Cell `$procmux$921' is identical to cell `$procmux$912'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$143_ADDR[31:0]$336 = $0$memwr$\MODO_reg$counter.v:56$142_ADDR[31:0]$333
    Removing $mux cell `$procmux$921' from module `\counter'.
  Cell `$procmux$928' is identical to cell `$procmux$912'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$144_ADDR[31:0]$339 = $0$memwr$\MODO_reg$counter.v:56$142_ADDR[31:0]$333
    Removing $mux cell `$procmux$928' from module `\counter'.
  Cell `$procmux$935' is identical to cell `$procmux$912'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$145_ADDR[31:0]$342 = $0$memwr$\MODO_reg$counter.v:56$142_ADDR[31:0]$333
    Removing $mux cell `$procmux$935' from module `\counter'.
  Cell `$procmux$942' is identical to cell `$procmux$912'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$146_ADDR[31:0]$345 = $0$memwr$\MODO_reg$counter.v:56$142_ADDR[31:0]$333
    Removing $mux cell `$procmux$942' from module `\counter'.
  Cell `$procmux$949' is identical to cell `$procmux$912'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$147_ADDR[31:0]$348 = $0$memwr$\MODO_reg$counter.v:56$142_ADDR[31:0]$333
    Removing $mux cell `$procmux$949' from module `\counter'.
  Cell `$procmux$956' is identical to cell `$procmux$912'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$148_ADDR[31:0]$351 = $0$memwr$\MODO_reg$counter.v:56$142_ADDR[31:0]$333
    Removing $mux cell `$procmux$956' from module `\counter'.
  Cell `$procmux$963' is identical to cell `$procmux$912'.
    Redirecting output \Y: $0$memwr$\MODO_reg$counter.v:56$149_ADDR[31:0]$354 = $0$memwr$\MODO_reg$counter.v:56$142_ADDR[31:0]$333
    Removing $mux cell `$procmux$963' from module `\counter'.
  Cell `$procdff$1377' is identical to cell `$procdff$1374'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$119_ADDR = $memwr$\MODO_reg$counter.v:56$118_ADDR
    Removing $dff cell `$procdff$1377' from module `\counter'.
  Cell `$procdff$1380' is identical to cell `$procdff$1374'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$120_ADDR = $memwr$\MODO_reg$counter.v:56$118_ADDR
    Removing $dff cell `$procdff$1380' from module `\counter'.
  Cell `$procdff$1383' is identical to cell `$procdff$1374'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$121_ADDR = $memwr$\MODO_reg$counter.v:56$118_ADDR
    Removing $dff cell `$procdff$1383' from module `\counter'.
  Cell `$procdff$1386' is identical to cell `$procdff$1374'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$122_ADDR = $memwr$\MODO_reg$counter.v:56$118_ADDR
    Removing $dff cell `$procdff$1386' from module `\counter'.
  Cell `$procdff$1389' is identical to cell `$procdff$1374'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$123_ADDR = $memwr$\MODO_reg$counter.v:56$118_ADDR
    Removing $dff cell `$procdff$1389' from module `\counter'.
  Cell `$procdff$1392' is identical to cell `$procdff$1374'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$124_ADDR = $memwr$\MODO_reg$counter.v:56$118_ADDR
    Removing $dff cell `$procdff$1392' from module `\counter'.
  Cell `$procdff$1395' is identical to cell `$procdff$1374'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$125_ADDR = $memwr$\MODO_reg$counter.v:56$118_ADDR
    Removing $dff cell `$procdff$1395' from module `\counter'.
  Cell `$procdff$1399' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$126_DATA = $memwr$\MODO_reg$counter.v:56$118_DATA
    Removing $dff cell `$procdff$1399' from module `\counter'.
  Cell `$procdff$1400' is identical to cell `$procdff$1376'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$126_EN = $memwr$\MODO_reg$counter.v:56$118_EN
    Removing $dff cell `$procdff$1400' from module `\counter'.
  Cell `$procdff$1401' is identical to cell `$procdff$1398'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$127_ADDR = $memwr$\MODO_reg$counter.v:56$126_ADDR
    Removing $dff cell `$procdff$1401' from module `\counter'.
  Cell `$procdff$1402' is identical to cell `$procdff$1378'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$127_DATA = $memwr$\MODO_reg$counter.v:56$119_DATA
    Removing $dff cell `$procdff$1402' from module `\counter'.
  Cell `$procdff$1403' is identical to cell `$procdff$1379'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$127_EN = $memwr$\MODO_reg$counter.v:56$119_EN
    Removing $dff cell `$procdff$1403' from module `\counter'.
  Cell `$procdff$1404' is identical to cell `$procdff$1398'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$128_ADDR = $memwr$\MODO_reg$counter.v:56$126_ADDR
    Removing $dff cell `$procdff$1404' from module `\counter'.
  Cell `$procdff$1407' is identical to cell `$procdff$1398'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$129_ADDR = $memwr$\MODO_reg$counter.v:56$126_ADDR
    Removing $dff cell `$procdff$1407' from module `\counter'.
  Cell `$procdff$1410' is identical to cell `$procdff$1398'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$130_ADDR = $memwr$\MODO_reg$counter.v:56$126_ADDR
    Removing $dff cell `$procdff$1410' from module `\counter'.
  Cell `$procdff$1413' is identical to cell `$procdff$1398'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$131_ADDR = $memwr$\MODO_reg$counter.v:56$126_ADDR
    Removing $dff cell `$procdff$1413' from module `\counter'.
  Cell `$procdff$1416' is identical to cell `$procdff$1398'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$132_ADDR = $memwr$\MODO_reg$counter.v:56$126_ADDR
    Removing $dff cell `$procdff$1416' from module `\counter'.
  Cell `$procdff$1419' is identical to cell `$procdff$1398'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$133_ADDR = $memwr$\MODO_reg$counter.v:56$126_ADDR
    Removing $dff cell `$procdff$1419' from module `\counter'.
  Cell `$procdff$1423' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$134_DATA = $memwr$\MODO_reg$counter.v:56$118_DATA
    Removing $dff cell `$procdff$1423' from module `\counter'.
  Cell `$procdff$1424' is identical to cell `$procdff$1376'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$134_EN = $memwr$\MODO_reg$counter.v:56$118_EN
    Removing $dff cell `$procdff$1424' from module `\counter'.
  Cell `$procdff$1425' is identical to cell `$procdff$1422'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$135_ADDR = $memwr$\MODO_reg$counter.v:56$134_ADDR
    Removing $dff cell `$procdff$1425' from module `\counter'.
  Cell `$procdff$1426' is identical to cell `$procdff$1378'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$135_DATA = $memwr$\MODO_reg$counter.v:56$119_DATA
    Removing $dff cell `$procdff$1426' from module `\counter'.
  Cell `$procdff$1427' is identical to cell `$procdff$1379'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$135_EN = $memwr$\MODO_reg$counter.v:56$119_EN
    Removing $dff cell `$procdff$1427' from module `\counter'.
  Cell `$procdff$1428' is identical to cell `$procdff$1422'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$136_ADDR = $memwr$\MODO_reg$counter.v:56$134_ADDR
    Removing $dff cell `$procdff$1428' from module `\counter'.
  Cell `$procdff$1431' is identical to cell `$procdff$1422'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$137_ADDR = $memwr$\MODO_reg$counter.v:56$134_ADDR
    Removing $dff cell `$procdff$1431' from module `\counter'.
  Cell `$procdff$1434' is identical to cell `$procdff$1422'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$138_ADDR = $memwr$\MODO_reg$counter.v:56$134_ADDR
    Removing $dff cell `$procdff$1434' from module `\counter'.
  Cell `$procdff$1437' is identical to cell `$procdff$1422'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$139_ADDR = $memwr$\MODO_reg$counter.v:56$134_ADDR
    Removing $dff cell `$procdff$1437' from module `\counter'.
  Cell `$procdff$1440' is identical to cell `$procdff$1422'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$140_ADDR = $memwr$\MODO_reg$counter.v:56$134_ADDR
    Removing $dff cell `$procdff$1440' from module `\counter'.
  Cell `$procdff$1443' is identical to cell `$procdff$1422'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$141_ADDR = $memwr$\MODO_reg$counter.v:56$134_ADDR
    Removing $dff cell `$procdff$1443' from module `\counter'.
  Cell `$procdff$1447' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$142_DATA = $memwr$\MODO_reg$counter.v:56$118_DATA
    Removing $dff cell `$procdff$1447' from module `\counter'.
  Cell `$procdff$1448' is identical to cell `$procdff$1376'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$142_EN = $memwr$\MODO_reg$counter.v:56$118_EN
    Removing $dff cell `$procdff$1448' from module `\counter'.
  Cell `$procdff$1449' is identical to cell `$procdff$1446'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$143_ADDR = $memwr$\MODO_reg$counter.v:56$142_ADDR
    Removing $dff cell `$procdff$1449' from module `\counter'.
  Cell `$procdff$1450' is identical to cell `$procdff$1378'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$143_DATA = $memwr$\MODO_reg$counter.v:56$119_DATA
    Removing $dff cell `$procdff$1450' from module `\counter'.
  Cell `$procdff$1451' is identical to cell `$procdff$1379'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$143_EN = $memwr$\MODO_reg$counter.v:56$119_EN
    Removing $dff cell `$procdff$1451' from module `\counter'.
  Cell `$procdff$1452' is identical to cell `$procdff$1446'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$144_ADDR = $memwr$\MODO_reg$counter.v:56$142_ADDR
    Removing $dff cell `$procdff$1452' from module `\counter'.
  Cell `$procdff$1455' is identical to cell `$procdff$1446'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$145_ADDR = $memwr$\MODO_reg$counter.v:56$142_ADDR
    Removing $dff cell `$procdff$1455' from module `\counter'.
  Cell `$procdff$1458' is identical to cell `$procdff$1446'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$146_ADDR = $memwr$\MODO_reg$counter.v:56$142_ADDR
    Removing $dff cell `$procdff$1458' from module `\counter'.
  Cell `$procdff$1279' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$86_DATA = $memwr$\MODO_reg$counter.v:56$118_DATA
    Removing $dff cell `$procdff$1279' from module `\counter'.
  Cell `$procdff$1461' is identical to cell `$procdff$1446'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$147_ADDR = $memwr$\MODO_reg$counter.v:56$142_ADDR
    Removing $dff cell `$procdff$1461' from module `\counter'.
  Cell `$procdff$1280' is identical to cell `$procdff$1376'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$86_EN = $memwr$\MODO_reg$counter.v:56$118_EN
    Removing $dff cell `$procdff$1280' from module `\counter'.
  Cell `$procdff$1281' is identical to cell `$procdff$1278'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$87_ADDR = $memwr$\MODO_reg$counter.v:56$86_ADDR
    Removing $dff cell `$procdff$1281' from module `\counter'.
  Cell `$procdff$1464' is identical to cell `$procdff$1446'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$148_ADDR = $memwr$\MODO_reg$counter.v:56$142_ADDR
    Removing $dff cell `$procdff$1464' from module `\counter'.
  Cell `$procdff$1282' is identical to cell `$procdff$1378'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$87_DATA = $memwr$\MODO_reg$counter.v:56$119_DATA
    Removing $dff cell `$procdff$1282' from module `\counter'.
  Cell `$procdff$1283' is identical to cell `$procdff$1379'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$87_EN = $memwr$\MODO_reg$counter.v:56$119_EN
    Removing $dff cell `$procdff$1283' from module `\counter'.
  Cell `$procdff$1467' is identical to cell `$procdff$1446'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$149_ADDR = $memwr$\MODO_reg$counter.v:56$142_ADDR
    Removing $dff cell `$procdff$1467' from module `\counter'.
  Cell `$procdff$1284' is identical to cell `$procdff$1278'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$88_ADDR = $memwr$\MODO_reg$counter.v:56$86_ADDR
    Removing $dff cell `$procdff$1284' from module `\counter'.
  Cell `$procdff$1287' is identical to cell `$procdff$1278'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$89_ADDR = $memwr$\MODO_reg$counter.v:56$86_ADDR
    Removing $dff cell `$procdff$1287' from module `\counter'.
  Cell `$procdff$1290' is identical to cell `$procdff$1278'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$90_ADDR = $memwr$\MODO_reg$counter.v:56$86_ADDR
    Removing $dff cell `$procdff$1290' from module `\counter'.
  Cell `$procdff$1293' is identical to cell `$procdff$1278'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$91_ADDR = $memwr$\MODO_reg$counter.v:56$86_ADDR
    Removing $dff cell `$procdff$1293' from module `\counter'.
  Cell `$procdff$1296' is identical to cell `$procdff$1278'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$92_ADDR = $memwr$\MODO_reg$counter.v:56$86_ADDR
    Removing $dff cell `$procdff$1296' from module `\counter'.
  Cell `$procdff$1299' is identical to cell `$procdff$1278'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$93_ADDR = $memwr$\MODO_reg$counter.v:56$86_ADDR
    Removing $dff cell `$procdff$1299' from module `\counter'.
  Cell `$procdff$1303' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$94_DATA = $memwr$\MODO_reg$counter.v:56$118_DATA
    Removing $dff cell `$procdff$1303' from module `\counter'.
  Cell `$procdff$1304' is identical to cell `$procdff$1376'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$94_EN = $memwr$\MODO_reg$counter.v:56$118_EN
    Removing $dff cell `$procdff$1304' from module `\counter'.
  Cell `$procdff$1305' is identical to cell `$procdff$1302'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$95_ADDR = $memwr$\MODO_reg$counter.v:56$94_ADDR
    Removing $dff cell `$procdff$1305' from module `\counter'.
  Cell `$procdff$1306' is identical to cell `$procdff$1378'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$95_DATA = $memwr$\MODO_reg$counter.v:56$119_DATA
    Removing $dff cell `$procdff$1306' from module `\counter'.
  Cell `$procdff$1307' is identical to cell `$procdff$1379'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$95_EN = $memwr$\MODO_reg$counter.v:56$119_EN
    Removing $dff cell `$procdff$1307' from module `\counter'.
  Cell `$procdff$1308' is identical to cell `$procdff$1302'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$96_ADDR = $memwr$\MODO_reg$counter.v:56$94_ADDR
    Removing $dff cell `$procdff$1308' from module `\counter'.
  Cell `$procdff$1311' is identical to cell `$procdff$1302'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$97_ADDR = $memwr$\MODO_reg$counter.v:56$94_ADDR
    Removing $dff cell `$procdff$1311' from module `\counter'.
  Cell `$procdff$1314' is identical to cell `$procdff$1302'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$98_ADDR = $memwr$\MODO_reg$counter.v:56$94_ADDR
    Removing $dff cell `$procdff$1314' from module `\counter'.
  Cell `$procdff$1317' is identical to cell `$procdff$1302'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$99_ADDR = $memwr$\MODO_reg$counter.v:56$94_ADDR
    Removing $dff cell `$procdff$1317' from module `\counter'.
  Cell `$procdff$1320' is identical to cell `$procdff$1302'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$100_ADDR = $memwr$\MODO_reg$counter.v:56$94_ADDR
    Removing $dff cell `$procdff$1320' from module `\counter'.
  Cell `$procdff$1323' is identical to cell `$procdff$1302'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$101_ADDR = $memwr$\MODO_reg$counter.v:56$94_ADDR
    Removing $dff cell `$procdff$1323' from module `\counter'.
  Cell `$procdff$1327' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$102_DATA = $memwr$\MODO_reg$counter.v:56$118_DATA
    Removing $dff cell `$procdff$1327' from module `\counter'.
  Cell `$procdff$1328' is identical to cell `$procdff$1376'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$102_EN = $memwr$\MODO_reg$counter.v:56$118_EN
    Removing $dff cell `$procdff$1328' from module `\counter'.
  Cell `$procdff$1329' is identical to cell `$procdff$1326'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$103_ADDR = $memwr$\MODO_reg$counter.v:56$102_ADDR
    Removing $dff cell `$procdff$1329' from module `\counter'.
  Cell `$procdff$1330' is identical to cell `$procdff$1378'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$103_DATA = $memwr$\MODO_reg$counter.v:56$119_DATA
    Removing $dff cell `$procdff$1330' from module `\counter'.
  Cell `$procdff$1331' is identical to cell `$procdff$1379'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$103_EN = $memwr$\MODO_reg$counter.v:56$119_EN
    Removing $dff cell `$procdff$1331' from module `\counter'.
  Cell `$procdff$1332' is identical to cell `$procdff$1326'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$104_ADDR = $memwr$\MODO_reg$counter.v:56$102_ADDR
    Removing $dff cell `$procdff$1332' from module `\counter'.
  Cell `$procdff$1335' is identical to cell `$procdff$1326'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$105_ADDR = $memwr$\MODO_reg$counter.v:56$102_ADDR
    Removing $dff cell `$procdff$1335' from module `\counter'.
  Cell `$procdff$1338' is identical to cell `$procdff$1326'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$106_ADDR = $memwr$\MODO_reg$counter.v:56$102_ADDR
    Removing $dff cell `$procdff$1338' from module `\counter'.
  Cell `$procdff$1341' is identical to cell `$procdff$1326'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$107_ADDR = $memwr$\MODO_reg$counter.v:56$102_ADDR
    Removing $dff cell `$procdff$1341' from module `\counter'.
  Cell `$procdff$1344' is identical to cell `$procdff$1326'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$108_ADDR = $memwr$\MODO_reg$counter.v:56$102_ADDR
    Removing $dff cell `$procdff$1344' from module `\counter'.
  Cell `$procdff$1347' is identical to cell `$procdff$1326'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$109_ADDR = $memwr$\MODO_reg$counter.v:56$102_ADDR
    Removing $dff cell `$procdff$1347' from module `\counter'.
  Cell `$procdff$1350' is identical to cell `$procdff$1371'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$110_ADDR = $memwr$\MODO_reg$counter.v:56$117_ADDR
    Removing $dff cell `$procdff$1350' from module `\counter'.
  Cell `$procdff$1351' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$110_DATA = $memwr$\MODO_reg$counter.v:56$118_DATA
    Removing $dff cell `$procdff$1351' from module `\counter'.
  Cell `$procdff$1352' is identical to cell `$procdff$1376'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$110_EN = $memwr$\MODO_reg$counter.v:56$118_EN
    Removing $dff cell `$procdff$1352' from module `\counter'.
  Cell `$procdff$1353' is identical to cell `$procdff$1371'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$111_ADDR = $memwr$\MODO_reg$counter.v:56$117_ADDR
    Removing $dff cell `$procdff$1353' from module `\counter'.
  Cell `$procdff$1354' is identical to cell `$procdff$1378'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$111_DATA = $memwr$\MODO_reg$counter.v:56$119_DATA
    Removing $dff cell `$procdff$1354' from module `\counter'.
  Cell `$procdff$1355' is identical to cell `$procdff$1379'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$111_EN = $memwr$\MODO_reg$counter.v:56$119_EN
    Removing $dff cell `$procdff$1355' from module `\counter'.
  Cell `$procdff$1356' is identical to cell `$procdff$1371'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$112_ADDR = $memwr$\MODO_reg$counter.v:56$117_ADDR
    Removing $dff cell `$procdff$1356' from module `\counter'.
  Cell `$procdff$1359' is identical to cell `$procdff$1371'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$113_ADDR = $memwr$\MODO_reg$counter.v:56$117_ADDR
    Removing $dff cell `$procdff$1359' from module `\counter'.
  Cell `$procdff$1362' is identical to cell `$procdff$1371'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$114_ADDR = $memwr$\MODO_reg$counter.v:56$117_ADDR
    Removing $dff cell `$procdff$1362' from module `\counter'.
  Cell `$procdff$1365' is identical to cell `$procdff$1371'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$115_ADDR = $memwr$\MODO_reg$counter.v:56$117_ADDR
    Removing $dff cell `$procdff$1365' from module `\counter'.
  Cell `$procdff$1368' is identical to cell `$procdff$1371'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:56$116_ADDR = $memwr$\MODO_reg$counter.v:56$117_ADDR
    Removing $dff cell `$procdff$1368' from module `\counter'.
Finding identical cells in module `\counter_4b'.
Removed a total of 169 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$1285 ($dff) from module counter.
Removing $procdff$1286 ($dff) from module counter.
Replaced 2 DFF cells.

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_4b..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$1005 (pure)
    Root of a mux tree: $procmux$1011 (pure)
    Root of a mux tree: $procmux$1017 (pure)
    Root of a mux tree: $procmux$1023 (pure)
    Root of a mux tree: $procmux$1029 (pure)
    Root of a mux tree: $procmux$1035 (pure)
    Root of a mux tree: $procmux$1041 (pure)
    Root of a mux tree: $procmux$1047 (pure)
    Root of a mux tree: $procmux$1053 (pure)
    Root of a mux tree: $procmux$1059 (pure)
    Root of a mux tree: $procmux$1065 (pure)
    Root of a mux tree: $procmux$1071 (pure)
    Root of a mux tree: $procmux$1077 (pure)
    Root of a mux tree: $procmux$1083 (pure)
    Root of a mux tree: $procmux$1089 (pure)
    Root of a mux tree: $procmux$1095 (pure)
    Root of a mux tree: $procmux$1101 (pure)
    Root of a mux tree: $procmux$1107 (pure)
    Root of a mux tree: $procmux$1113 (pure)
    Root of a mux tree: $procmux$1119 (pure)
    Root of a mux tree: $procmux$1125 (pure)
    Root of a mux tree: $procmux$1131 (pure)
    Root of a mux tree: $procmux$1137 (pure)
    Root of a mux tree: $procmux$1143 (pure)
    Root of a mux tree: $procmux$1149 (pure)
    Root of a mux tree: $procmux$1155 (pure)
    Root of a mux tree: $procmux$1161 (pure)
    Root of a mux tree: $procmux$1167 (pure)
    Root of a mux tree: $procmux$1173 (pure)
    Root of a mux tree: $procmux$1179 (pure)
    Root of a mux tree: $procmux$1185 (pure)
    Root of a mux tree: $procmux$1191 (pure)
    Root of a mux tree: $procmux$1197 (pure)
    Root of a mux tree: $procmux$1203 (pure)
    Root of a mux tree: $procmux$1209 (pure)
    Root of a mux tree: $procmux$1215 (pure)
    Root of a mux tree: $procmux$1218 (pure)
    Root of a mux tree: $procmux$486 (pure)
    Root of a mux tree: $procmux$489 (pure)
    Root of a mux tree: $procmux$492 (pure)
    Root of a mux tree: $procmux$498 (pure)
    Root of a mux tree: $procmux$552 (pure)
    Root of a mux tree: $procmux$612 (pure)
    Root of a mux tree: $procmux$672 (pure)
    Root of a mux tree: $procmux$732 (pure)
    Root of a mux tree: $procmux$792 (pure)
    Root of a mux tree: $procmux$852 (pure)
    Root of a mux tree: $procmux$912 (pure)
    Root of a mux tree: $procmux$969 (pure)
    Root of a mux tree: $procmux$975 (pure)
    Root of a mux tree: $procmux$981 (pure)
    Root of a mux tree: $procmux$987 (pure)
    Root of a mux tree: $procmux$993 (pure)
    Root of a mux tree: $procmux$999 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \counter_4b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$1235 (pure)
    Root of a mux tree: $procmux$1255 (pure)
    Root of a mux tree: $procmux$1275 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
  Optimizing cells in module \counter_4b.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_4b'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_4b..

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 address bits (of 32) from memory read port counter.$memrd$\MODO_reg$counter.v:126$399 (MODO_reg).
Removed top 29 address bits (of 32) from memory read port counter.$memrd$\MODO_reg$counter.v:138$400 (MODO_reg).
Removed top 29 address bits (of 32) from memory read port counter.$memrd$\MODO_reg$counter.v:152$401 (MODO_reg).
Removed top 29 address bits (of 32) from memory read port counter.$memrd$\MODO_reg$counter.v:165$402 (MODO_reg).
Removed top 29 address bits (of 32) from memory read port counter.$memrd$\MODO_reg$counter.v:179$403 (MODO_reg).
Removed top 29 address bits (of 32) from memory read port counter.$memrd$\MODO_reg$counter.v:192$404 (MODO_reg).
Removed top 29 address bits (of 32) from memory read port counter.$memrd$\MODO_reg$counter.v:204$405 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:101$484 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$407 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$408 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$409 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$410 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$411 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$412 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$413 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$414 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$415 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$416 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$417 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$418 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$419 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$420 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$421 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$422 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$423 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$424 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$425 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$426 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$427 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$428 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$429 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$430 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$431 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$432 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$433 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$434 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$435 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$436 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$437 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$438 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$439 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$440 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$441 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$442 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$443 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$444 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$445 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$446 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$447 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$448 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$449 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$450 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$451 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$452 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$453 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$454 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$455 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$456 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$457 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$458 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$459 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$460 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$461 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$462 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$463 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$464 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$465 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$466 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$467 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$468 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$469 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:56$470 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:63$471 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:65$472 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:69$473 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:71$474 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:75$475 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:77$476 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:81$477 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:83$478 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:87$479 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:89$480 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:93$481 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:95$482 (MODO_reg).
Removed top 29 address bits (of 32) from memory write port counter.$memwr$\MODO_reg$counter.v:99$483 (MODO_reg).
Removed cell counter.$procmux$489 ($mux).
Removed cell counter.$procmux$492 ($mux).
Removed cell counter.$procmux$498 ($mux).
Removed cell counter.$procmux$552 ($mux).
Removed cell counter.$procmux$612 ($mux).
Removed cell counter.$procmux$672 ($mux).
Removed cell counter.$procmux$732 ($mux).
Removed cell counter.$procmux$792 ($mux).
Removed cell counter.$procmux$852 ($mux).
Removed cell counter.$procmux$912 ($mux).
Removed cell counter.$procmux$972 ($mux).
Removed cell counter.$procmux$975 ($mux).
Removed cell counter.$procmux$978 ($mux).
Removed cell counter.$procmux$981 ($mux).
Removed cell counter.$procmux$990 ($mux).
Removed cell counter.$procmux$993 ($mux).
Removed cell counter.$procmux$996 ($mux).
Removed cell counter.$procmux$999 ($mux).
Removed cell counter.$procmux$1008 ($mux).
Removed cell counter.$procmux$1011 ($mux).
Removed cell counter.$procmux$1014 ($mux).
Removed cell counter.$procmux$1017 ($mux).
Removed cell counter.$procmux$1026 ($mux).
Removed cell counter.$procmux$1029 ($mux).
Removed cell counter.$procmux$1032 ($mux).
Removed cell counter.$procmux$1035 ($mux).
Removed cell counter.$procmux$1044 ($mux).
Removed cell counter.$procmux$1047 ($mux).
Removed cell counter.$procmux$1050 ($mux).
Removed cell counter.$procmux$1053 ($mux).
Removed cell counter.$procmux$1062 ($mux).
Removed cell counter.$procmux$1065 ($mux).
Removed cell counter.$procmux$1068 ($mux).
Removed cell counter.$procmux$1071 ($mux).
Removed cell counter.$procmux$1080 ($mux).
Removed cell counter.$procmux$1083 ($mux).
Removed cell counter.$procmux$1086 ($mux).
Removed cell counter.$procmux$1089 ($mux).
Removed cell counter.$procmux$1098 ($mux).
Removed cell counter.$procmux$1101 ($mux).
Removed cell counter.$procmux$1104 ($mux).
Removed cell counter.$procmux$1107 ($mux).
Removed cell counter.$procmux$1116 ($mux).
Removed cell counter.$procmux$1119 ($mux).
Removed cell counter.$procmux$1122 ($mux).
Removed cell counter.$procmux$1125 ($mux).
Removed cell counter.$procmux$1134 ($mux).
Removed cell counter.$procmux$1137 ($mux).
Removed cell counter.$procmux$1140 ($mux).
Removed cell counter.$procmux$1143 ($mux).
Removed cell counter.$procmux$1152 ($mux).
Removed cell counter.$procmux$1155 ($mux).
Removed cell counter.$procmux$1158 ($mux).
Removed cell counter.$procmux$1161 ($mux).
Removed cell counter.$procmux$1170 ($mux).
Removed cell counter.$procmux$1173 ($mux).
Removed cell counter.$procmux$1176 ($mux).
Removed cell counter.$procmux$1179 ($mux).
Removed cell counter.$procmux$1188 ($mux).
Removed cell counter.$procmux$1191 ($mux).
Removed cell counter.$procmux$1194 ($mux).
Removed cell counter.$procmux$1197 ($mux).
Removed cell counter.$procmux$1206 ($mux).
Removed cell counter.$procmux$1209 ($mux).
Removed cell counter.$procmux$1212 ($mux).
Removed cell counter.$procmux$1215 ($mux).
Removed top 1 bits (of 2) from wire counter.$0$memwr$\MODO_reg$counter.v:56$102_EN[1:0]$215.
Removed top 2 bits (of 4) from port B of cell counter_4b.$eq$counter_4b.v:51$3 ($eq).
Removed top 30 bits (of 32) from port B of cell counter_4b.$lt$counter_4b.v:51$4 ($lt).
Removed top 2 bits (of 4) from port B of cell counter_4b.$sub$counter_4b.v:53$6 ($sub).
Removed top 3 bits (of 4) from port B of cell counter_4b.$sub$counter_4b.v:65$9 ($sub).
Removed top 3 bits (of 4) from port B of cell counter_4b.$add$counter_4b.v:77$12 ($add).
Removed top 1 bits (of 2) from port B of cell counter_4b.$procmux$1228_CMP0 ($eq).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module counter:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module counter_4b:
  creating $macc model for $add$counter_4b.v:77$12 ($add).
  creating $macc model for $sub$counter_4b.v:53$6 ($sub).
  creating $macc model for $sub$counter_4b.v:65$9 ($sub).
  creating $alu model for $macc $sub$counter_4b.v:65$9.
  creating $alu model for $macc $sub$counter_4b.v:53$6.
  creating $alu model for $macc $add$counter_4b.v:77$12.
  creating $alu model for $lt$counter_4b.v:51$4 ($lt): new $alu
  creating $alu model for $eq$counter_4b.v:51$3 ($eq): merged with $lt$counter_4b.v:51$4.
  creating $alu cell for $lt$counter_4b.v:51$4, $eq$counter_4b.v:51$3: $auto$alumacc.cc:470:replace_alu$1519
  creating $alu cell for $add$counter_4b.v:77$12: $auto$alumacc.cc:470:replace_alu$1530
  creating $alu cell for $sub$counter_4b.v:53$6: $auto$alumacc.cc:470:replace_alu$1533
  creating $alu cell for $sub$counter_4b.v:65$9: $auto$alumacc.cc:470:replace_alu$1536
  created 4 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
  Cell `$procdff$1470' is identical to cell `$procdff$1302'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:63$150_ADDR = $memwr$\MODO_reg$counter.v:56$100_ADDR
    Removing $dff cell `$procdff$1470' from module `\counter'.
  Cell `$procdff$1473' is identical to cell `$procdff$1302'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:65$151_ADDR = $memwr$\MODO_reg$counter.v:56$100_ADDR
    Removing $dff cell `$procdff$1473' from module `\counter'.
  Cell `$procdff$1474' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:65$151_DATA = $memwr$\MODO_reg$counter.v:56$102_DATA
    Removing $dff cell `$procdff$1474' from module `\counter'.
  Cell `$procdff$1476' is identical to cell `$procdff$1326'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:69$152_ADDR = $memwr$\MODO_reg$counter.v:56$102_ADDR
    Removing $dff cell `$procdff$1476' from module `\counter'.
  Cell `$procdff$1477' is identical to cell `$procdff$1471'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:69$152_DATA = $memwr$\MODO_reg$counter.v:63$150_DATA
    Removing $dff cell `$procdff$1477' from module `\counter'.
  Cell `$procdff$1479' is identical to cell `$procdff$1326'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:71$153_ADDR = $memwr$\MODO_reg$counter.v:56$102_ADDR
    Removing $dff cell `$procdff$1479' from module `\counter'.
  Cell `$procdff$1480' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:71$153_DATA = $memwr$\MODO_reg$counter.v:56$102_DATA
    Removing $dff cell `$procdff$1480' from module `\counter'.
  Cell `$procdff$1482' is identical to cell `$procdff$1371'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:75$154_ADDR = $memwr$\MODO_reg$counter.v:56$110_ADDR
    Removing $dff cell `$procdff$1482' from module `\counter'.
  Cell `$procdff$1483' is identical to cell `$procdff$1471'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:75$154_DATA = $memwr$\MODO_reg$counter.v:63$150_DATA
    Removing $dff cell `$procdff$1483' from module `\counter'.
  Cell `$procdff$1485' is identical to cell `$procdff$1371'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:77$155_ADDR = $memwr$\MODO_reg$counter.v:56$110_ADDR
    Removing $dff cell `$procdff$1485' from module `\counter'.
  Cell `$procdff$1486' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:77$155_DATA = $memwr$\MODO_reg$counter.v:56$102_DATA
    Removing $dff cell `$procdff$1486' from module `\counter'.
  Cell `$procdff$1488' is identical to cell `$procdff$1374'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:81$156_ADDR = $memwr$\MODO_reg$counter.v:56$118_ADDR
    Removing $dff cell `$procdff$1488' from module `\counter'.
  Cell `$procdff$1489' is identical to cell `$procdff$1471'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:81$156_DATA = $memwr$\MODO_reg$counter.v:63$150_DATA
    Removing $dff cell `$procdff$1489' from module `\counter'.
  Cell `$procdff$1491' is identical to cell `$procdff$1374'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:83$157_ADDR = $memwr$\MODO_reg$counter.v:56$118_ADDR
    Removing $dff cell `$procdff$1491' from module `\counter'.
  Cell `$procdff$1492' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:83$157_DATA = $memwr$\MODO_reg$counter.v:56$102_DATA
    Removing $dff cell `$procdff$1492' from module `\counter'.
  Cell `$procdff$1494' is identical to cell `$procdff$1398'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:87$158_ADDR = $memwr$\MODO_reg$counter.v:56$126_ADDR
    Removing $dff cell `$procdff$1494' from module `\counter'.
  Cell `$procdff$1495' is identical to cell `$procdff$1471'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:87$158_DATA = $memwr$\MODO_reg$counter.v:63$150_DATA
    Removing $dff cell `$procdff$1495' from module `\counter'.
  Cell `$procdff$1497' is identical to cell `$procdff$1398'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:89$159_ADDR = $memwr$\MODO_reg$counter.v:56$126_ADDR
    Removing $dff cell `$procdff$1497' from module `\counter'.
  Cell `$procdff$1498' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:89$159_DATA = $memwr$\MODO_reg$counter.v:56$102_DATA
    Removing $dff cell `$procdff$1498' from module `\counter'.
  Cell `$procdff$1500' is identical to cell `$procdff$1422'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:93$160_ADDR = $memwr$\MODO_reg$counter.v:56$134_ADDR
    Removing $dff cell `$procdff$1500' from module `\counter'.
  Cell `$procdff$1501' is identical to cell `$procdff$1471'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:93$160_DATA = $memwr$\MODO_reg$counter.v:63$150_DATA
    Removing $dff cell `$procdff$1501' from module `\counter'.
  Cell `$procdff$1503' is identical to cell `$procdff$1422'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:95$161_ADDR = $memwr$\MODO_reg$counter.v:56$134_ADDR
    Removing $dff cell `$procdff$1503' from module `\counter'.
  Cell `$procdff$1504' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:95$161_DATA = $memwr$\MODO_reg$counter.v:56$102_DATA
    Removing $dff cell `$procdff$1504' from module `\counter'.
  Cell `$procdff$1506' is identical to cell `$procdff$1446'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:99$162_ADDR = $memwr$\MODO_reg$counter.v:56$142_ADDR
    Removing $dff cell `$procdff$1506' from module `\counter'.
  Cell `$procdff$1507' is identical to cell `$procdff$1471'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:99$162_DATA = $memwr$\MODO_reg$counter.v:63$150_DATA
    Removing $dff cell `$procdff$1507' from module `\counter'.
  Cell `$procdff$1509' is identical to cell `$procdff$1446'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:101$163_ADDR = $memwr$\MODO_reg$counter.v:56$142_ADDR
    Removing $dff cell `$procdff$1509' from module `\counter'.
  Cell `$procdff$1510' is identical to cell `$procdff$1375'.
    Redirecting output \Q: $memwr$\MODO_reg$counter.v:101$163_DATA = $memwr$\MODO_reg$counter.v:56$102_DATA
    Removing $dff cell `$procdff$1510' from module `\counter'.
Finding identical cells in module `\counter_4b'.
Removed a total of 27 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$1005 (pure)
    Root of a mux tree: $procmux$1023 (pure)
    Root of a mux tree: $procmux$1041 (pure)
    Root of a mux tree: $procmux$1059 (pure)
    Root of a mux tree: $procmux$1077 (pure)
    Root of a mux tree: $procmux$1095 (pure)
    Root of a mux tree: $procmux$1113 (pure)
    Root of a mux tree: $procmux$1131 (pure)
    Root of a mux tree: $procmux$1149 (pure)
    Root of a mux tree: $procmux$1167 (pure)
    Root of a mux tree: $procmux$1185 (pure)
    Root of a mux tree: $procmux$1203 (pure)
    Root of a mux tree: $procmux$1218 (pure)
    Root of a mux tree: $procmux$486 (pure)
    Root of a mux tree: $procmux$969 (pure)
    Root of a mux tree: $procmux$987 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \counter_4b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$1235 (pure)
    Root of a mux tree: $procmux$1255 (pure)
    Root of a mux tree: $procmux$1275 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
  Optimizing cells in module \counter_4b.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$1522: { $auto$alumacc.cc:483:replace_alu$1520 [0] $auto$alumacc.cc:483:replace_alu$1520 [1] $auto$alumacc.cc:483:replace_alu$1520 [2] $auto$alumacc.cc:483:replace_alu$1520 [3] }
  Optimizing cells in module \counter_4b.
Performed a total of 1 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_4b'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$1378 ($dff) from module counter.
Removing $procdff$1398 ($dff) from module counter.
Removing $procdff$1422 ($dff) from module counter.
Removing $procdff$1446 ($dff) from module counter.
Removing $procdff$1278 ($dff) from module counter.
Removing $procdff$1302 ($dff) from module counter.
Removing $procdff$1326 ($dff) from module counter.
Removing $procdff$1371 ($dff) from module counter.
Removing $procdff$1374 ($dff) from module counter.
Removing $procdff$1375 ($dff) from module counter.
Replaced 10 DFF cells.

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_4b..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Rerunning OPT passes. (Maybe there is more to do..)

3.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$1005 (pure)
    Root of a mux tree: $procmux$1023 (pure)
    Root of a mux tree: $procmux$1041 (pure)
    Root of a mux tree: $procmux$1059 (pure)
    Root of a mux tree: $procmux$1077 (pure)
    Root of a mux tree: $procmux$1095 (pure)
    Root of a mux tree: $procmux$1113 (pure)
    Root of a mux tree: $procmux$1131 (pure)
    Root of a mux tree: $procmux$1149 (pure)
    Root of a mux tree: $procmux$1167 (pure)
    Root of a mux tree: $procmux$1185 (pure)
    Root of a mux tree: $procmux$1203 (pure)
    Root of a mux tree: $procmux$1218 (pure)
    Root of a mux tree: $procmux$486 (pure)
    Root of a mux tree: $procmux$969 (pure)
    Root of a mux tree: $procmux$987 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \counter_4b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$1235 (pure)
    Root of a mux tree: $procmux$1255 (pure)
    Root of a mux tree: $procmux$1275 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
  Optimizing cells in module \counter_4b.
Performed a total of 0 changes.

3.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_4b'.
Removed a total of 0 cells.

3.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_4b..

3.10.15. Executing OPT_EXPR pass (perform const folding).

3.10.16. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking counter.$memwr$\MODO_reg$counter.v:101$163_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:56$102_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:56$103_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:63$150_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:65$151_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:69$152_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:71$153_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:75$154_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:77$155_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:81$156_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:83$157_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:87$158_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:89$159_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:93$160_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:95$161_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking counter.$memwr$\MODO_reg$counter.v:99$162_EN as FSM state register:
    Users of register don't seem to benefit from recoding.

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_4b..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_4b'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_4b..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\MODO_reg$counter.v:101$484' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$407' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$408' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$409' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$410' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$411' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$412' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$413' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$414' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$415' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$416' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$417' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$418' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$419' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$420' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$421' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$422' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$423' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$424' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$425' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$426' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$427' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$428' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$429' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$430' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$431' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$432' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$433' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$434' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$435' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$436' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$437' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$438' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$439' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$440' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$441' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$442' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$443' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$444' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$445' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$446' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$447' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$448' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$449' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$450' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$451' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$452' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$453' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$454' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$455' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$456' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$457' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$458' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$459' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$460' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$461' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$462' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$463' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$464' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:56$465' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$466' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$467' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$468' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$469' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:56$470' in module `\counter': no (compatible) $dff found.
Checking cell `$memwr$\MODO_reg$counter.v:63$471' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:65$472' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:69$473' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:71$474' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:75$475' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:77$476' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:81$477' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:83$478' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:87$479' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:89$480' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:93$481' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:95$482' in module `\counter': merged $dff to cell.
Checking cell `$memwr$\MODO_reg$counter.v:99$483' in module `\counter': merged $dff to cell.
Checking cell `$memrd$\MODO_reg$counter.v:126$399' in module `\counter': no (compatible) $dff found.
Checking cell `$memrd$\MODO_reg$counter.v:138$400' in module `\counter': no (compatible) $dff found.
Checking cell `$memrd$\MODO_reg$counter.v:152$401' in module `\counter': no (compatible) $dff found.
Checking cell `$memrd$\MODO_reg$counter.v:165$402' in module `\counter': no (compatible) $dff found.
Checking cell `$memrd$\MODO_reg$counter.v:179$403' in module `\counter': no (compatible) $dff found.
Checking cell `$memrd$\MODO_reg$counter.v:192$404' in module `\counter': no (compatible) $dff found.
Checking cell `$memrd$\MODO_reg$counter.v:204$405' in module `\counter': no (compatible) $dff found.

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
  removing unused `$dff' cell `$procdff$1376'.
  removing unused `$dff' cell `$procdff$1379'.
  removing unused `$dff' cell `$procdff$1471'.
  removing unused `$dff' cell `$procdff$1472'.
  removing unused `$dff' cell `$procdff$1475'.
  removing unused `$dff' cell `$procdff$1478'.
  removing unused `$dff' cell `$procdff$1481'.
  removing unused `$dff' cell `$procdff$1484'.
  removing unused `$dff' cell `$procdff$1487'.
  removing unused `$dff' cell `$procdff$1490'.
  removing unused `$dff' cell `$procdff$1493'.
  removing unused `$dff' cell `$procdff$1496'.
  removing unused `$dff' cell `$procdff$1499'.
  removing unused `$dff' cell `$procdff$1502'.
  removing unused `$dff' cell `$procdff$1505'.
  removing unused `$dff' cell `$procdff$1508'.
  removing unused `$dff' cell `$procdff$1511'.
Finding unused cells or wires in module \counter_4b..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating write ports of memory counter.MODO_reg by address:
  New clock domain: posedge \clk
    Port 0 ($memwr$\MODO_reg$counter.v:56$407) has addr 3'000.
      Active bits: 01
    Port 1 ($memwr$\MODO_reg$counter.v:56$408) has addr 3'000.
      Active bits: 10
      Merging port 0 into this one.
      Active bits: 11
  New clock domain: unclocked
    Port 2 ($memwr$\MODO_reg$counter.v:56$409) has addr 3'000.
      Active bits: 00
    Port 3 ($memwr$\MODO_reg$counter.v:56$410) has addr 3'000.
      Active bits: 00
      Merging port 2 into this one.
      Active bits: 00
    Port 4 ($memwr$\MODO_reg$counter.v:56$411) has addr 3'000.
      Active bits: 00
      Merging port 3 into this one.
      Active bits: 00
    Port 5 ($memwr$\MODO_reg$counter.v:56$412) has addr 3'000.
      Active bits: 00
      Merging port 4 into this one.
      Active bits: 00
    Port 6 ($memwr$\MODO_reg$counter.v:56$413) has addr 3'000.
      Active bits: 00
      Merging port 5 into this one.
      Active bits: 00
    Port 7 ($memwr$\MODO_reg$counter.v:56$414) has addr 3'000.
      Active bits: 00
      Merging port 6 into this one.
      Active bits: 00
  New clock domain: posedge \clk
    Port 8 ($memwr$\MODO_reg$counter.v:56$415) has addr 3'001.
      Active bits: 01
    Port 9 ($memwr$\MODO_reg$counter.v:56$416) has addr 3'001.
      Active bits: 10
      Merging port 8 into this one.
      Active bits: 11
  New clock domain: unclocked
    Port 10 ($memwr$\MODO_reg$counter.v:56$417) has addr 3'001.
      Active bits: 00
    Port 11 ($memwr$\MODO_reg$counter.v:56$418) has addr 3'001.
      Active bits: 00
      Merging port 10 into this one.
      Active bits: 00
    Port 12 ($memwr$\MODO_reg$counter.v:56$419) has addr 3'001.
      Active bits: 00
      Merging port 11 into this one.
      Active bits: 00
    Port 13 ($memwr$\MODO_reg$counter.v:56$420) has addr 3'001.
      Active bits: 00
      Merging port 12 into this one.
      Active bits: 00
    Port 14 ($memwr$\MODO_reg$counter.v:56$421) has addr 3'001.
      Active bits: 00
      Merging port 13 into this one.
      Active bits: 00
    Port 15 ($memwr$\MODO_reg$counter.v:56$422) has addr 3'001.
      Active bits: 00
      Merging port 14 into this one.
      Active bits: 00
  New clock domain: posedge \clk
    Port 16 ($memwr$\MODO_reg$counter.v:56$423) has addr 3'010.
      Active bits: 01
    Port 17 ($memwr$\MODO_reg$counter.v:56$424) has addr 3'010.
      Active bits: 10
      Merging port 16 into this one.
      Active bits: 11
  New clock domain: unclocked
    Port 18 ($memwr$\MODO_reg$counter.v:56$425) has addr 3'010.
      Active bits: 00
    Port 19 ($memwr$\MODO_reg$counter.v:56$426) has addr 3'010.
      Active bits: 00
      Merging port 18 into this one.
      Active bits: 00
    Port 20 ($memwr$\MODO_reg$counter.v:56$427) has addr 3'010.
      Active bits: 00
      Merging port 19 into this one.
      Active bits: 00
    Port 21 ($memwr$\MODO_reg$counter.v:56$428) has addr 3'010.
      Active bits: 00
      Merging port 20 into this one.
      Active bits: 00
    Port 22 ($memwr$\MODO_reg$counter.v:56$429) has addr 3'010.
      Active bits: 00
      Merging port 21 into this one.
      Active bits: 00
    Port 23 ($memwr$\MODO_reg$counter.v:56$430) has addr 3'010.
      Active bits: 00
      Merging port 22 into this one.
      Active bits: 00
  New clock domain: posedge \clk
    Port 24 ($memwr$\MODO_reg$counter.v:56$431) has addr 3'011.
      Active bits: 01
    Port 25 ($memwr$\MODO_reg$counter.v:56$432) has addr 3'011.
      Active bits: 10
      Merging port 24 into this one.
      Active bits: 11
  New clock domain: unclocked
    Port 26 ($memwr$\MODO_reg$counter.v:56$433) has addr 3'011.
      Active bits: 00
    Port 27 ($memwr$\MODO_reg$counter.v:56$434) has addr 3'011.
      Active bits: 00
      Merging port 26 into this one.
      Active bits: 00
    Port 28 ($memwr$\MODO_reg$counter.v:56$435) has addr 3'011.
      Active bits: 00
      Merging port 27 into this one.
      Active bits: 00
    Port 29 ($memwr$\MODO_reg$counter.v:56$436) has addr 3'011.
      Active bits: 00
      Merging port 28 into this one.
      Active bits: 00
    Port 30 ($memwr$\MODO_reg$counter.v:56$437) has addr 3'011.
      Active bits: 00
      Merging port 29 into this one.
      Active bits: 00
    Port 31 ($memwr$\MODO_reg$counter.v:56$438) has addr 3'011.
      Active bits: 00
      Merging port 30 into this one.
      Active bits: 00
  New clock domain: posedge \clk
    Port 32 ($memwr$\MODO_reg$counter.v:56$439) has addr 3'100.
      Active bits: 01
    Port 33 ($memwr$\MODO_reg$counter.v:56$440) has addr 3'100.
      Active bits: 10
      Merging port 32 into this one.
      Active bits: 11
  New clock domain: unclocked
    Port 34 ($memwr$\MODO_reg$counter.v:56$441) has addr 3'100.
      Active bits: 00
    Port 35 ($memwr$\MODO_reg$counter.v:56$442) has addr 3'100.
      Active bits: 00
      Merging port 34 into this one.
      Active bits: 00
    Port 36 ($memwr$\MODO_reg$counter.v:56$443) has addr 3'100.
      Active bits: 00
      Merging port 35 into this one.
      Active bits: 00
    Port 37 ($memwr$\MODO_reg$counter.v:56$444) has addr 3'100.
      Active bits: 00
      Merging port 36 into this one.
      Active bits: 00
    Port 38 ($memwr$\MODO_reg$counter.v:56$445) has addr 3'100.
      Active bits: 00
      Merging port 37 into this one.
      Active bits: 00
    Port 39 ($memwr$\MODO_reg$counter.v:56$446) has addr 3'100.
      Active bits: 00
      Merging port 38 into this one.
      Active bits: 00
  New clock domain: posedge \clk
    Port 40 ($memwr$\MODO_reg$counter.v:56$447) has addr 3'101.
      Active bits: 01
    Port 41 ($memwr$\MODO_reg$counter.v:56$448) has addr 3'101.
      Active bits: 10
      Merging port 40 into this one.
      Active bits: 11
  New clock domain: unclocked
    Port 42 ($memwr$\MODO_reg$counter.v:56$449) has addr 3'101.
      Active bits: 00
    Port 43 ($memwr$\MODO_reg$counter.v:56$450) has addr 3'101.
      Active bits: 00
      Merging port 42 into this one.
      Active bits: 00
    Port 44 ($memwr$\MODO_reg$counter.v:56$451) has addr 3'101.
      Active bits: 00
      Merging port 43 into this one.
      Active bits: 00
    Port 45 ($memwr$\MODO_reg$counter.v:56$452) has addr 3'101.
      Active bits: 00
      Merging port 44 into this one.
      Active bits: 00
    Port 46 ($memwr$\MODO_reg$counter.v:56$453) has addr 3'101.
      Active bits: 00
      Merging port 45 into this one.
      Active bits: 00
    Port 47 ($memwr$\MODO_reg$counter.v:56$454) has addr 3'101.
      Active bits: 00
      Merging port 46 into this one.
      Active bits: 00
  New clock domain: posedge \clk
    Port 48 ($memwr$\MODO_reg$counter.v:56$455) has addr 3'110.
      Active bits: 01
    Port 49 ($memwr$\MODO_reg$counter.v:56$456) has addr 3'110.
      Active bits: 10
      Merging port 48 into this one.
      Active bits: 11
  New clock domain: unclocked
    Port 50 ($memwr$\MODO_reg$counter.v:56$457) has addr 3'110.
      Active bits: 00
    Port 51 ($memwr$\MODO_reg$counter.v:56$458) has addr 3'110.
      Active bits: 00
      Merging port 50 into this one.
      Active bits: 00
    Port 52 ($memwr$\MODO_reg$counter.v:56$459) has addr 3'110.
      Active bits: 00
      Merging port 51 into this one.
      Active bits: 00
    Port 53 ($memwr$\MODO_reg$counter.v:56$460) has addr 3'110.
      Active bits: 00
      Merging port 52 into this one.
      Active bits: 00
    Port 54 ($memwr$\MODO_reg$counter.v:56$461) has addr 3'110.
      Active bits: 00
      Merging port 53 into this one.
      Active bits: 00
    Port 55 ($memwr$\MODO_reg$counter.v:56$462) has addr 3'110.
      Active bits: 00
      Merging port 54 into this one.
      Active bits: 00
  New clock domain: posedge \clk
    Port 56 ($memwr$\MODO_reg$counter.v:56$463) has addr 3'111.
      Active bits: 01
    Port 57 ($memwr$\MODO_reg$counter.v:56$464) has addr 3'111.
      Active bits: 10
      Merging port 56 into this one.
      Active bits: 11
  New clock domain: unclocked
    Port 58 ($memwr$\MODO_reg$counter.v:56$465) has addr 3'111.
      Active bits: 00
    Port 59 ($memwr$\MODO_reg$counter.v:56$466) has addr 3'111.
      Active bits: 00
      Merging port 58 into this one.
      Active bits: 00
    Port 60 ($memwr$\MODO_reg$counter.v:56$467) has addr 3'111.
      Active bits: 00
      Merging port 59 into this one.
      Active bits: 00
    Port 61 ($memwr$\MODO_reg$counter.v:56$468) has addr 3'111.
      Active bits: 00
      Merging port 60 into this one.
      Active bits: 00
    Port 62 ($memwr$\MODO_reg$counter.v:56$469) has addr 3'111.
      Active bits: 00
      Merging port 61 into this one.
      Active bits: 00
    Port 63 ($memwr$\MODO_reg$counter.v:56$470) has addr 3'111.
      Active bits: 00
      Merging port 62 into this one.
      Active bits: 00
  New clock domain: posedge \clk
    Port 64 ($memwr$\MODO_reg$counter.v:63$471) has addr 3'001.
      Active bits: 11
    Port 65 ($memwr$\MODO_reg$counter.v:65$472) has addr 3'001.
      Active bits: 11
      Merging port 64 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11
    Port 66 ($memwr$\MODO_reg$counter.v:69$473) has addr 3'010.
      Active bits: 11
    Port 67 ($memwr$\MODO_reg$counter.v:71$474) has addr 3'010.
      Active bits: 11
      Merging port 66 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11
    Port 68 ($memwr$\MODO_reg$counter.v:75$475) has addr 3'011.
      Active bits: 11
    Port 69 ($memwr$\MODO_reg$counter.v:77$476) has addr 3'011.
      Active bits: 11
      Merging port 68 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11
    Port 70 ($memwr$\MODO_reg$counter.v:81$477) has addr 3'100.
      Active bits: 11
    Port 71 ($memwr$\MODO_reg$counter.v:83$478) has addr 3'100.
      Active bits: 11
      Merging port 70 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11
    Port 72 ($memwr$\MODO_reg$counter.v:87$479) has addr 3'101.
      Active bits: 11
    Port 73 ($memwr$\MODO_reg$counter.v:89$480) has addr 3'101.
      Active bits: 11
      Merging port 72 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11
    Port 74 ($memwr$\MODO_reg$counter.v:93$481) has addr 3'110.
      Active bits: 11
    Port 75 ($memwr$\MODO_reg$counter.v:95$482) has addr 3'110.
      Active bits: 11
      Merging port 74 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11
    Port 76 ($memwr$\MODO_reg$counter.v:99$483) has addr 3'111.
      Active bits: 11
    Port 77 ($memwr$\MODO_reg$counter.v:101$484) has addr 3'111.
      Active bits: 11
      Merging port 76 into this one.
      Creating logic for merging DATA and EN ports.
      Active bits: 11
Consolidating write ports of memory counter.MODO_reg using sat-based resource sharing:
  Port 0 ($memwr$\MODO_reg$counter.v:56$408) on posedge \clk: considered
  Port 1 ($memwr$\MODO_reg$counter.v:56$414) unclocked: not considered
  Port 2 ($memwr$\MODO_reg$counter.v:56$416) on posedge \clk: considered
  Port 3 ($memwr$\MODO_reg$counter.v:56$422) unclocked: not considered
  Port 4 ($memwr$\MODO_reg$counter.v:56$424) on posedge \clk: considered
  Port 5 ($memwr$\MODO_reg$counter.v:56$430) unclocked: not considered
  Port 6 ($memwr$\MODO_reg$counter.v:56$432) on posedge \clk: considered
  Port 7 ($memwr$\MODO_reg$counter.v:56$438) unclocked: not considered
  Port 8 ($memwr$\MODO_reg$counter.v:56$440) on posedge \clk: considered
  Port 9 ($memwr$\MODO_reg$counter.v:56$446) unclocked: not considered
  Port 10 ($memwr$\MODO_reg$counter.v:56$448) on posedge \clk: considered
  Port 11 ($memwr$\MODO_reg$counter.v:56$454) unclocked: not considered
  Port 12 ($memwr$\MODO_reg$counter.v:56$456) on posedge \clk: considered
  Port 13 ($memwr$\MODO_reg$counter.v:56$462) unclocked: not considered
  Port 14 ($memwr$\MODO_reg$counter.v:56$464) on posedge \clk: considered
  Port 15 ($memwr$\MODO_reg$counter.v:56$470) unclocked: not considered
  Port 16 ($memwr$\MODO_reg$counter.v:65$472) on posedge \clk: considered
  Port 17 ($memwr$\MODO_reg$counter.v:71$474) on posedge \clk: considered
  Port 18 ($memwr$\MODO_reg$counter.v:77$476) on posedge \clk: considered
  Port 19 ($memwr$\MODO_reg$counter.v:83$478) on posedge \clk: considered
  Port 20 ($memwr$\MODO_reg$counter.v:89$480) on posedge \clk: considered
  Port 21 ($memwr$\MODO_reg$counter.v:95$482) on posedge \clk: considered
  Port 22 ($memwr$\MODO_reg$counter.v:101$484) on posedge \clk: considered
  Common input cone for all EN signals: 35 cells.
  Size of unconstrained SAT problem: 214 variables, 544 clauses
  According to SAT solver sharing of port 16 with port 17 is not possible.
  According to SAT solver sharing of port 17 with port 18 is not possible.
  According to SAT solver sharing of port 18 with port 19 is not possible.
  According to SAT solver sharing of port 19 with port 20 is not possible.
  According to SAT solver sharing of port 20 with port 21 is not possible.
  According to SAT solver sharing of port 21 with port 22 is not possible.

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_4b..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\MODO_reg' in module `\counter':
  $memwr$\MODO_reg$counter.v:56$408 ($memwr)
  $memwr$\MODO_reg$counter.v:56$414 ($memwr)
  $memwr$\MODO_reg$counter.v:56$416 ($memwr)
  $memwr$\MODO_reg$counter.v:56$422 ($memwr)
  $memwr$\MODO_reg$counter.v:56$424 ($memwr)
  $memwr$\MODO_reg$counter.v:56$430 ($memwr)
  $memwr$\MODO_reg$counter.v:56$432 ($memwr)
  $memwr$\MODO_reg$counter.v:56$438 ($memwr)
  $memwr$\MODO_reg$counter.v:56$440 ($memwr)
  $memwr$\MODO_reg$counter.v:56$446 ($memwr)
  $memwr$\MODO_reg$counter.v:56$448 ($memwr)
  $memwr$\MODO_reg$counter.v:56$454 ($memwr)
  $memwr$\MODO_reg$counter.v:56$456 ($memwr)
  $memwr$\MODO_reg$counter.v:56$462 ($memwr)
  $memwr$\MODO_reg$counter.v:56$464 ($memwr)
  $memwr$\MODO_reg$counter.v:56$470 ($memwr)
  $memwr$\MODO_reg$counter.v:65$472 ($memwr)
  $memwr$\MODO_reg$counter.v:71$474 ($memwr)
  $memwr$\MODO_reg$counter.v:77$476 ($memwr)
  $memwr$\MODO_reg$counter.v:83$478 ($memwr)
  $memwr$\MODO_reg$counter.v:89$480 ($memwr)
  $memwr$\MODO_reg$counter.v:95$482 ($memwr)
  $memwr$\MODO_reg$counter.v:101$484 ($memwr)
  $memrd$\MODO_reg$counter.v:126$399 ($memrd)
  $memrd$\MODO_reg$counter.v:138$400 ($memrd)
  $memrd$\MODO_reg$counter.v:152$401 ($memrd)
  $memrd$\MODO_reg$counter.v:165$402 ($memrd)
  $memrd$\MODO_reg$counter.v:179$403 ($memrd)
  $memrd$\MODO_reg$counter.v:192$404 ($memrd)
  $memrd$\MODO_reg$counter.v:204$405 ($memrd)

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_4b..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$1200' in module `counter' with inverter.
Replacing $not cell `$auto$memory_share.cc:340:merge_en_data$1705' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1723': A=1'1
Replacing $mux cell `$procmux$1182' (mux_bool) in module `\counter' with constant driver `$procmux$1182_Y [1] = \WnRCO [6]'.
Replacing $or cell `$auto$memory_share.cc:342:merge_en_data$1709' in module `\counter' with identity for port B.
Replacing $and cell `$auto$memory_share.cc:339:merge_en_data$1703' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1725': A=1'1, B=$0$memwr$\MODO_reg$counter.v:101$163_EN[1:0]$398 [1]
Replacing $mux cell `$procmux$1020' in module `counter' with inverter.
Replacing $and cell `$auto$memory_share.cc:339:merge_en_data$1573' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1727': A=1'1, B=$0$memwr$\MODO_reg$counter.v:71$153_EN[1:0]$368 [1]
Replacing $mux cell `$procmux$1002' (mux_bool) in module `\counter' with constant driver `$procmux$1002_Y [1] = \WnRCO [1]'.
Replacing $or cell `$auto$memory_share.cc:342:merge_en_data$1579' in module `\counter' with identity for port B.
Replacing $mux cell `$procmux$1146' (mux_bool) in module `\counter' with constant driver `$procmux$1146_Y [1] = \WnRCO [5]'.
Replacing $or cell `$auto$memory_share.cc:342:merge_en_data$1683' in module `\counter' with identity for port B.
Replacing $mux cell `$procmux$1164' in module `counter' with inverter.
Replacing $and cell `$auto$memory_share.cc:339:merge_en_data$1677' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1729': A=1'1, B=$0$memwr$\MODO_reg$counter.v:95$161_EN[1:0]$392 [1]
Replacing $mux cell `$procmux$1074' (mux_bool) in module `\counter' with constant driver `$procmux$1074_Y [1] = \WnRCO [3]'.
Replacing $or cell `$auto$memory_share.cc:342:merge_en_data$1631' in module `\counter' with identity for port B.
Replacing $not cell `$auto$memory_share.cc:340:merge_en_data$1627' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1731': A=1'1
Replacing $mux cell `$procmux$966' (mux_bool) in module `\counter' with constant driver `$procmux$966_Y [1] = \WnRCO [0]'.
Replacing $mux cell `$procmux$1092' in module `counter' with inverter.
Replacing $and cell `$auto$memory_share.cc:339:merge_en_data$1625' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1733': A=1'1, B=$0$memwr$\MODO_reg$counter.v:83$157_EN[1:0]$380 [1]
Replacing $mux cell `$procmux$984' in module `counter' with inverter.
Replacing $and cell `$auto$memory_share.cc:339:merge_en_data$1547' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1735': A=1'1, B=$0$memwr$\MODO_reg$counter.v:65$151_EN[1:0]$362 [1]
Replacing $mux cell `$procmux$1110' (mux_bool) in module `\counter' with constant driver `$procmux$1110_Y [1] = \WnRCO [4]'.
Replacing $mux cell `$procmux$1128' in module `counter' with inverter.
Replacing $not cell `$auto$memory_share.cc:340:merge_en_data$1549' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1737': A=1'1
Replacing $and cell `$auto$memory_share.cc:339:merge_en_data$1651' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1739': A=1'1, B=$0$memwr$\MODO_reg$counter.v:89$159_EN[1:0]$386 [1]
Replacing $not cell `$auto$memory_share.cc:340:merge_en_data$1653' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1741': A=1'1
Replacing $or cell `$auto$memory_share.cc:342:merge_en_data$1553' in module `\counter' with identity for port B.
Replacing $or cell `$auto$memory_share.cc:342:merge_en_data$1657' in module `\counter' with identity for port B.
Replacing $mux cell `$procmux$1038' (mux_bool) in module `\counter' with constant driver `$procmux$1038_Y [1] = \WnRCO [2]'.
Replacing $not cell `$auto$memory_share.cc:340:merge_en_data$1575' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1743': A=1'1
Replacing $mux cell `$procmux$1056' in module `counter' with inverter.
Replacing $and cell `$auto$memory_share.cc:339:merge_en_data$1599' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1745': A=1'1, B=$0$memwr$\MODO_reg$counter.v:77$155_EN[1:0]$374 [1]
Replacing $not cell `$auto$memory_share.cc:340:merge_en_data$1601' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1747': A=1'1
Replacing $or cell `$auto$memory_share.cc:342:merge_en_data$1605' in module `\counter' with identity for port B.
Replacing $mux cell `$procmux$486' (mux_bool) in module `\counter' with constant driver `$0$memwr$\MODO_reg$counter.v:56$102_EN[1:0]$215 = \RESET'.
Replacing $not cell `$auto$memory_share.cc:340:merge_en_data$1679' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1749': A=1'1
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1723' (1'1) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1722 = 1'0'.
Replacing $and cell `$auto$memory_share.cc:340:merge_en_data$1707' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1751': A=1'0, B=1'0
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1731' (1'1) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1730 = 1'0'.
Replacing $and cell `$auto$memory_share.cc:340:merge_en_data$1629' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1753': A=1'0, B=1'0
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1737' (1'1) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1736 = 1'0'.
Replacing $and cell `$auto$memory_share.cc:340:merge_en_data$1551' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1755': A=1'0, B=1'0
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1741' (1'1) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1740 = 1'0'.
Replacing $and cell `$auto$memory_share.cc:340:merge_en_data$1655' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1757': A=1'0, B=1'0
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1743' (1'1) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1742 = 1'0'.
Replacing $and cell `$auto$memory_share.cc:340:merge_en_data$1577' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1759': A=1'0, B=1'0
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1747' (1'1) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1746 = 1'0'.
Replacing $and cell `$auto$memory_share.cc:340:merge_en_data$1603' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1761': A=1'0, B=1'0
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1749' (1'1) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1748 = 1'0'.
Replacing $and cell `$auto$memory_share.cc:340:merge_en_data$1681' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1763': A=1'0, B=1'0
Replacing $and cell `$auto$opt_expr.cc:158:group_cell_inputs$1751' (const_and) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1750 = 1'0'.
Replacing $not cell `$auto$memory_share.cc:346:merge_en_data$1717' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1765': A=1'0
Replacing $and cell `$auto$opt_expr.cc:158:group_cell_inputs$1753' (const_and) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1752 = 1'0'.
Replacing $not cell `$auto$memory_share.cc:346:merge_en_data$1639' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1767': A=1'0
Replacing $and cell `$auto$opt_expr.cc:158:group_cell_inputs$1759' (const_and) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1758 = 1'0'.
Replacing $not cell `$auto$memory_share.cc:346:merge_en_data$1587' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1769': A=1'0
Replacing $and cell `$auto$opt_expr.cc:158:group_cell_inputs$1761' (const_and) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1760 = 1'0'.
Replacing $not cell `$auto$memory_share.cc:346:merge_en_data$1613' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1771': A=1'0
Replacing $and cell `$auto$opt_expr.cc:158:group_cell_inputs$1763' (const_and) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1762 = 1'0'.
Replacing $and cell `$auto$opt_expr.cc:158:group_cell_inputs$1757' (const_and) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1756 = 1'0'.
Replacing $and cell `$auto$opt_expr.cc:158:group_cell_inputs$1755' (const_and) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1754 = 1'0'.
Replacing $not cell `$auto$memory_share.cc:346:merge_en_data$1665' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1773': A=1'0
Replacing $not cell `$auto$memory_share.cc:346:merge_en_data$1561' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1775': A=1'0
Replacing $not cell `$auto$memory_share.cc:346:merge_en_data$1691' in module `counter' with cells using grouped bits:
  New cell `$auto$opt_expr.cc:158:group_cell_inputs$1777': A=1'0
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1765' (1'0) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1764 = 1'1'.
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1767' (1'0) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1766 = 1'1'.
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1769' (1'0) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1768 = 1'1'.
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1771' (1'0) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1770 = 1'1'.
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1777' (1'0) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1776 = 1'1'.
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1775' (1'0) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1774 = 1'1'.
Replacing $not cell `$auto$opt_expr.cc:158:group_cell_inputs$1773' (1'0) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1772 = 1'1'.
Replacing $mux cell `$procmux$1241' (mux_bool) in module `\counter_4b' with constant driver `$procmux$1241_Y = $eq$counter_4b.v:75$11_Y'.
Replacing $mux cell `$procmux$1245' (mux_bool) in module `\counter_4b' with constant driver `$procmux$1245_Y = $eq$counter_4b.v:63$8_Y'.
Replacing $mux cell `$procmux$1249' (mux_bool) in module `\counter_4b' with constant driver `$procmux$1249_Y = $logic_or$counter_4b.v:51$5_Y'.
Replacing $mux cell `$procmux$1232' in module `counter_4b' with and-gate.
Replacing $mux cell `$procmux$1252' in module `counter_4b' with and-gate.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
  Cell `$auto$memory_share.cc:337:merge_en_data$1569' is identical to cell `$auto$memory_share.cc:337:merge_en_data$1595'.
    Redirecting output \Y: $auto$rtlil.cc:1600:Not$1570 = $auto$rtlil.cc:1600:Not$1596
    Removing $not cell `$auto$memory_share.cc:337:merge_en_data$1569' from module `\counter'.
  Cell `$auto$memory_share.cc:337:merge_en_data$1621' is identical to cell `$auto$memory_share.cc:337:merge_en_data$1595'.
    Redirecting output \Y: $auto$rtlil.cc:1600:Not$1622 = $auto$rtlil.cc:1600:Not$1596
    Removing $not cell `$auto$memory_share.cc:337:merge_en_data$1621' from module `\counter'.
  Cell `$auto$memory_share.cc:337:merge_en_data$1543' is identical to cell `$auto$memory_share.cc:337:merge_en_data$1595'.
    Redirecting output \Y: $auto$rtlil.cc:1600:Not$1544 = $auto$rtlil.cc:1600:Not$1596
    Removing $not cell `$auto$memory_share.cc:337:merge_en_data$1543' from module `\counter'.
  Cell `$auto$memory_share.cc:337:merge_en_data$1673' is identical to cell `$auto$memory_share.cc:337:merge_en_data$1595'.
    Redirecting output \Y: $auto$rtlil.cc:1600:Not$1674 = $auto$rtlil.cc:1600:Not$1596
    Removing $not cell `$auto$memory_share.cc:337:merge_en_data$1673' from module `\counter'.
  Cell `$auto$memory_share.cc:337:merge_en_data$1699' is identical to cell `$auto$memory_share.cc:337:merge_en_data$1595'.
    Redirecting output \Y: $auto$rtlil.cc:1600:Not$1700 = $auto$rtlil.cc:1600:Not$1596
    Removing $not cell `$auto$memory_share.cc:337:merge_en_data$1699' from module `\counter'.
  Cell `$auto$memory_share.cc:337:merge_en_data$1647' is identical to cell `$auto$memory_share.cc:337:merge_en_data$1595'.
    Redirecting output \Y: $auto$rtlil.cc:1600:Not$1648 = $auto$rtlil.cc:1600:Not$1596
    Removing $not cell `$auto$memory_share.cc:337:merge_en_data$1647' from module `\counter'.
Finding identical cells in module `\counter_4b'.
Removed a total of 6 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
  removing buffer cell `$auto$memory_share.cc:342:merge_en_data$1553': $auto$rtlil.cc:1630:Or$1554 = $auto$rtlil.cc:1629:And$1542
  removing buffer cell `$auto$memory_share.cc:342:merge_en_data$1579': $auto$rtlil.cc:1630:Or$1580 = $auto$rtlil.cc:1629:And$1568
  removing buffer cell `$auto$memory_share.cc:342:merge_en_data$1605': $auto$rtlil.cc:1630:Or$1606 = $auto$rtlil.cc:1629:And$1594
  removing buffer cell `$auto$memory_share.cc:342:merge_en_data$1631': $auto$rtlil.cc:1630:Or$1632 = $auto$rtlil.cc:1629:And$1620
  removing buffer cell `$auto$memory_share.cc:342:merge_en_data$1657': $auto$rtlil.cc:1630:Or$1658 = $auto$rtlil.cc:1629:And$1646
  removing buffer cell `$auto$memory_share.cc:342:merge_en_data$1683': $auto$rtlil.cc:1630:Or$1684 = $auto$rtlil.cc:1629:And$1672
  removing buffer cell `$auto$memory_share.cc:342:merge_en_data$1709': $auto$rtlil.cc:1630:Or$1710 = $auto$rtlil.cc:1629:And$1698
Finding unused cells or wires in module \counter_4b..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \MODO_reg in module \counter:
  created 8 $dff cells and 0 static cells of width 2.
  read interface: 0 $dff and 49 $mux cells.
  write interface: 120 write mux blocks.

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$2029' (isneq) in module `\counter' with constant driver `$auto$rtlil.cc:1641:Eq$2030 = 1'0'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$2037' (empty) in module `\counter' with constant driver `$auto$rtlil.cc:1641:Eq$2038 = 1'1'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2471' (1'1, 1'1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2472 = 1'1'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2549' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2550 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[7][6][0]$2551' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][6][0]$y$2552 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2457' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2458 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2543' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2544 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[7][5][0]$2545' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][5][0]$y$2546 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2537' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2538 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[7][4][0]$2539' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][4][0]$y$2540 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2443' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2444 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2531' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2532 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[7][3][0]$2533' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][3][0]$y$2534 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2525' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2526 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[7][2][0]$2527' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][2][0]$y$2528 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2429' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2430 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2519' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2520 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[7][1][0]$2521' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][1][0]$y$2522 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2513' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2514 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[7][0][0]$2515' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][0][0]$y$2516 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[7][0][0]$2517' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[7][0][0]$y$2518 = \MODO_reg[7]'.
Replacing $mux cell `$memory\MODO_reg$wrmux[7][1][0]$2523' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[7][1][0]$y$2524 = $memory\MODO_reg$wrmux[7][0][0]$y$2518'.
Replacing $mux cell `$memory\MODO_reg$wrmux[7][2][0]$2529' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[7][2][0]$y$2530 = $memory\MODO_reg$wrmux[7][1][0]$y$2524'.
Replacing $mux cell `$memory\MODO_reg$wrmux[7][3][0]$2535' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[7][3][0]$y$2536 = $memory\MODO_reg$wrmux[7][2][0]$y$2530'.
Replacing $mux cell `$memory\MODO_reg$wrmux[7][4][0]$2541' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[7][4][0]$y$2542 = $memory\MODO_reg$wrmux[7][3][0]$y$2536'.
Replacing $mux cell `$memory\MODO_reg$wrmux[7][5][0]$2547' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[7][5][0]$y$2548 = $memory\MODO_reg$wrmux[7][4][0]$y$2542'.
Replacing $mux cell `$memory\MODO_reg$wrmux[7][6][0]$2553' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[7][6][0]$y$2554 = $memory\MODO_reg$wrmux[7][5][0]$y$2548'.
Replacing $mux cell `$memory\MODO_reg$rdmux[1][2][3]$1833' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[1][1][1]$b$1823 = $memory\MODO_reg$rdmux[1][2][3]$a$1834'.
Replacing $mux cell `$memory\MODO_reg$rdmux[1][2][2]$1830' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[1][1][1]$a$1822 = $memory\MODO_reg$rdmux[1][2][2]$a$1831'.
Replacing $mux cell `$memory\MODO_reg$rdmux[1][1][1]$1821' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[1][0][0]$b$1817 = $memory\MODO_reg$rdmux[1][1][1]$b$1823'.
Replacing $mux cell `$memory\MODO_reg$rdmux[1][2][0]$1824' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[1][1][0]$a$1819 = $memory\MODO_reg$rdmux[1][2][0]$a$1825'.
Replacing $mux cell `$memory\MODO_reg$rdmux[1][2][1]$1827' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[1][1][0]$b$1820 = $memory\MODO_reg$rdmux[1][2][1]$a$1828'.
Replacing $mux cell `$memory\MODO_reg$rdmux[1][1][0]$1818' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[1][0][0]$a$1816 = $memory\MODO_reg$rdmux[1][1][0]$b$1820'.
Replacing $mux cell `$memory\MODO_reg$rdmux[1][0][0]$1815' (0) in module `\counter' with constant driver `$memrd$\MODO_reg$counter.v:138$400_DATA = $memory\MODO_reg$rdmux[1][0][0]$a$1816'.
Replacing $mux cell `$memory\MODO_reg$rdmux[3][2][1]$1869' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[3][1][0]$b$1862 = $memory\MODO_reg$rdmux[3][2][1]$a$1870'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$1951' (isneq) in module `\counter' with constant driver `$auto$rtlil.cc:1641:Eq$1952 = 1'0'.
Replacing $eq cell `$auto$memory_map.cc:65:addr_decode$1941' (empty) in module `\counter' with constant driver `$auto$rtlil.cc:1641:Eq$1942 = 1'1'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$1973' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1974 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2063' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2064 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[1][5][0]$2065' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][5][0]$y$2066 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2057' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2058 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[1][4][0]$2059' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][4][0]$y$2060 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$1959' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1960 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2051' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2052 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[1][3][0]$2053' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][3][0]$y$2054 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2045' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2046 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[1][2][0]$2047' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][2][0]$y$2048 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$1943' (1'1, 1'1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1944 = 1'1'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2039' (1'1, 1'1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2040 = 1'1'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2031' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2032 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[1][0][0]$2033' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][0][0]$y$2034 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[1][0][0]$2035' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[1][0][0]$y$2036 = \MODO_reg[1]'.
Replacing $mux cell `$memory\MODO_reg$wrmux[1][2][0]$2049' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[1][2][0]$y$2050 = $memory\MODO_reg$wrmux[1][1][0]$y$2044'.
Replacing $mux cell `$memory\MODO_reg$wrmux[1][3][0]$2055' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[1][3][0]$y$2056 = $memory\MODO_reg$wrmux[1][2][0]$y$2050'.
Replacing $mux cell `$memory\MODO_reg$wrmux[1][4][0]$2061' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[1][4][0]$y$2062 = $memory\MODO_reg$wrmux[1][3][0]$y$2056'.
Replacing $mux cell `$memory\MODO_reg$wrmux[1][5][0]$2067' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[1][5][0]$y$2068 = $memory\MODO_reg$wrmux[1][4][0]$y$2062'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$1987' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1988 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2069' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2070 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[1][6][0]$2071' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][6][0]$y$2072 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[1][6][0]$2073' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[1][6][0]$y$2074 = $memory\MODO_reg$wrmux[1][5][0]$y$2068'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2075' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2076 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[1][7][0]$2077' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][7][0]$y$2078 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[1][7][0]$2079' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[1][7][0]$y$2080 = $memory\MODO_reg$wrmux[1][6][0]$y$2074'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2431' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2432 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[6][0][0]$2433' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][0][0]$y$2434 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2297' (1'1, 1'1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2298 = 1'1'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2305' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2306 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[4][5][0]$2307' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][5][0]$y$2308 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2269' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2270 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2271' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2272 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[4][0][0]$2273' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][0][0]$y$2274 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[4][0][0]$2275' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[4][0][0]$y$2276 = \MODO_reg[4]'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2277' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2278 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[4][1][0]$2279' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][1][0]$y$2280 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[4][1][0]$2281' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[4][1][0]$y$2282 = $memory\MODO_reg$wrmux[4][0][0]$y$2276'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2283' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2284 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2285' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2286 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[4][2][0]$2287' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][2][0]$y$2288 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[4][2][0]$2289' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[4][2][0]$y$2290 = $memory\MODO_reg$wrmux[4][1][0]$y$2282'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2291' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2292 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[4][3][0]$2293' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][3][0]$y$2294 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[4][3][0]$2295' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[4][3][0]$y$2296 = $memory\MODO_reg$wrmux[4][2][0]$y$2290'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2299' (1'1, 1'1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2300 = 1'1'.
Replacing $mux cell `$memory\MODO_reg$wrmux[4][5][0]$2309' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[4][5][0]$y$2310 = $memory\MODO_reg$wrmux[4][4][0]$y$2304'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2311' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2312 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2313' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2314 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[4][6][0]$2315' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][6][0]$y$2316 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[4][6][0]$2317' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[4][6][0]$y$2318 = $memory\MODO_reg$wrmux[4][5][0]$y$2310'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2319' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2320 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[4][7][0]$2321' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][7][0]$y$2322 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[4][7][0]$2323' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[4][7][0]$y$2324 = $memory\MODO_reg$wrmux[4][6][0]$y$2318'.
Replacing $and cell `$memory\MODO_reg$wren[4][8][0]$2325' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][8][0]$y$2326 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[4][8][0]$2327' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[4][8][0]$y$2328 = $memory\MODO_reg$wrmux[4][7][0]$y$2324'.
Replacing $and cell `$memory\MODO_reg$wren[4][9][0]$2329' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][9][0]$y$2330 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[4][9][0]$2331' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[4][9][0]$y$2332 = $memory\MODO_reg$wrmux[4][8][0]$y$2328'.
Replacing $and cell `$memory\MODO_reg$wren[4][10][0]$2333' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][10][0]$y$2334 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[4][10][0]$2335' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[4][10][0]$y$2336 = $memory\MODO_reg$wrmux[4][9][0]$y$2332'.
Replacing $and cell `$memory\MODO_reg$wren[4][12][0]$2341' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][12][0]$y$2342 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[4][12][0]$2343' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[4][12][0]$y$2344 = $memory\MODO_reg$wrmux[4][11][0]$y$2340'.
Replacing $and cell `$memory\MODO_reg$wren[4][13][0]$2345' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][13][0]$y$2346 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[4][13][0]$2347' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[4][13][0]$y$2348 = $memory\MODO_reg$wrmux[4][12][0]$y$2344'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2123' (1'1, 1'1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2124 = 1'1'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2125' (1'1, 1'1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2126 = 1'1'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2137' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2138 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2145' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2146 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[2][5][0]$2147' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][5][0]$y$2148 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2109' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2110 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2111' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2112 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[2][0][0]$2113' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][0][0]$y$2114 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[2][0][0]$2115' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[2][0][0]$y$2116 = \MODO_reg[2]'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2117' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2118 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[2][1][0]$2119' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][1][0]$y$2120 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[2][1][0]$2121' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[2][1][0]$y$2122 = $memory\MODO_reg$wrmux[2][0][0]$y$2116'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2131' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2132 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[2][3][0]$2133' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][3][0]$y$2134 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[2][3][0]$2135' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[2][3][0]$y$2136 = $memory\MODO_reg$wrmux[2][2][0]$y$2130'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2139' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2140 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[2][4][0]$2141' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][4][0]$y$2142 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[2][4][0]$2143' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[2][4][0]$y$2144 = $memory\MODO_reg$wrmux[2][3][0]$y$2136'.
Replacing $mux cell `$memory\MODO_reg$wrmux[2][5][0]$2149' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[2][5][0]$y$2150 = $memory\MODO_reg$wrmux[2][4][0]$y$2144'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2151' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2152 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2153' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2154 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[2][6][0]$2155' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][6][0]$y$2156 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[2][6][0]$2157' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[2][6][0]$y$2158 = $memory\MODO_reg$wrmux[2][5][0]$y$2150'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2159' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2160 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[2][7][0]$2161' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][7][0]$y$2162 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[2][7][0]$2163' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[2][7][0]$y$2164 = $memory\MODO_reg$wrmux[2][6][0]$y$2158'.
Replacing $and cell `$memory\MODO_reg$wren[2][8][0]$2165' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][8][0]$y$2166 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[2][8][0]$2167' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[2][8][0]$y$2168 = $memory\MODO_reg$wrmux[2][7][0]$y$2164'.
Replacing $mux cell `$memory\MODO_reg$rdmux[5][2][3]$1917' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[5][1][1]$b$1907 = $memory\MODO_reg$rdmux[5][2][3]$a$1918'.
Replacing $mux cell `$memory\MODO_reg$rdmux[5][2][2]$1914' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[5][1][1]$a$1906 = $memory\MODO_reg$rdmux[5][2][2]$a$1915'.
Replacing $mux cell `$memory\MODO_reg$rdmux[5][1][1]$1905' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[5][0][0]$b$1901 = $memory\MODO_reg$rdmux[5][1][1]$b$1907'.
Replacing $mux cell `$memory\MODO_reg$rdmux[5][2][1]$1911' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[5][1][0]$b$1904 = $memory\MODO_reg$rdmux[5][2][1]$a$1912'.
Replacing $mux cell `$memory\MODO_reg$rdmux[5][2][0]$1908' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[5][1][0]$a$1903 = $memory\MODO_reg$rdmux[5][2][0]$a$1909'.
Replacing $mux cell `$memory\MODO_reg$rdmux[5][1][0]$1902' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[5][0][0]$a$1900 = $memory\MODO_reg$rdmux[5][1][0]$b$1904'.
Replacing $mux cell `$memory\MODO_reg$rdmux[5][0][0]$1899' (1) in module `\counter' with constant driver `$memrd$\MODO_reg$counter.v:192$404_DATA = $memory\MODO_reg$rdmux[5][0][0]$b$1901'.
Replacing $and cell `$memory\MODO_reg$wren[2][10][0]$2173' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][10][0]$y$2174 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$rdmux[4][2][0]$1887' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[4][1][0]$a$1882 = $memory\MODO_reg$rdmux[4][2][0]$b$1889'.
Replacing $mux cell `$memory\MODO_reg$rdmux[4][2][1]$1890' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[4][1][0]$b$1883 = $memory\MODO_reg$rdmux[4][2][1]$b$1892'.
Replacing $mux cell `$memory\MODO_reg$rdmux[4][1][0]$1881' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[4][0][0]$a$1879 = $memory\MODO_reg$rdmux[4][1][0]$a$1882'.
Replacing $mux cell `$memory\MODO_reg$wrmux[2][10][0]$2175' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[2][10][0]$y$2176 = $memory\MODO_reg$wrmux[2][9][0]$y$2172'.
Replacing $and cell `$memory\MODO_reg$wren[2][11][0]$2177' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][11][0]$y$2178 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[2][11][0]$2179' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[2][11][0]$y$2180 = $memory\MODO_reg$wrmux[2][10][0]$y$2176'.
Replacing $and cell `$memory\MODO_reg$wren[2][12][0]$2181' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][12][0]$y$2182 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[2][12][0]$2183' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[2][12][0]$y$2184 = $memory\MODO_reg$wrmux[2][11][0]$y$2180'.
Replacing $and cell `$memory\MODO_reg$wren[2][13][0]$2185' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][13][0]$y$2186 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[2][13][0]$2187' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[2][13][0]$y$2188 = $memory\MODO_reg$wrmux[2][12][0]$y$2184'.
Replacing $and cell `$memory\MODO_reg$wren[2][14][0]$2189' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][14][0]$y$2190 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[2][14][0]$2191' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[2][14][0]$y$2192 = $memory\MODO_reg$wrmux[2][13][0]$y$2188'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2193' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2194 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[3][0][0]$2195' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][0][0]$y$2196 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[3][0][0]$2197' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[3][0][0]$y$2198 = \MODO_reg[3]'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2199' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2200 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[3][1][0]$2201' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][1][0]$y$2202 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[3][1][0]$2203' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[3][1][0]$y$2204 = $memory\MODO_reg$wrmux[3][0][0]$y$2198'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2205' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2206 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[3][2][0]$2207' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][2][0]$y$2208 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[3][2][0]$2209' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[3][2][0]$y$2210 = $memory\MODO_reg$wrmux[3][1][0]$y$2204'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2211' (1'1, 1'1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2212 = 1'1'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2217' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2218 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[3][4][0]$2219' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][4][0]$y$2220 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[3][4][0]$2221' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[3][4][0]$y$2222 = $memory\MODO_reg$wrmux[3][3][0]$y$2216'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2223' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2224 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[3][5][0]$2225' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][5][0]$y$2226 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[3][5][0]$2227' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[3][5][0]$y$2228 = $memory\MODO_reg$wrmux[3][4][0]$y$2222'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2229' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2230 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[3][6][0]$2231' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][6][0]$y$2232 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[3][6][0]$2233' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[3][6][0]$y$2234 = $memory\MODO_reg$wrmux[3][5][0]$y$2228'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2235' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2236 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[3][7][0]$2237' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][7][0]$y$2238 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[3][7][0]$2239' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[3][7][0]$y$2240 = $memory\MODO_reg$wrmux[3][6][0]$y$2234'.
Replacing $and cell `$memory\MODO_reg$wren[3][8][0]$2241' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][8][0]$y$2242 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[3][8][0]$2243' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[3][8][0]$y$2244 = $memory\MODO_reg$wrmux[3][7][0]$y$2240'.
Replacing $and cell `$memory\MODO_reg$wren[3][9][0]$2245' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][9][0]$y$2246 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[3][9][0]$2247' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[3][9][0]$y$2248 = $memory\MODO_reg$wrmux[3][8][0]$y$2244'.
Replacing $and cell `$memory\MODO_reg$wren[3][11][0]$2253' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][11][0]$y$2254 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[3][11][0]$2255' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[3][11][0]$y$2256 = $memory\MODO_reg$wrmux[3][10][0]$y$2252'.
Replacing $and cell `$memory\MODO_reg$wren[3][12][0]$2257' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][12][0]$y$2258 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[3][12][0]$2259' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[3][12][0]$y$2260 = $memory\MODO_reg$wrmux[3][11][0]$y$2256'.
Replacing $and cell `$memory\MODO_reg$wren[3][13][0]$2261' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][13][0]$y$2262 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[3][13][0]$2263' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[3][13][0]$y$2264 = $memory\MODO_reg$wrmux[3][12][0]$y$2260'.
Replacing $and cell `$memory\MODO_reg$wren[3][14][0]$2265' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][14][0]$y$2266 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[3][14][0]$2267' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[3][14][0]$y$2268 = $memory\MODO_reg$wrmux[3][13][0]$y$2264'.
Replacing $mux cell `$memory\MODO_reg$rdmux[2][2][3]$1854' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[2][1][1]$b$1844 = $memory\MODO_reg$rdmux[2][2][3]$b$1856'.
Replacing $mux cell `$memory\MODO_reg$rdmux[0][2][1]$1806' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[0][1][0]$b$1799 = $memory\MODO_reg$rdmux[0][2][1]$b$1808'.
Replacing $mux cell `$memory\MODO_reg$rdmux[4][2][3]$1896' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[4][1][1]$b$1886 = $memory\MODO_reg$rdmux[4][2][3]$b$1898'.
Replacing $mux cell `$memory\MODO_reg$rdmux[4][2][2]$1893' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[4][1][1]$a$1885 = $memory\MODO_reg$rdmux[4][2][2]$b$1895'.
Replacing $mux cell `$memory\MODO_reg$rdmux[0][2][2]$1809' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[0][1][1]$a$1801 = $memory\MODO_reg$rdmux[0][2][2]$b$1811'.
Replacing $mux cell `$memory\MODO_reg$rdmux[0][2][3]$1812' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[0][1][1]$b$1802 = $memory\MODO_reg$rdmux[0][2][3]$b$1814'.
Replacing $mux cell `$memory\MODO_reg$rdmux[0][1][1]$1800' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[0][0][0]$b$1796 = $memory\MODO_reg$rdmux[0][1][1]$a$1801'.
Replacing $and cell `$memory\MODO_reg$wren[1][9][0]$2085' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][9][0]$y$2086 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[1][9][0]$2087' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[1][9][0]$y$2088 = $memory\MODO_reg$wrmux[1][8][0]$y$2084'.
Replacing $and cell `$memory\MODO_reg$wren[1][10][0]$2089' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][10][0]$y$2090 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[1][10][0]$2091' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[1][10][0]$y$2092 = $memory\MODO_reg$wrmux[1][9][0]$y$2088'.
Replacing $and cell `$memory\MODO_reg$wren[1][11][0]$2093' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][11][0]$y$2094 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[1][11][0]$2095' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[1][11][0]$y$2096 = $memory\MODO_reg$wrmux[1][10][0]$y$2092'.
Replacing $and cell `$memory\MODO_reg$wren[1][12][0]$2097' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][12][0]$y$2098 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[1][12][0]$2099' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[1][12][0]$y$2100 = $memory\MODO_reg$wrmux[1][11][0]$y$2096'.
Replacing $and cell `$memory\MODO_reg$wren[1][13][0]$2101' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][13][0]$y$2102 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[1][13][0]$2103' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[1][13][0]$y$2104 = $memory\MODO_reg$wrmux[1][12][0]$y$2100'.
Replacing $and cell `$memory\MODO_reg$wren[1][14][0]$2105' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][14][0]$y$2106 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[1][14][0]$2107' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[1][14][0]$y$2108 = $memory\MODO_reg$wrmux[1][13][0]$y$2104'.
Replacing $mux cell `$memory\MODO_reg$rdmux[2][2][1]$1848' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[2][1][0]$b$1841 = $memory\MODO_reg$rdmux[2][2][1]$b$1850'.
Replacing $mux cell `$memory\MODO_reg$rdmux[3][2][2]$1872' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[3][1][1]$a$1864 = $memory\MODO_reg$rdmux[3][2][2]$a$1873'.
Replacing $mux cell `$memory\MODO_reg$rdmux[3][2][3]$1875' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[3][1][1]$b$1865 = $memory\MODO_reg$rdmux[3][2][3]$a$1876'.
Replacing $mux cell `$memory\MODO_reg$rdmux[3][1][1]$1863' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[3][0][0]$b$1859 = $memory\MODO_reg$rdmux[3][1][1]$a$1864'.
Replacing $mux cell `$memory\MODO_reg$rdmux[0][2][0]$1803' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[0][1][0]$a$1798 = $memory\MODO_reg$rdmux[0][2][0]$b$1805'.
Replacing $mux cell `$memory\MODO_reg$rdmux[0][1][0]$1797' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[0][0][0]$a$1795 = $memory\MODO_reg$rdmux[0][1][0]$a$1798'.
Replacing $mux cell `$memory\MODO_reg$rdmux[0][0][0]$1794' (0) in module `\counter' with constant driver `$memrd$\MODO_reg$counter.v:126$399_DATA = $memory\MODO_reg$rdmux[0][0][0]$a$1795'.
Replacing $mux cell `$memory\MODO_reg$rdmux[6][2][3]$1938' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[6][1][1]$b$1928 = $memory\MODO_reg$rdmux[6][2][3]$b$1940'.
Replacing $mux cell `$memory\MODO_reg$rdmux[6][2][2]$1935' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[6][1][1]$a$1927 = $memory\MODO_reg$rdmux[6][2][2]$b$1937'.
Replacing $mux cell `$memory\MODO_reg$rdmux[6][2][1]$1932' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[6][1][0]$b$1925 = $memory\MODO_reg$rdmux[6][2][1]$b$1934'.
Replacing $mux cell `$memory\MODO_reg$rdmux[6][2][0]$1929' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[6][1][0]$a$1924 = $memory\MODO_reg$rdmux[6][2][0]$b$1931'.
Replacing $mux cell `$memory\MODO_reg$rdmux[6][1][1]$1926' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[6][0][0]$b$1922 = $memory\MODO_reg$rdmux[6][1][1]$b$1928'.
Replacing $mux cell `$memory\MODO_reg$rdmux[4][1][1]$1884' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[4][0][0]$b$1880 = $memory\MODO_reg$rdmux[4][1][1]$a$1885'.
Replacing $mux cell `$memory\MODO_reg$rdmux[4][0][0]$1878' (1) in module `\counter' with constant driver `$memrd$\MODO_reg$counter.v:179$403_DATA = $memory\MODO_reg$rdmux[4][0][0]$b$1880'.
Replacing $mux cell `$memory\MODO_reg$rdmux[6][1][0]$1923' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[6][0][0]$a$1921 = $memory\MODO_reg$rdmux[6][1][0]$b$1925'.
Replacing $mux cell `$memory\MODO_reg$rdmux[6][0][0]$1920' (1) in module `\counter' with constant driver `$memrd$\MODO_reg$counter.v:204$405_DATA = $memory\MODO_reg$rdmux[6][0][0]$b$1922'.
Replacing $mux cell `$memory\MODO_reg$rdmux[2][2][2]$1851' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[2][1][1]$a$1843 = $memory\MODO_reg$rdmux[2][2][2]$b$1853'.
Replacing $mux cell `$memory\MODO_reg$rdmux[3][2][0]$1866' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[3][1][0]$a$1861 = $memory\MODO_reg$rdmux[3][2][0]$a$1867'.
Replacing $mux cell `$memory\MODO_reg$rdmux[3][1][0]$1860' (0) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[3][0][0]$a$1858 = $memory\MODO_reg$rdmux[3][1][0]$a$1861'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$1953' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1954 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[0][8][0]$2001' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][8][0]$y$2002 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$1995' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1996 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[0][7][0]$1997' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][7][0]$y$1998 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$1989' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1990 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[0][6][0]$1991' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][6][0]$y$1992 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$1981' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1982 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[0][5][0]$1983' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][5][0]$y$1984 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$1975' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1976 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[0][4][0]$1977' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][4][0]$y$1978 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$1967' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1968 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[0][3][0]$1969' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][3][0]$y$1970 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$1961' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1962 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[0][2][0]$1963' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][2][0]$y$1964 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[0][1][0]$1955' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][1][0]$y$1956 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$1945' (1'1, 1'1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1946 = 1'1'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][1][0]$1957' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][1][0]$y$1958 = $memory\MODO_reg$wrmux[0][0][0]$y$1950'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][2][0]$1965' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][2][0]$y$1966 = $memory\MODO_reg$wrmux[0][1][0]$y$1958'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][3][0]$1971' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][3][0]$y$1972 = $memory\MODO_reg$wrmux[0][2][0]$y$1966'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][4][0]$1979' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][4][0]$y$1980 = $memory\MODO_reg$wrmux[0][3][0]$y$1972'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][5][0]$1985' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][5][0]$y$1986 = $memory\MODO_reg$wrmux[0][4][0]$y$1980'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][6][0]$1993' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][6][0]$y$1994 = $memory\MODO_reg$wrmux[0][5][0]$y$1986'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][7][0]$1999' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][7][0]$y$2000 = $memory\MODO_reg$wrmux[0][6][0]$y$1994'.
Replacing $and cell `$memory\MODO_reg$wren[0][14][0]$2025' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][14][0]$y$2026 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[0][13][0]$2021' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][13][0]$y$2022 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[0][12][0]$2017' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][12][0]$y$2018 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[0][11][0]$2013' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][11][0]$y$2014 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[0][10][0]$2009' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][10][0]$y$2010 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[0][9][0]$2005' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][9][0]$y$2006 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][8][0]$2003' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][8][0]$y$2004 = $memory\MODO_reg$wrmux[0][7][0]$y$2000'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][9][0]$2007' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][9][0]$y$2008 = $memory\MODO_reg$wrmux[0][8][0]$y$2004'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][10][0]$2011' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][10][0]$y$2012 = $memory\MODO_reg$wrmux[0][9][0]$y$2008'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][11][0]$2015' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][11][0]$y$2016 = $memory\MODO_reg$wrmux[0][10][0]$y$2012'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][12][0]$2019' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][12][0]$y$2020 = $memory\MODO_reg$wrmux[0][11][0]$y$2016'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][13][0]$2023' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][13][0]$y$2024 = $memory\MODO_reg$wrmux[0][12][0]$y$2020'.
Replacing $mux cell `$memory\MODO_reg$wrmux[0][14][0]$2027' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[0][14][0]$y$2028 = $memory\MODO_reg$wrmux[0][13][0]$y$2024'.
Replacing $mux cell `$memory\MODO_reg$rdmux[2][2][0]$1845' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[2][1][0]$a$1840 = $memory\MODO_reg$rdmux[2][2][0]$b$1847'.
Replacing $mux cell `$memory\MODO_reg$rdmux[2][1][0]$1839' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[2][0][0]$a$1837 = $memory\MODO_reg$rdmux[2][1][0]$b$1841'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2555' (1'1, 1'1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2556 = 1'1'.
Replacing $and cell `$memory\MODO_reg$wren[7][13][0]$2581' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][13][0]$y$2582 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[7][12][0]$2577' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][12][0]$y$2578 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[7][11][0]$2573' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][11][0]$y$2574 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[7][10][0]$2569' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][10][0]$y$2570 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[7][9][0]$2565' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][9][0]$y$2566 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[7][8][0]$2561' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][8][0]$y$2562 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[7][8][0]$2563' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[7][8][0]$y$2564 = $memory\MODO_reg$wrmux[7][7][0]$y$2560'.
Replacing $mux cell `$memory\MODO_reg$wrmux[7][9][0]$2567' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[7][9][0]$y$2568 = $memory\MODO_reg$wrmux[7][8][0]$y$2564'.
Replacing $mux cell `$memory\MODO_reg$wrmux[7][10][0]$2571' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[7][10][0]$y$2572 = $memory\MODO_reg$wrmux[7][9][0]$y$2568'.
Replacing $mux cell `$memory\MODO_reg$wrmux[7][11][0]$2575' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[7][11][0]$y$2576 = $memory\MODO_reg$wrmux[7][10][0]$y$2572'.
Replacing $mux cell `$memory\MODO_reg$wrmux[7][12][0]$2579' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[7][12][0]$y$2580 = $memory\MODO_reg$wrmux[7][11][0]$y$2576'.
Replacing $mux cell `$memory\MODO_reg$wrmux[7][13][0]$2583' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[7][13][0]$y$2584 = $memory\MODO_reg$wrmux[7][12][0]$y$2580'.
Replacing $mux cell `$memory\MODO_reg$rdmux[2][1][1]$1842' (1) in module `\counter' with constant driver `$memory\MODO_reg$rdmux[2][0][0]$b$1838 = $memory\MODO_reg$rdmux[2][1][1]$b$1844'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2437' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2438 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[6][1][0]$2439' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][1][0]$y$2440 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[6][0][0]$2435' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[6][0][0]$y$2436 = \MODO_reg[6]'.
Replacing $mux cell `$memory\MODO_reg$wrmux[6][1][0]$2441' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[6][1][0]$y$2442 = $memory\MODO_reg$wrmux[6][0][0]$y$2436'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2389' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2390 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[5][6][0]$2391' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][6][0]$y$2392 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2383' (1'1, 1'1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2384 = 1'1'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2377' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2378 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[5][4][0]$2379' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][4][0]$y$2380 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2371' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2372 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[5][3][0]$2373' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][3][0]$y$2374 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2365' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2366 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[5][2][0]$2367' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][2][0]$y$2368 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2359' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2360 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[5][1][0]$2361' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][1][0]$y$2362 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2353' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2354 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[5][0][0]$2355' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][0][0]$y$2356 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[5][0][0]$2357' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[5][0][0]$y$2358 = \MODO_reg[5]'.
Replacing $mux cell `$memory\MODO_reg$wrmux[5][1][0]$2363' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[5][1][0]$y$2364 = $memory\MODO_reg$wrmux[5][0][0]$y$2358'.
Replacing $mux cell `$memory\MODO_reg$wrmux[5][2][0]$2369' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[5][2][0]$y$2370 = $memory\MODO_reg$wrmux[5][1][0]$y$2364'.
Replacing $mux cell `$memory\MODO_reg$wrmux[5][3][0]$2375' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[5][3][0]$y$2376 = $memory\MODO_reg$wrmux[5][2][0]$y$2370'.
Replacing $mux cell `$memory\MODO_reg$wrmux[5][4][0]$2381' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[5][4][0]$y$2382 = $memory\MODO_reg$wrmux[5][3][0]$y$2376'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2479' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2480 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[6][14][0]$2509' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][14][0]$y$2510 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2473' (1'1, 1'1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2474 = 1'1'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2465' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2466 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[6][12][0]$2501' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][12][0]$y$2502 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2459' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2460 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[6][11][0]$2497' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][11][0]$y$2498 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2451' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2452 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[6][10][0]$2493' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][10][0]$y$2494 = 1'0'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2445' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2446 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[6][9][0]$2489' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][9][0]$y$2490 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[6][8][0]$2485' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][8][0]$y$2486 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[6][7][0]$2481' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][7][0]$y$2482 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[6][5][0]$2467' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][5][0]$y$2468 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[6][4][0]$2461' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][4][0]$y$2462 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[6][3][0]$2453' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][3][0]$y$2454 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[6][2][0]$2447' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][2][0]$y$2448 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[6][2][0]$2449' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[6][2][0]$y$2450 = $memory\MODO_reg$wrmux[6][1][0]$y$2442'.
Replacing $mux cell `$memory\MODO_reg$wrmux[6][3][0]$2455' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[6][3][0]$y$2456 = $memory\MODO_reg$wrmux[6][2][0]$y$2450'.
Replacing $mux cell `$memory\MODO_reg$wrmux[6][4][0]$2463' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[6][4][0]$y$2464 = $memory\MODO_reg$wrmux[6][3][0]$y$2456'.
Replacing $mux cell `$memory\MODO_reg$wrmux[6][5][0]$2469' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[6][5][0]$y$2470 = $memory\MODO_reg$wrmux[6][4][0]$y$2464'.
Replacing $mux cell `$memory\MODO_reg$wrmux[6][7][0]$2483' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[6][7][0]$y$2484 = $memory\MODO_reg$wrmux[6][6][0]$y$2478'.
Replacing $mux cell `$memory\MODO_reg$wrmux[6][8][0]$2487' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[6][8][0]$y$2488 = $memory\MODO_reg$wrmux[6][7][0]$y$2484'.
Replacing $mux cell `$memory\MODO_reg$wrmux[6][9][0]$2491' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[6][9][0]$y$2492 = $memory\MODO_reg$wrmux[6][8][0]$y$2488'.
Replacing $mux cell `$memory\MODO_reg$wrmux[6][10][0]$2495' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[6][10][0]$y$2496 = $memory\MODO_reg$wrmux[6][9][0]$y$2492'.
Replacing $mux cell `$memory\MODO_reg$wrmux[6][11][0]$2499' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[6][11][0]$y$2500 = $memory\MODO_reg$wrmux[6][10][0]$y$2496'.
Replacing $mux cell `$memory\MODO_reg$wrmux[6][12][0]$2503' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[6][12][0]$y$2504 = $memory\MODO_reg$wrmux[6][11][0]$y$2500'.
Replacing $mux cell `$memory\MODO_reg$wrmux[6][14][0]$2511' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[6][14][0]$y$2512 = $memory\MODO_reg$wrmux[6][13][0]$y$2508'.
Replacing $and cell `$memory\MODO_reg$wren[4][14][0]$2349' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][14][0]$y$2350 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[4][14][0]$2351' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[4][14][0]$y$2352 = $memory\MODO_reg$wrmux[4][13][0]$y$2348'.
Replacing $and cell `$auto$memory_map.cc:70:addr_decode$2395' (const_and) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$2396 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[5][14][0]$2425' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][14][0]$y$2426 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[5][13][0]$2421' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][13][0]$y$2422 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[5][11][0]$2413' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][11][0]$y$2414 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[5][10][0]$2409' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][10][0]$y$2410 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[5][9][0]$2405' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][9][0]$y$2406 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[5][8][0]$2401' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][8][0]$y$2402 = 1'0'.
Replacing $and cell `$memory\MODO_reg$wren[5][7][0]$2397' (const_and) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][7][0]$y$2398 = 1'0'.
Replacing $mux cell `$memory\MODO_reg$wrmux[5][6][0]$2393' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[5][6][0]$y$2394 = $memory\MODO_reg$wrmux[5][5][0]$y$2388'.
Replacing $mux cell `$memory\MODO_reg$wrmux[5][7][0]$2399' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[5][7][0]$y$2400 = $memory\MODO_reg$wrmux[5][6][0]$y$2394'.
Replacing $mux cell `$memory\MODO_reg$wrmux[5][8][0]$2403' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[5][8][0]$y$2404 = $memory\MODO_reg$wrmux[5][7][0]$y$2400'.
Replacing $mux cell `$memory\MODO_reg$wrmux[5][9][0]$2407' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[5][9][0]$y$2408 = $memory\MODO_reg$wrmux[5][8][0]$y$2404'.
Replacing $mux cell `$memory\MODO_reg$wrmux[5][10][0]$2411' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[5][10][0]$y$2412 = $memory\MODO_reg$wrmux[5][9][0]$y$2408'.
Replacing $mux cell `$memory\MODO_reg$wrmux[5][11][0]$2415' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[5][11][0]$y$2416 = $memory\MODO_reg$wrmux[5][10][0]$y$2412'.
Replacing $mux cell `$memory\MODO_reg$wrmux[5][13][0]$2423' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[5][13][0]$y$2424 = $memory\MODO_reg$wrmux[5][12][0]$y$2420'.
Replacing $mux cell `$memory\MODO_reg$wrmux[5][14][0]$2427' (0) in module `\counter' with constant driver `$memory\MODO_reg$wrmux[5][14][0]$y$2428 = $memory\MODO_reg$wrmux[5][13][0]$y$2424'.
Replacing $mux cell `$memory\MODO_reg$rdmux[2][0][0]$1836' (0) in module `\counter' with constant driver `$memrd$\MODO_reg$counter.v:152$401_DATA = $memory\MODO_reg$rdmux[2][0][0]$a$1837'.
Replacing $mux cell `$memory\MODO_reg$rdmux[3][0][0]$1857' (1) in module `\counter' with constant driver `$memrd$\MODO_reg$counter.v:165$402_DATA = $memory\MODO_reg$rdmux[3][0][0]$b$1859'.

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
  Cell `$memory\MODO_reg$wren[0][0][0]$1947' is identical to cell `$memory\MODO_reg$wren[4][4][0]$2301'.
    Redirecting output \Y: $memory\MODO_reg$wren[0][0][0]$y$1948 = $memory\MODO_reg$wren[4][4][0]$y$2302
    Removing $and cell `$memory\MODO_reg$wren[0][0][0]$1947' from module `\counter'.
  Cell `$memory\MODO_reg$wren[6][6][0]$2475' is identical to cell `$memory\MODO_reg$wren[4][4][0]$2301'.
    Redirecting output \Y: $memory\MODO_reg$wren[6][6][0]$y$2476 = $memory\MODO_reg$wren[4][4][0]$y$2302
    Removing $and cell `$memory\MODO_reg$wren[6][6][0]$2475' from module `\counter'.
  Cell `$memory\MODO_reg$wren[2][2][0]$2127' is identical to cell `$memory\MODO_reg$wren[4][4][0]$2301'.
    Redirecting output \Y: $memory\MODO_reg$wren[2][2][0]$y$2128 = $memory\MODO_reg$wren[4][4][0]$y$2302
    Removing $and cell `$memory\MODO_reg$wren[2][2][0]$2127' from module `\counter'.
  Cell `$memory\MODO_reg$wren[5][5][0]$2385' is identical to cell `$memory\MODO_reg$wren[4][4][0]$2301'.
    Redirecting output \Y: $memory\MODO_reg$wren[5][5][0]$y$2386 = $memory\MODO_reg$wren[4][4][0]$y$2302
    Removing $and cell `$memory\MODO_reg$wren[5][5][0]$2385' from module `\counter'.
  Cell `$memory\MODO_reg$wren[1][1][0]$2041' is identical to cell `$memory\MODO_reg$wren[4][4][0]$2301'.
    Redirecting output \Y: $memory\MODO_reg$wren[1][1][0]$y$2042 = $memory\MODO_reg$wren[4][4][0]$y$2302
    Removing $and cell `$memory\MODO_reg$wren[1][1][0]$2041' from module `\counter'.
  Cell `$memory\MODO_reg$wren[7][7][0]$2557' is identical to cell `$memory\MODO_reg$wren[4][4][0]$2301'.
    Redirecting output \Y: $memory\MODO_reg$wren[7][7][0]$y$2558 = $memory\MODO_reg$wren[4][4][0]$y$2302
    Removing $and cell `$memory\MODO_reg$wren[7][7][0]$2557' from module `\counter'.
  Cell `$memory\MODO_reg$wren[3][3][0]$2213' is identical to cell `$memory\MODO_reg$wren[4][4][0]$2301'.
    Redirecting output \Y: $memory\MODO_reg$wren[3][3][0]$y$2214 = $memory\MODO_reg$wren[4][4][0]$y$2302
    Removing $and cell `$memory\MODO_reg$wren[3][3][0]$2213' from module `\counter'.
Finding identical cells in module `\counter_4b'.
Removed a total of 7 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $memory\MODO_reg$wrmux[6][13][0]$2507 (pure)
    Root of a mux tree: $memory\MODO_reg$wrmux[4][11][0]$2339 (pure)
    Root of a mux tree: $memory\MODO_reg$wrmux[0][0][0]$1949 (pure)
    Root of a mux tree: $memory\MODO_reg$wrmux[5][12][0]$2419 (pure)
    Root of a mux tree: $memory\MODO_reg$wrmux[3][10][0]$2251 (pure)
    Root of a mux tree: $memory\MODO_reg$wrmux[1][8][0]$2083 (pure)
    Root of a mux tree: $memory\MODO_reg$wrmux[2][9][0]$2171 (pure)
    Root of a mux tree: $procmux$1005 (pure)
    Root of a mux tree: $procmux$1023 (pure)
    Root of a mux tree: $procmux$1041 (pure)
    Root of a mux tree: $procmux$1059 (pure)
    Root of a mux tree: $procmux$1077 (pure)
    Root of a mux tree: $procmux$1095 (pure)
    Root of a mux tree: $procmux$1113 (pure)
    Root of a mux tree: $procmux$1131 (pure)
    Root of a mux tree: $procmux$1149 (pure)
    Root of a mux tree: $procmux$1167 (pure)
    Root of a mux tree: $procmux$1185 (pure)
    Root of a mux tree: $procmux$1203 (pure)
    Root of a mux tree: $procmux$1218 (pure)
    Root of a mux tree: $procmux$969 (pure)
    Root of a mux tree: $procmux$987 (pure)
    Root of a mux tree: $memory\MODO_reg$wrmux[7][14][0]$2587 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \counter_4b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$1221 (pure)
    Root of a mux tree: $procmux$1235 (pure)
    Root of a mux tree: $procmux$1238 (pure)
    Root of a mux tree: $procmux$1255 (pure)
    Root of a mux tree: $procmux$1275 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
  Optimizing cells in module \counter_4b.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_4b'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $memory\MODO_reg[0]$1778 ($dff) from module counter.
Replaced 1 DFF cells.

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
  removing unused `$mux' cell `$memory\MODO_reg$wrmux[0][0][0]$1949'.
  removing unused non-port wire \MODO_reg[0].
  removed 1 unused temporary wires.
Finding unused cells or wires in module \counter_4b..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $memory\MODO_reg$wrmux[1][8][0]$2083 (pure)
    Root of a mux tree: $memory\MODO_reg$wrmux[2][9][0]$2171 (pure)
    Root of a mux tree: $memory\MODO_reg$wrmux[3][10][0]$2251 (pure)
    Root of a mux tree: $memory\MODO_reg$wrmux[4][11][0]$2339 (pure)
    Root of a mux tree: $memory\MODO_reg$wrmux[5][12][0]$2419 (pure)
    Root of a mux tree: $memory\MODO_reg$wrmux[6][13][0]$2507 (pure)
    Root of a mux tree: $memory\MODO_reg$wrmux[7][14][0]$2587 (pure)
    Root of a mux tree: $procmux$1005 (pure)
    Root of a mux tree: $procmux$1023 (pure)
    Root of a mux tree: $procmux$1041 (pure)
    Root of a mux tree: $procmux$1059 (pure)
    Root of a mux tree: $procmux$1077 (pure)
    Root of a mux tree: $procmux$1095 (pure)
    Root of a mux tree: $procmux$1113 (pure)
    Root of a mux tree: $procmux$1131 (pure)
    Root of a mux tree: $procmux$1149 (pure)
    Root of a mux tree: $procmux$1167 (pure)
    Root of a mux tree: $procmux$1185 (pure)
    Root of a mux tree: $procmux$1203 (pure)
    Root of a mux tree: $procmux$1218 (pure)
    Root of a mux tree: $procmux$969 (pure)
    Root of a mux tree: $procmux$987 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \counter_4b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$1221 (pure)
    Root of a mux tree: $procmux$1235 (pure)
    Root of a mux tree: $procmux$1238 (pure)
    Root of a mux tree: $procmux$1255 (pure)
    Root of a mux tree: $procmux$1275 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
  Optimizing cells in module \counter_4b.
Performed a total of 0 changes.

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_4b'.
Removed a total of 0 cells.

3.17.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_4b..

3.17.15. Executing OPT_EXPR pass (perform const folding).

3.17.16. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping counter_4b.$logic_or$counter_4b.v:51$5 ($logic_or) with simplemap.
Mapping counter_4b.$eq$counter_4b.v:63$8 ($logic_not) with simplemap.
Mapping counter_4b.$eq$counter_4b.v:75$11 ($eq) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 2
Parameter \B_WIDTH = 4
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=4\Y_WIDTH=4'.

3.18.3. Continuing TECHMAP pass.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1519 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=4\Y_WIDTH=4.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 4
Parameter \B_WIDTH = 1
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4'.

3.18.5. Continuing TECHMAP pass.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1536 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4.

3.18.6. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 4
Parameter \B_WIDTH = 2
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=2\Y_WIDTH=4'.

3.18.7. Continuing TECHMAP pass.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1533 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=2\Y_WIDTH=4.

3.18.8. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 4
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4'.

3.18.9. Continuing TECHMAP pass.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1530 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4.
Mapping counter_4b.$auto$alumacc.cc:58:get_gt$1528 ($not) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:58:get_gt$1526 ($or) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:78:get_cf$1524 ($not) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:64:get_eq$1522 ($reduce_and) with simplemap.
Mapping counter_4b.$procmux$1222_CMP0 ($eq) with simplemap.

3.18.10. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 1
Parameter \S_WIDTH = 2
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=1\S_WIDTH=2'.

3.18.11. Continuing TECHMAP pass.
Mapping counter_4b.$procmux$1221 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping counter_4b.$procmux$1225_CMP0 ($logic_not) with simplemap.
Mapping counter_4b.$procmux$1228_CMP0 ($eq) with simplemap.
Mapping counter_4b.$procmux$1231_CMP0 ($eq) with simplemap.
Mapping counter_4b.$procmux$1232 ($and) with simplemap.
Mapping counter_4b.$procmux$1235 ($mux) with simplemap.

3.18.12. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 1
Parameter \S_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=1\S_WIDTH=4'.

3.18.13. Continuing TECHMAP pass.
Mapping counter_4b.$procmux$1238 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=4.
Mapping counter_4b.$procmux$1252 ($and) with simplemap.
Mapping counter_4b.$procmux$1255 ($mux) with simplemap.

3.18.14. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 4
Parameter \S_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=4\S_WIDTH=4'.

3.18.15. Continuing TECHMAP pass.
Mapping counter_4b.$procmux$1258 using $paramod\_90_pmux\WIDTH=4\S_WIDTH=4.
Mapping counter_4b.$auto$opt_reduce.cc:126:opt_mux$1515 ($reduce_or) with simplemap.
Mapping counter_4b.$procmux$1272 ($mux) with simplemap.
Mapping counter_4b.$procmux$1275 ($mux) with simplemap.
Mapping counter_4b.$procdff$1512 ($dff) with simplemap.
Mapping counter_4b.$procdff$1513 ($dff) with simplemap.
Mapping counter_4b.$procdff$1514 ($dff) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1536.A_conv ($pos) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.$xor$<techmap.v>:263$2659 ($xor) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.$xor$<techmap.v>:262$2658 ($xor) with simplemap.
Mapping counter_4b.$techmap$procmux$1238.$ternary$<techmap.v>:445$2724 ($mux) with simplemap.
Mapping counter_4b.$techmap$procmux$1221.$ternary$<techmap.v>:445$2694 ($mux) with simplemap.
Mapping counter_4b.$techmap$procmux$1221.$reduce_or$<techmap.v>:445$2693 ($reduce_or) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1519.A_conv ($pos) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1519.B_conv ($pos) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655 ($not) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.$ternary$<techmap.v>:258$2656 ($mux) with simplemap.

3.18.16. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=4'.

3.18.17. Executing PROC pass (convert processes to netlists).

3.18.17.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.17.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.17.3. Executing PROC_INIT pass (extract init attributes).

3.18.17.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.17.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$2789'.
     1/8: $0\p[3:0] [2]
     2/8: $0\g[3:0] [2]
     3/8: $0\p[3:0] [3]
     4/8: $0\g[3:0] [3]
     5/8: $0\p[3:0] [1]
     6/8: $0\g[3:0] [1]
     7/8: $0\g[3:0] [0]
     8/8: $0\p[3:0] [0]

3.18.17.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=4.\p' from process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$2789'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=4.\g' from process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$2789'.

3.18.17.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.17.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$2789'.
Cleaned up 0 empty switches.

3.18.18. Executing OPT pass (performing simple optimizations).

3.18.18.1. Executing OPT_EXPR pass (perform const folding).

3.18.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=4'.
Removed a total of 0 cells.

3.18.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=4..
  removing unused `$and' cell `$and$<techmap.v>:230$2803'.
  removing unused `$and' cell `$and$<techmap.v>:222$2800'.
  removing unused `$and' cell `$and$<techmap.v>:222$2794'.
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 2 unused temporary wires.

3.18.18.5. Finished fast OPT passes.

3.18.19. Continuing TECHMAP pass.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1519.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.$and$<techmap.v>:260$2657 ($and) with simplemap.
Mapping counter_4b.$techmap$procmux$1238.$reduce_or$<techmap.v>:445$2723 ($reduce_or) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1536.B_conv ($pos) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.$not$<techmap.v>:258$2660 ($not) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.$ternary$<techmap.v>:258$2661 ($mux) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1536.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.$and$<techmap.v>:260$2662 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.$xor$<techmap.v>:263$2664 ($xor) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.$xor$<techmap.v>:262$2663 ($xor) with simplemap.
Mapping counter_4b.$techmap$procmux$1238.$and$<techmap.v>:434$2727 ($and) with simplemap.
Mapping counter_4b.$techmap$procmux$1238.$reduce_or$<techmap.v>:441$2729 ($reduce_or) with simplemap.
Mapping counter_4b.$techmap$procmux$1238.$and$<techmap.v>:434$2728 ($and) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1530.A_conv ($pos) with simplemap.
Mapping counter_4b.$techmap$procmux$1221.$and$<techmap.v>:434$2695 ($and) with simplemap.
Mapping counter_4b.$techmap$procmux$1221.$reduce_or$<techmap.v>:441$2697 ($reduce_or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.$xor$<techmap.v>:262$2668 ($xor) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.$xor$<techmap.v>:263$2669 ($xor) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.$and$<techmap.v>:260$2667 ($and) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1533.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.$ternary$<techmap.v>:258$2666 ($mux) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.$not$<techmap.v>:258$2665 ($not) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1533.B_conv ($pos) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1533.A_conv ($pos) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.$xor$<techmap.v>:262$2673 ($xor) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.$xor$<techmap.v>:263$2674 ($xor) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.$and$<techmap.v>:260$2672 ($and) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1530.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.$ternary$<techmap.v>:258$2671 ($mux) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.$not$<techmap.v>:258$2670 ($not) with simplemap.
Mapping counter_4b.$auto$alumacc.cc:470:replace_alu$1530.B_conv ($pos) with simplemap.
Mapping counter_4b.$techmap$procmux$1238.$and$<techmap.v>:434$2726 ($and) with simplemap.
Mapping counter_4b.$techmap$procmux$1258.$reduce_or$<techmap.v>:441$2740 ($reduce_or) with simplemap.
Mapping counter_4b.$techmap$procmux$1258.$reduce_or$<techmap.v>:441$2741 ($reduce_or) with simplemap.
Mapping counter_4b.$techmap$procmux$1258.$reduce_or$<techmap.v>:441$2739 ($reduce_or) with simplemap.
Mapping counter_4b.$techmap$procmux$1258.$reduce_or$<techmap.v>:441$2738 ($reduce_or) with simplemap.
Mapping counter_4b.$techmap$procmux$1258.$and$<techmap.v>:434$2737 ($and) with simplemap.
Mapping counter_4b.$techmap$procmux$1258.$reduce_or$<techmap.v>:445$2732 ($reduce_or) with simplemap.
Mapping counter_4b.$techmap$procmux$1258.$and$<techmap.v>:434$2736 ($and) with simplemap.
Mapping counter_4b.$techmap$procmux$1258.$ternary$<techmap.v>:445$2733 ($mux) with simplemap.
Mapping counter_4b.$techmap$procmux$1258.$and$<techmap.v>:434$2735 ($and) with simplemap.
Mapping counter_4b.$techmap$procmux$1258.$and$<techmap.v>:434$2734 ($and) with simplemap.
Mapping counter_4b.$techmap$procmux$1238.$and$<techmap.v>:434$2725 ($and) with simplemap.
Mapping counter_4b.$techmap$procmux$1221.$and$<techmap.v>:434$2696 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$and$<techmap.v>:221$2795 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$and$<techmap.v>:221$2792 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$and$<techmap.v>:212$2790 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$or$<techmap.v>:229$2802 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$or$<techmap.v>:221$2799 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$or$<techmap.v>:221$2796 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$or$<techmap.v>:221$2793 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$or$<techmap.v>:212$2791 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$and$<techmap.v>:229$2801 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$and$<techmap.v>:222$2797 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$and$<techmap.v>:221$2798 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$and$<techmap.v>:221$2795 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$and$<techmap.v>:221$2792 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$and$<techmap.v>:212$2790 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$and$<techmap.v>:221$2798 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$and$<techmap.v>:221$2795 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$and$<techmap.v>:221$2792 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$and$<techmap.v>:212$2790 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$or$<techmap.v>:229$2802 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$or$<techmap.v>:221$2799 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$or$<techmap.v>:221$2796 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$or$<techmap.v>:221$2793 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$or$<techmap.v>:212$2791 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$and$<techmap.v>:229$2801 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$and$<techmap.v>:222$2797 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$or$<techmap.v>:221$2799 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$or$<techmap.v>:229$2802 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$or$<techmap.v>:221$2793 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$and$<techmap.v>:229$2801 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$or$<techmap.v>:212$2791 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$and$<techmap.v>:221$2798 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$and$<techmap.v>:222$2797 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$and$<techmap.v>:221$2792 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$and$<techmap.v>:221$2795 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$and$<techmap.v>:212$2790 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$or$<techmap.v>:221$2796 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$or$<techmap.v>:229$2802 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$or$<techmap.v>:221$2799 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$or$<techmap.v>:221$2796 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$or$<techmap.v>:221$2793 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$or$<techmap.v>:212$2791 ($or) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$and$<techmap.v>:229$2801 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$and$<techmap.v>:222$2797 ($and) with simplemap.
Mapping counter_4b.$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$and$<techmap.v>:221$2798 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:346:merge_en_data$1719 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:345:merge_en_data$1585 ($or) with simplemap.
Mapping counter.$auto$memory_share.cc:345:merge_en_data$1689 ($or) with simplemap.
Mapping counter.$memory\MODO_reg$wren[1][8][0]$2081 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1635 ($and) with simplemap.
Mapping counter.$memory\MODO_reg$wren[4][11][0]$2337 ($and) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[4][11][0]$2339 ($mux) with simplemap.
Mapping counter.$memory\MODO_reg$wren[2][9][0]$2169 ($and) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[2][9][0]$2171 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:336:merge_en_data$1541 ($and) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[3][3][0]$2215 ($mux) with simplemap.
Mapping counter.$memory\MODO_reg$wren[3][10][0]$2249 ($and) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[3][10][0]$2251 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1633 ($not) with simplemap.
Mapping counter.$memory\MODO_reg$wren[4][4][0]$2301 ($and) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[4][4][0]$2303 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:345:merge_en_data$1637 ($or) with simplemap.
Mapping counter.$auto$memory_share.cc:337:merge_en_data$1545 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:346:merge_en_data$1641 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:325:merge_en_data$1643 ($or) with simplemap.
Mapping counter.$auto$memory_share.cc:336:merge_en_data$1645 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:337:merge_en_data$1649 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1555 ($not) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1659 ($not) with simplemap.
Mapping counter.$auto$memory_share.cc:325:merge_en_data$1539 ($or) with simplemap.
Mapping counter.$auto$memory_share.cc:337:merge_en_data$1597 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:346:merge_en_data$1589 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:325:merge_en_data$1591 ($or) with simplemap.
Mapping counter.$auto$memory_share.cc:336:merge_en_data$1593 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:337:merge_en_data$1595 ($not) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[2][2][0]$2129 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1607 ($not) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1609 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:345:merge_en_data$1611 ($or) with simplemap.
Mapping counter.$auto$memory_share.cc:346:merge_en_data$1615 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:325:merge_en_data$1617 ($or) with simplemap.
Mapping counter.$auto$memory_share.cc:336:merge_en_data$1619 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:337:merge_en_data$1623 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1557 ($and) with simplemap.
Mapping counter.$auto$opt_expr.cc:158:group_cell_inputs$1733 ($and) with simplemap.
Mapping counter.$auto$opt_expr.cc:158:group_cell_inputs$1727 ($and) with simplemap.
Mapping counter.$auto$opt_expr.cc:158:group_cell_inputs$1725 ($and) with simplemap.
Mapping counter.$memory\MODO_reg[5]$1788 ($dff) with simplemap.
Mapping counter.$memory\MODO_reg[2]$1782 ($dff) with simplemap.
Mapping counter.$auto$opt_expr.cc:158:group_cell_inputs$1745 ($and) with simplemap.
Mapping counter.$memory\MODO_reg[3]$1784 ($dff) with simplemap.
Mapping counter.$memory\MODO_reg[7]$1792 ($dff) with simplemap.
Mapping counter.$auto$opt_expr.cc:158:group_cell_inputs$1739 ($and) with simplemap.
Mapping counter.$auto$opt_expr.cc:158:group_cell_inputs$1735 ($and) with simplemap.
Mapping counter.$memory\MODO_reg[4]$1786 ($dff) with simplemap.
Mapping counter.$memory\MODO_reg[6]$1790 ($dff) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[1][1][0]$2043 ($mux) with simplemap.
Mapping counter.$procmux$969 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1685 ($not) with simplemap.
Mapping counter.$procmux$984 ($not) with simplemap.
Mapping counter.$procmux$987 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1687 ($and) with simplemap.
Mapping counter.$auto$opt_expr.cc:158:group_cell_inputs$1729 ($and) with simplemap.
Mapping counter.$procmux$1005 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1661 ($and) with simplemap.
Mapping counter.$procmux$1020 ($not) with simplemap.
Mapping counter.$procmux$1023 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:345:merge_en_data$1663 ($or) with simplemap.
Mapping counter.$procmux$1041 ($mux) with simplemap.
Mapping counter.$procmux$1056 ($not) with simplemap.
Mapping counter.$procmux$1059 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:346:merge_en_data$1667 ($and) with simplemap.
Mapping counter.$procmux$1077 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:325:merge_en_data$1669 ($or) with simplemap.
Mapping counter.$procmux$1092 ($not) with simplemap.
Mapping counter.$procmux$1095 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:336:merge_en_data$1671 ($and) with simplemap.
Mapping counter.$procmux$1113 ($mux) with simplemap.
Mapping counter.$procmux$1128 ($not) with simplemap.
Mapping counter.$procmux$1131 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:337:merge_en_data$1675 ($and) with simplemap.
Mapping counter.$procmux$1149 ($mux) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[7][14][0]$2587 ($mux) with simplemap.
Mapping counter.$memory\MODO_reg$wren[7][14][0]$2585 ($and) with simplemap.
Mapping counter.$procmux$1164 ($not) with simplemap.
Mapping counter.$procmux$1167 ($mux) with simplemap.
Mapping counter.$procmux$1185 ($mux) with simplemap.
Mapping counter.$procmux$1200 ($not) with simplemap.
Mapping counter.$procmux$1203 ($mux) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[7][7][0]$2559 ($mux) with simplemap.
Mapping counter.$procmux$1218 ($mux) with simplemap.
Mapping counter.$memory\MODO_reg[1]$1780 ($dff) with simplemap.
Mapping counter.$procdff$1277 ($dff) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[6][13][0]$2507 ($mux) with simplemap.
Mapping counter.$memory\MODO_reg$wren[6][13][0]$2505 ($and) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[1][8][0]$2083 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1583 ($and) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[5][12][0]$2419 ($mux) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[6][6][0]$2477 ($mux) with simplemap.
Mapping counter.$memory\MODO_reg$wren[5][12][0]$2417 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1581 ($not) with simplemap.
Mapping counter.$memory\MODO_reg$wrmux[5][5][0]$2387 ($mux) with simplemap.
Mapping counter.$auto$memory_share.cc:345:merge_en_data$1715 ($or) with simplemap.
Mapping counter.$auto$memory_share.cc:337:merge_en_data$1571 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1713 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:343:merge_en_data$1711 ($not) with simplemap.
Mapping counter.$auto$memory_share.cc:336:merge_en_data$1567 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:325:merge_en_data$1565 ($or) with simplemap.
Mapping counter.$auto$memory_share.cc:337:merge_en_data$1701 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:346:merge_en_data$1563 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:336:merge_en_data$1697 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:325:merge_en_data$1695 ($or) with simplemap.
Mapping counter.$auto$memory_share.cc:346:merge_en_data$1693 ($and) with simplemap.
Mapping counter.$auto$memory_share.cc:345:merge_en_data$1559 ($or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3074' (1?) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1728 = $0$memwr$\MODO_reg$counter.v:95$161_EN[1:0]$392 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3002' (1?) in module `\counter' with constant driver `$memory\MODO_reg$wren[0][0][0]$y$1948 = \RESET'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3209' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1694 [0] = $auto$rtlil.cc:1630:Or$1690 [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3177' (1?) in module `\counter' with constant driver `$memory\MODO_reg$wren[6][13][0]$y$2506 = $auto$rtlil.cc:1630:Or$1670'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3054' (1?) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1744 = $0$memwr$\MODO_reg$counter.v:77$155_EN[1:0]$374 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3039' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1616 [1] = $auto$rtlil.cc:1630:Or$1612 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2997' (1?) in module `\counter' with constant driver `$memory\MODO_reg$wren[3][10][0]$y$2250 = $auto$rtlil.cc:1630:Or$1592'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3038' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1616 [0] = $auto$rtlil.cc:1630:Or$1612 [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3047' (1?) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1732 = $0$memwr$\MODO_reg$counter.v:83$157_EN[1:0]$380 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3048' (1?) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1726 = $0$memwr$\MODO_reg$counter.v:71$153_EN[1:0]$368 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3024' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1590 [1] = $auto$rtlil.cc:1630:Or$1586 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2990' (1?) in module `\counter' with constant driver `$memory\MODO_reg$wren[2][9][0]$y$2170 = $auto$rtlil.cc:1630:Or$1566'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3060' (1?) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1734 = $0$memwr$\MODO_reg$counter.v:65$151_EN[1:0]$362 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3210' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1694 [1] = $auto$rtlil.cc:1630:Or$1690 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3204' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1564 [0] = $auto$rtlil.cc:1630:Or$1560 [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3205' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1564 [1] = $auto$rtlil.cc:1630:Or$1560 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3049' (1?) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1724 = $0$memwr$\MODO_reg$counter.v:101$163_EN[1:0]$398 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3186' (1?) in module `\counter' with constant driver `$memory\MODO_reg$wren[5][12][0]$y$2418 = $auto$rtlil.cc:1630:Or$1644'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3059' (1?) in module `\counter' with constant driver `$auto$opt_expr.cc:145:group_cell_inputs$1738 = $0$memwr$\MODO_reg$counter.v:89$159_EN[1:0]$386 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3085' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1668 [0] = $auto$rtlil.cc:1630:Or$1664 [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3086' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1668 [1] = $auto$rtlil.cc:1630:Or$1664 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2984' (1?) in module `\counter' with constant driver `$memory\MODO_reg$wren[1][8][0]$y$2082 = $auto$rtlil.cc:1630:Or$1540'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3101' (1?) in module `\counter' with constant driver `$memory\MODO_reg$wren[7][14][0]$y$2586 = $auto$rtlil.cc:1630:Or$1696'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2978' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1720 [0] = $auto$rtlil.cc:1630:Or$1716 [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2979' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1720 [1] = $auto$rtlil.cc:1630:Or$1716 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3023' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1590 [0] = $auto$rtlil.cc:1630:Or$1586 [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3010' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1642 [1] = $auto$rtlil.cc:1630:Or$1638 [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$3009' (?1) in module `\counter' with constant driver `$auto$rtlil.cc:1629:And$1642 [0] = $auto$rtlil.cc:1630:Or$1638 [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2987' (1?) in module `\counter' with constant driver `$memory\MODO_reg$wren[4][11][0]$y$2338 = $auto$rtlil.cc:1630:Or$1618'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2816' (0) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$not$<techmap.v>:258$2660_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2820' (011) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$ternary$<techmap.v>:258$2661_Y [3] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2815' (0) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$not$<techmap.v>:258$2660_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2819' (011) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$ternary$<techmap.v>:258$2661_Y [2] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2823' (?1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$and$<techmap.v>:260$2662_Y [2] = \Q [2]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2813' (1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$not$<techmap.v>:258$2660_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2817' (101) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$ternary$<techmap.v>:258$2661_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2821' (const_and) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$and$<techmap.v>:260$2662_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2830' (?0) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$xor$<techmap.v>:262$2663_Y [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2968' (?1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$and$<techmap.v>:212$2790_Y = \Q [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2963' (0?) in module `\counter_4b' with constant driver `$auto$alumacc.cc:484:replace_alu$1538 [0] = \Q [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2814' (0) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$not$<techmap.v>:258$2660_Y [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2818' (011) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$ternary$<techmap.v>:258$2661_Y [1] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2822' (?1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$and$<techmap.v>:260$2662_Y [1] = \Q [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2824' (?1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$and$<techmap.v>:260$2662_Y [3] = \Q [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2777' (??1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.$ternary$<techmap.v>:258$2656_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2765' (0?) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.$xor$<techmap.v>:262$2658_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2936' (?1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$and$<techmap.v>:212$2790_Y = $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2880' (??0) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.$ternary$<techmap.v>:258$2671_Y [2] = \Q [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2867' (0?) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.$xor$<techmap.v>:262$2673_Y [2] = \Q [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2879' (??0) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.$ternary$<techmap.v>:258$2671_Y [1] = \Q [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2875' (const_and) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.$and$<techmap.v>:260$2672_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2866' (0?) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.$xor$<techmap.v>:262$2673_Y [1] = \Q [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2878' (??0) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.$ternary$<techmap.v>:258$2671_Y [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2874' (1?) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.$and$<techmap.v>:260$2672_Y [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2951' (const_and) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$and$<techmap.v>:212$2790_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2956' (?0) in module `\counter_4b' with constant driver `$auto$alumacc.cc:484:replace_alu$1532 [0] = \Q [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2955' (0?) in module `\counter_4b' with constant driver `$auto$alumacc.cc:484:replace_alu$1532 [1] = $techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$and$<techmap.v>:221$2792_Y'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2864' (0) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$not$<techmap.v>:258$2665_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2860' (011) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$ternary$<techmap.v>:258$2666_Y [3] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2863' (0) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$not$<techmap.v>:258$2665_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2859' (011) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$ternary$<techmap.v>:258$2666_Y [2] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2862' (1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$not$<techmap.v>:258$2665_Y [1] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2858' (101) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$ternary$<techmap.v>:258$2666_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2854' (const_and) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$and$<techmap.v>:260$2667_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2845' (?0) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$xor$<techmap.v>:262$2668_Y [1] = \Q [1]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2861' (1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$not$<techmap.v>:258$2665_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2857' (101) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$ternary$<techmap.v>:258$2666_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2853' (const_and) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$and$<techmap.v>:260$2667_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2844' (?0) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$xor$<techmap.v>:262$2668_Y [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2947' (?1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$and$<techmap.v>:212$2790_Y = \Q [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2941' (0?) in module `\counter_4b' with constant driver `$auto$alumacc.cc:484:replace_alu$1535 [0] = \Q [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2940' (0?) in module `\counter_4b' with constant driver `$auto$alumacc.cc:484:replace_alu$1535 [1] = $techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$and$<techmap.v>:221$2792_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2855' (?1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$and$<techmap.v>:260$2667_Y [2] = \Q [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2713' (?0) in module `\counter_4b' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2711 [0] = \MODO [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2704' (?0) in module `\counter_4b' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2701 [1] = \MODO [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2869' (?0) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.$xor$<techmap.v>:263$2674_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$1530.$xor$<techmap.v>:262$2673_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2881' (??0) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.$ternary$<techmap.v>:258$2671_Y [3] = \Q [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2868' (0?) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.$xor$<techmap.v>:262$2673_Y [3] = \Q [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2876' (const_and) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.$and$<techmap.v>:260$2672_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2952' (0?) in module `\counter_4b' with constant driver `$auto$alumacc.cc:484:replace_alu$1532 [2] = $techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$and$<techmap.v>:229$2801_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2779' (??1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.$ternary$<techmap.v>:258$2656_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2767' (0?) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.$xor$<techmap.v>:262$2658_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2780' (??1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.$ternary$<techmap.v>:258$2656_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2768' (0?) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.$xor$<techmap.v>:262$2658_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2778' (??1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.$ternary$<techmap.v>:258$2656_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2807' (const_and) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.$and$<techmap.v>:260$2657_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2806' (const_and) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.$and$<techmap.v>:260$2657_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2934' (const_and) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$and$<techmap.v>:221$2795_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2972' (00) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$or$<techmap.v>:221$2796_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2805' (1?) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.$and$<techmap.v>:260$2657_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2804' (const_and) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.$and$<techmap.v>:260$2657_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2974' (0?) in module `\counter_4b' with constant driver `$auto$alumacc.cc:484:replace_alu$1521 [0] = $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2971' (0?) in module `\counter_4b' with constant driver `$auto$alumacc.cc:484:replace_alu$1521 [3] = $techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$and$<techmap.v>:221$2798_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2642' (?0) in module `\counter_4b' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$2640 [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2932' (const_and) in module `\counter_4b' with constant driver `$techmap$procmux$1238.$and$<techmap.v>:434$2725_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2836' (0?) in module `\counter_4b' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$2835 [0] = $techmap$procmux$1238.$and$<techmap.v>:434$2726_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2877' (const_and) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.$and$<techmap.v>:260$2672_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2949' (const_and) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$and$<techmap.v>:221$2795_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2954' (00) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$or$<techmap.v>:221$2796_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2953' (0?) in module `\counter_4b' with constant driver `$auto$alumacc.cc:484:replace_alu$1532 [3] = $techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$and$<techmap.v>:221$2798_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2873' (0?) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1530.$xor$<techmap.v>:263$2674_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$and$<techmap.v>:221$2798_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2856' (?1) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$and$<techmap.v>:260$2667_Y [3] = \Q [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2852' (0?) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1533.$xor$<techmap.v>:263$2669_Y [4] = $auto$alumacc.cc:484:replace_alu$1535 [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2841' (1?) in module `\counter_4b' with constant driver `$techmap$procmux$1221.$and$<techmap.v>:434$2695_Y = $procmux$1222_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2933' (const_and) in module `\counter_4b' with constant driver `$techmap$procmux$1221.$and$<techmap.v>:434$2696_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2843' (?0) in module `\counter_4b' with constant driver `$techmap$procmux$1221.$reduce_or$<techmap.v>:441$2697_Y = $procmux$1222_CMP'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2829' (0?) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1536.$xor$<techmap.v>:263$2664_Y [4] = $auto$alumacc.cc:484:replace_alu$1538 [3]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2970' (0?) in module `\counter_4b' with constant driver `$auto$alumacc.cc:484:replace_alu$1521 [2] = $techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$and$<techmap.v>:229$2801_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2764' (0?) in module `\counter_4b' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$1519.$xor$<techmap.v>:263$2659_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$and$<techmap.v>:221$2798_Y'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_4b'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2809' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2912'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2808 [0] = $auto$simplemap.cc:127:simplemap_reduce$2911 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2809' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2865' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2825'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$1530.$xor$<techmap.v>:262$2673_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$1536.$xor$<techmap.v>:263$2664_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2865' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2743' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2913'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2742 = $auto$simplemap.cc:127:simplemap_reduce$2911 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2743' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2870' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2849'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$1530.$xor$<techmap.v>:263$2674_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$1533.$xor$<techmap.v>:263$2669_Y [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2870' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2950' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2946'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$1530.lcu.$and$<techmap.v>:221$2792_Y = $techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$and$<techmap.v>:221$2792_Y
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2950' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2685' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2703'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$2683 [0] = $auto$simplemap.cc:250:simplemap_eqne$2701 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2685' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2686' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2714'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$2683 [1] = $auto$simplemap.cc:250:simplemap_eqne$2711 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2686' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2680' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2935'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2678 [1] = $techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$and$<techmap.v>:221$2792_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$2680' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2679' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2976'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2678 [0] = $techmap$auto$alumacc.cc:470:replace_alu$1519.lcu.$and$<techmap.v>:222$2797_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$2679' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:37:simplemap_not$2884' is identical to cell `$auto$simplemap.cc:37:simplemap_not$2775'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$1530.$not$<techmap.v>:258$2670_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [2]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2884' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2846' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2832'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$1533.$xor$<techmap.v>:262$2668_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$1536.$xor$<techmap.v>:262$2663_Y [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2846' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2848' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2825'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$1533.$xor$<techmap.v>:263$2669_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$1536.$xor$<techmap.v>:263$2664_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2848' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:37:simplemap_not$2883' is identical to cell `$auto$simplemap.cc:37:simplemap_not$2774'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$1530.$not$<techmap.v>:258$2670_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [1]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2883' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2810' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2913'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$2808 [1] = $auto$simplemap.cc:127:simplemap_reduce$2911 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2810' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2833' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2847'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$1536.$xor$<techmap.v>:262$2663_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$1533.$xor$<techmap.v>:262$2668_Y [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2833' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:37:simplemap_not$2776' is identical to cell `$auto$simplemap.cc:37:simplemap_not$2885'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$1530.$not$<techmap.v>:258$2670_Y [3]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2776' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2644' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2832'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$2640 [2] = $techmap$auto$alumacc.cc:470:replace_alu$1536.$xor$<techmap.v>:262$2663_Y [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2644' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2643' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2831'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$2640 [1] = $techmap$auto$alumacc.cc:470:replace_alu$1536.$xor$<techmap.v>:262$2663_Y [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2643' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2645' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2847'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$2640 [3] = $techmap$auto$alumacc.cc:470:replace_alu$1533.$xor$<techmap.v>:262$2668_Y [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2645' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:37:simplemap_not$2882' is identical to cell `$auto$simplemap.cc:37:simplemap_not$2773'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$1530.$not$<techmap.v>:258$2670_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$1519.$not$<techmap.v>:258$2655_Y [0]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2882' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$2915' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$2812'.
    Redirecting output \Y: $techmap$procmux$1258.$reduce_or$<techmap.v>:445$2732_Y = $techmap$procmux$1238.$reduce_or$<techmap.v>:445$2723_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$2915' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2965' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2943'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$and$<techmap.v>:222$2797_Y = $techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$and$<techmap.v>:222$2797_Y
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2965' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2967' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2945'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$and$<techmap.v>:221$2795_Y = $techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$and$<techmap.v>:221$2795_Y
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2967' from module `\counter_4b'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2969' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2939'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$1536.lcu.$or$<techmap.v>:221$2796_Y = $techmap$auto$alumacc.cc:470:replace_alu$1533.lcu.$or$<techmap.v>:221$2796_Y
    Removing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2969' from module `\counter_4b'.
Removed a total of 24 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_4b..
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2959'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2964'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2938'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2939'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2948'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2945'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2943'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2944'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2958'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2760'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2761'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2762'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2763'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2975'.

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\counter' to `<abc-temp-dir>/input.blif'..
Extracted 160 gates and 250 wires to a netlist network with 88 inputs and 46 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        7
ABC RESULTS:              AOI3 cells:       14
ABC RESULTS:               MUX cells:       46
ABC RESULTS:               NOT cells:        9
ABC RESULTS:                OR cells:       28
ABC RESULTS:        internal signals:      116
ABC RESULTS:           input signals:       88
ABC RESULTS:          output signals:       46
Removing temp directory.

3.20.2. Extracting gate netlist of module `\counter_4b' to `<abc-temp-dir>/input.blif'..
Extracted 108 gates and 124 wires to a netlist network with 14 inputs and 6 outputs.

3.20.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:              AOI3 cells:        7
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:              NAND cells:        8
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               NOT cells:        9
ABC RESULTS:              OAI3 cells:        9
ABC RESULTS:              OAI4 cells:        2
ABC RESULTS:                OR cells:       12
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        6
ABC RESULTS:        internal signals:      104
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        6
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_4b'.
  Cell `$abc$3318$auto$blifparse.cc:286:parse_blif$3370' is identical to cell `$abc$3318$auto$blifparse.cc:286:parse_blif$3369'.
    Redirecting output \Y: $abc$3318$n72_1 = $abc$3318$n71
    Removing $_XOR_ cell `$abc$3318$auto$blifparse.cc:286:parse_blif$3370' from module `\counter_4b'.
Removed a total of 1 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_4b..

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \counter
Used module:     \counter_4b

3.22.2. Analyzing design hierarchy..
Top module:  \counter
Used module:     \counter_4b
Removed 0 unused modules.

3.23. Printing statistics.

=== counter ===

   Number of wires:                 93
   Number of wire bits:            284
   Number of public wires:          20
   Number of public wire bits:     180
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                158
     $_AND_                          7
     $_AOI3_                        14
     $_DFF_P_                       46
     $_MUX_                         46
     $_NOT_                          9
     $_OR_                          28
     counter_4b                      8

=== counter_4b ===

   Number of wires:                 74
   Number of wire bits:             85
   Number of public wires:           9
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 74
     $_AND_                          8
     $_AOI3_                         7
     $_AOI4_                         2
     $_DFF_P_                        6
     $_NAND_                         8
     $_NOR_                          5
     $_NOT_                          9
     $_OAI3_                         9
     $_OAI4_                         2
     $_OR_                          12
     $_XNOR_                         1
     $_XOR_                          5

=== design hierarchy ===

   counter                           1
     counter_4b                      8

   Number of wires:                685
   Number of wire bits:            964
   Number of public wires:          92
   Number of public wire bits:     316
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                742
     $_AND_                         71
     $_AOI3_                        70
     $_AOI4_                        16
     $_DFF_P_                       94
     $_MUX_                         46
     $_NAND_                        64
     $_NOR_                         40
     $_NOT_                         81
     $_OAI3_                        72
     $_OAI4_                        16
     $_OR_                         124
     $_XNOR_                         8
     $_XOR_                         40

3.24. Executing CHECK pass (checking for obvious problems).
checking module counter..
checking module counter_4b..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=1584.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\counter':
  mapped 46 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\counter_4b':
  mapped 6 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_4b'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_4b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
  Optimizing cells in module \counter_4b.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Finding identical cells in module `\counter_4b'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..
Finding unused cells or wires in module \counter_4b..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\counter' to `<abc-temp-dir>/input.blif'..
Extracted 104 gates and 192 wires to a netlist network with 88 inputs and 46 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu050/osu05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu05_stdcells" from "/usr/share/qflow/tech/osu050/osu05_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:       35
ABC RESULTS:           NAND2X1 cells:       32
ABC RESULTS:           NAND3X1 cells:       14
ABC RESULTS:           OAI21X1 cells:       32
ABC RESULTS:        internal signals:       58
ABC RESULTS:           input signals:       88
ABC RESULTS:          output signals:       46
Removing temp directory.

6.2. Extracting gate netlist of module `\counter_4b' to `<abc-temp-dir>/input.blif'..
Extracted 68 gates and 81 wires to a netlist network with 13 inputs and 6 outputs.

6.2.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu050/osu05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu05_stdcells" from "/usr/share/qflow/tech/osu050/osu05_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        6
ABC RESULTS:           AOI22X1 cells:        5
ABC RESULTS:             INVX1 cells:       10
ABC RESULTS:           NAND2X1 cells:        8
ABC RESULTS:           NAND3X1 cells:        3
ABC RESULTS:            NOR2X1 cells:       10
ABC RESULTS:           OAI21X1 cells:        5
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:        internal signals:       62
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        6
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Mapping counter.cont4b_0 using counter_4b.
Mapping counter.cont4b_1 using counter_4b.
Mapping counter.cont4b_2 using counter_4b.
Mapping counter.cont4b_3 using counter_4b.
Mapping counter.cont4b_4 using counter_4b.
Mapping counter.cont4b_5 using counter_4b.
Mapping counter.cont4b_6 using counter_4b.
Mapping counter.cont4b_7 using counter_4b.
No more expansions possible.
Deleting now unused module counter_4b.
Removed 0 unused cells and 901 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port counter.D: Missing option -inpad.
Don't map input port counter.ENABLE: Missing option -inpad.
Mapping port counter.LOAD using BUFX2.
Don't map input port counter.MODO: Missing option -inpad.
Mapping port counter.Q using BUFX2.
Mapping port counter.RCO using BUFX2.
Don't map input port counter.RESET: Missing option -inpad.
Don't map input port counter.clk: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

End of script. Logfile hash: faac84ef85
CPU: user 1.11s system 0.06s, MEM: 40.71 MB total, 13.86 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 14% 18x opt_clean (0 sec), 10% 19x opt_expr (0 sec), ...
Cleaning up output syntax
Cleaning Up blif file syntax
Running blifFanout (iterative)

Parsing library "osu05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Top internal fanout is 14 (load 606.054) from node _15_,
driven by INVX1 with strength 166.776 (fF driven at latency 300)
Top fanout load-to-strength ratio is 2.37432 (latency = 712.295 ps)
Top input node fanout is 94 (load 4693.33) from node clk.
Warning 1: load of 566.136 is 1.02979 times greater than strongest gate DFFPOSX1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 616.054 is 1.12059 times greater than strongest gate DFFPOSX1
Warning 3: load of 201.205 is 1.2137 times greater than strongest gate NAND2X1
24 gates exceed specified minimum load.
17 buffers were added.
3 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 599    	Out: 596    	-3
	"2" gates	In: 57    	Out: 59    	+2

gates resized: 20
Parsing library "osu05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Top internal fanout is 14 (load 719.541) from node _15_,
driven by INVX4 with strength 696.883 (fF driven at latency 300)
Top fanout load-to-strength ratio is 2.07191 (latency = 621.574 ps)
Top input node fanout is 9 (load 171.358) from node clk.
Warning 1: load of 729.541 is 1.05419 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 6: load of 616.054 is 1.12059 times greater than strongest gate DFFPOSX1
Warning 7: load of 201.205 is 1.2137 times greater than strongest gate NAND2X1
28 gates exceed specified minimum load.
0 buffers were added.
17 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 596    	Out: 596    	+0
	"2" gates	In: 76    	Out: 59    	-17
	"4" gates	In: 1    	Out: 18    	+17

gates resized: 17
Parsing library "osu05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Top internal fanout is 14 (load 925.511) from node _15_,
driven by INVX4 with strength 696.883 (fF driven at latency 300)
Top fanout load-to-strength ratio is 1.33737 (latency = 401.212 ps)
Top input node fanout is 9 (load 222.371) from node clk.
Warning 1: load of 935.511 is 1.35182 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
34 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 596    	Out: 596    	+0
	"2" gates	In: 59    	Out: 59    	+0
	"4" gates	In: 18    	Out: 18    	+0

gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/bran/Documentos/repositories/Design_process/Qflow/32b/synthesis
Files:
   Verilog: /home/bran/Documentos/repositories/Design_process/Qflow/32b/synthesis/counter.rtl.v
   Verilog: /home/bran/Documentos/repositories/Design_process/Qflow/32b/synthesis/counter.rtlnopwr.v
   Spice:   /home/bran/Documentos/repositories/Design_process/Qflow/32b/synthesis/counter.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
Synthesis script ended on dom 6 dic 13:17:20 CST 2020
Running blif2cel.tcl
Loaded LEF file (/usr/share/qflow/tech/osu050/osu050_stdcells.lef) for reading...
Loaded BLIF file (/home/bran/Documentos/repositories/Design_process/Qflow/32b/synthesis/counter.blif) for reading ...
Loaded CEL file (/home/bran/Documentos/repositories/Design_process/Qflow/32b/layout/counter.cel) for writing...
1st pass of blif file /home/bran/Documentos/repositories/Design_process/Qflow/32b/synthesis/counter.blif. . .
Reading macros from LEF file. . .
Parsing macro AND2X2:  Ports are:
parse_pin
macroname: AND2X2, pinname: A
Port type: INPUT 
A -360 -450 1
parse_pin
macroname: AND2X2, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: AND2X2, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: AND2X2, pinname: Y
Port type: OUTPUT 
Y 360 -150 1
parse_pin
macroname: AND2X2, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro AOI21X1:  Ports are:
parse_pin
macroname: AOI21X1, pinname: A
Port type: INPUT 
A -360 -150 1
parse_pin
macroname: AOI21X1, pinname: B
Port type: INPUT 
B -120 -450 1
parse_pin
macroname: AOI21X1, pinname: C
Port type: INPUT 
C 360 -750 1
parse_pin
macroname: AOI21X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: AOI21X1, pinname: Y
Port type: OUTPUT 
Y 360 -150 1
parse_pin
macroname: AOI21X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro AOI22X1:  Ports are:
parse_pin
macroname: AOI22X1, pinname: A
Port type: INPUT 
A -480 -150 1
parse_pin
macroname: AOI22X1, pinname: B
Port type: INPUT 
B -240 -450 1
parse_pin
macroname: AOI22X1, pinname: C
Port type: INPUT 
C 479 -150 1
parse_pin
macroname: AOI22X1, pinname: D
Port type: INPUT 
D 240 -450 1
parse_pin
macroname: AOI22X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: AOI22X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: AOI22X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro BUFX2:  Ports are:
parse_pin
macroname: BUFX2, pinname: A
Port type: INPUT 
A -240 -150 1
parse_pin
macroname: BUFX2, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: BUFX2, pinname: Y
Port type: OUTPUT 
Y 240 -450 1
parse_pin
macroname: BUFX2, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro BUFX4:  Ports are:
parse_pin
macroname: BUFX4, pinname: A
Port type: INPUT 
A -360 -150 1
parse_pin
macroname: BUFX4, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: BUFX4, pinname: Y
Port type: OUTPUT 
Y 120 -450 1
parse_pin
macroname: BUFX4, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro DFFPOSX1:  Ports are:
parse_pin
macroname: DFFPOSX1, pinname: Q
Port type: OUTPUT 
Q 1320 -150 1
parse_pin
macroname: DFFPOSX1, pinname: CLK
Port type: INPUT 
CLK -1080 -450 1
parse_pin
macroname: DFFPOSX1, pinname: D
Port type: INPUT 
D -361 -150 1
parse_pin
macroname: DFFPOSX1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: DFFPOSX1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro INVX1:  Ports are:
parse_pin
macroname: INVX1, pinname: A
Port type: INPUT 
A -120 -750 1
parse_pin
macroname: INVX1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: INVX1, pinname: Y
Port type: OUTPUT 
Y 120 -450 1
parse_pin
macroname: INVX1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro INVX2:  Ports are:
parse_pin
macroname: INVX2, pinname: A
Port type: INPUT 
A -120 -450 1
parse_pin
macroname: INVX2, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: INVX2, pinname: Y
Port type: OUTPUT 
Y 120 -150 1
parse_pin
macroname: INVX2, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro INVX4:  Ports are:
parse_pin
macroname: INVX4, pinname: A
Port type: INPUT 
A -240 -450 1
parse_pin
macroname: INVX4, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: INVX4, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: INVX4, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro NAND2X1:  Ports are:
parse_pin
macroname: NAND2X1, pinname: A
Port type: INPUT 
A -240 -450 1
parse_pin
macroname: NAND2X1, pinname: B
Port type: INPUT 
B 240 150 1
parse_pin
macroname: NAND2X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: NAND2X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: NAND2X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro NAND3X1:  Ports are:
parse_pin
macroname: NAND3X1, pinname: A
Port type: INPUT 
A -360 150 1
parse_pin
macroname: NAND3X1, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: NAND3X1, pinname: C
Port type: INPUT 
C 120 449 1
parse_pin
macroname: NAND3X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: NAND3X1, pinname: Y
Port type: OUTPUT 
Y 360 150 1
parse_pin
macroname: NAND3X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro NOR2X1:  Ports are:
parse_pin
macroname: NOR2X1, pinname: A
Port type: INPUT 
A -240 -750 1
parse_pin
macroname: NOR2X1, pinname: B
Port type: INPUT 
B 240 -150 1
parse_pin
macroname: NOR2X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: NOR2X1, pinname: Y
Port type: OUTPUT 
Y 0 -450 1
parse_pin
macroname: NOR2X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro OAI21X1:  Ports are:
parse_pin
macroname: OAI21X1, pinname: A
Port type: INPUT 
A -360 -450 1
parse_pin
macroname: OAI21X1, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: OAI21X1, pinname: C
Port type: INPUT 
C 360 150 1
parse_pin
macroname: OAI21X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: OAI21X1, pinname: Y
Port type: OUTPUT 
Y 360 -450 1
parse_pin
macroname: OAI21X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro OR2X2:  Ports are:
parse_pin
macroname: OR2X2, pinname: A
Port type: INPUT 
A -360 -750 1
parse_pin
macroname: OR2X2, pinname: B
Port type: INPUT 
B -120 -450 1
parse_pin
macroname: OR2X2, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: OR2X2, pinname: Y
Port type: OUTPUT 
Y 360 -150 1
parse_pin
macroname: OR2X2, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro XOR2X1:  Ports are:
parse_pin
macroname: XOR2X1, pinname: A
Port type: INPUT 
A -720 -450 1
parse_pin
macroname: XOR2X1, pinname: B
Port type: INPUT 
B 720 -450 1
parse_pin
macroname: XOR2X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: XOR2X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: XOR2X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro XNOR2X1:  Ports are:
parse_pin
macroname: XNOR2X1, pinname: A
Port type: INPUT 
A -720 -450 1
parse_pin
macroname: XNOR2X1, pinname: B
Port type: INPUT 
B 720 -450 1
parse_pin
macroname: XNOR2X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: XNOR2X1, pinname: Y
Port type: OUTPUT 
Y 239 -150 1
parse_pin
macroname: XNOR2X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
2nd pass of blif file. . .
3rd pass of blif file. . .
Done!
No counter.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement

twflow version:2.1 date:Mon May 25 21:15:08 EDT 1992
Authors: Bill Swartz, Carl Sechen
         Yale University

syntax version:v1.1 date:Mon May 25 21:11:10 EDT 1992
TimberWolf System Syntax Checker
Authors: Carl Sechen, Kai-Win Lee, Bill Swartz,
         Dahe Chen, and Jimmy Lam
         Yale University

Read   50 objects so far...
Read  100 objects so far...
Read  150 objects so far...
Read  200 objects so far...
Read  250 objects so far...
Read  300 objects so far...
Read  350 objects so far...
Read  400 objects so far...
Read  450 objects so far...
Read  500 objects so far...
Read  550 objects so far...
Read  600 objects so far...
Read  650 objects so far...
Read  700 objects so far...
Read  750 objects so far...
No syntax errors were found

syntax terminated normally with no errors and 0 warning[s]


----------------------------
Total stdcells     :673
Total cell width   :7.41e+05
Total cell height  :2.02e+06
Total cell area    :2.22e+09
Total core area    :2.22e+09
Average cell height:3.00e+03


nocut - replacement for Mincut version:v1.0 date:Mon May 25 21:09:40 EDT 1992
TimberWolf System Floorplan Setup Program
Authors: Carl Sechen, Bill Swartz,
         Yale University

Read   50 objects so far...
Read  100 objects so far...
Read  150 objects so far...
Read  200 objects so far...
Read  250 objects so far...
Read  300 objects so far...
Read  350 objects so far...
Read  400 objects so far...
Read  450 objects so far...
Read  500 objects so far...
Read  550 objects so far...
Read  600 objects so far...
Read  650 objects so far...
Read  700 objects so far...
Read  750 objects so far...
Splitting counter.cel into counter.scel and counter.mcel...
	done!


nocut - replacement for Mincut terminated normally with no errors and 0 warning[s]


TimberWolfMC version:v2.2 date:Mon May 25 21:18:34 EDT 1992
Authors: Carl Sechen, Bill Swartz, Kai-Win Lee
         Dahe Chen, and Jimmy Lam
         Yale University

config version:v1.0 date:Mon May 25 20:57:18 EDT 1992
Row configuration program
    Yale University


config switches:
	Graphics mode on
	config will inherit window



config terminated normally with no errors and 0 warning[s]


TimberWolfMC terminated normally with no errors and 0 warning[s]

ERROR[check_pin]:the pin <ENABLE> assigned to cell <twpin_ENABLE> is
outside the cell's bounding box:
	cell l:-100 r:100 b:-2147483568 t:2147483568  pin x:0 y:-2147483648


TimberWolfSC switches:
	Graphics mode on
	TimberWolfSC will inherit window

TimberWolfSC version:v6.0 date:Mon May 25 21:19:07 EDT 1992
Row-Based Placement and Global Routing Program
Authors: Carl Sechen, Kai-Win Lee, and Bill Swartz,
         Yale University

TimberWolfSC terminated abnormally with 1 error[s] and 0 warning[s]


twflow terminated abnormally with 1 error[s] and 0 warning[s]

Running getfillcell.tcl
Using cell FILL for fill
Running place2def.tcl
Limits: xbot = -645.0 ybot = -495.0 xtop = 37605.0 ytop = 26295.0
Core values: 120.0 150.0 37880.0 26150.0
Offsets: 120.0 150.0
3 routing layers
90 horizontal tracks from -300.0 to 26700.0 step 300 (M1, M3, ...)
161 vertical tracks from -480.0 to 38160.0 step 240.0 (M2, M4, ...)
Caught GrayWolf being bad:  Pin Q<22> overlaps pin D<3>
Caught GrayWolf being bad:  Pin LOAD<5> overlaps pin Q<22>
Caught GrayWolf being bad:  Pin LOAD<6> overlaps pin Q<27>
Caught GrayWolf being bad:  Pin LOAD<6> overlaps pin Q<25>
Done with place2def.tcl
Running addspacers.tcl  counter /usr/share/qflow/tech/osu050/osu050_stdcells.lef FILL
Running addspacers.tcl
Reading FILL macros from LEF file.
Reading DEF file counter.def. . .
Number of rows is 13
Longest row has width 385.2 um
Analysis of DEF file:
Number of components = 649
New number of components = 671
Number of rows = 13
Done with addspacers.tcl
Running blifanno.tcl
Reading DEF file counter.def. . .
Done with blifanno.tcl

Generating RTL verilog and SPICE netlist file in directory
   /home/bran/Documentos/repositories/Design_process/Qflow/32b/synthesis
Files:
   Verilog: /home/bran/Documentos/repositories/Design_process/Qflow/32b/synthesis/counter.rtl.v
   Verilog: /home/bran/Documentos/repositories/Design_process/Qflow/32b/synthesis/counter.rtlnopwr.v
   Spice:   /home/bran/Documentos/repositories/Design_process/Qflow/32b/synthesis/counter.spc

Running blif2Verilog.
Running blif2BSpice.
Placement script ended on dom 6 dic 13:17:21 CST 2020
----------------------------------------------
Vesta static timing analysis tool
(c) 2013-2017 Tim Edwards, Open Circuit Design
----------------------------------------------

Parsing library "osu05_stdcells"
End of library at line 6606
Parsing module "counter"
Lib Read:  Processed 6607 lines.
Verilog netlist read:  Processed 689 lines.
Number of paths analyzed:  853

Top 20 maximum delay paths:
Path DFFPOSX1_62/CLK to DFFPOSX1_93/D delay 12779.7 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_93/D delay 12628.2 ps
Path DFFPOSX1_13/CLK to DFFPOSX1_93/D delay 12628.2 ps
Path DFFPOSX1_89/CLK to DFFPOSX1_93/D delay 12427.7 ps
Path DFFPOSX1_91/CLK to DFFPOSX1_93/D delay 12354.1 ps
Path DFFPOSX1_90/CLK to DFFPOSX1_93/D delay 12347.8 ps
Path DFFPOSX1_67/CLK to DFFPOSX1_93/D delay 12303.5 ps
Path DFFPOSX1_66/CLK to DFFPOSX1_93/D delay 12284.3 ps
Path DFFPOSX1_65/CLK to DFFPOSX1_93/D delay 12260.2 ps
Path DFFPOSX1_92/CLK to DFFPOSX1_93/D delay 12217.1 ps
Path DFFPOSX1_62/CLK to DFFPOSX1_63/D delay 12160.4 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_63/D delay 12008.9 ps
Path DFFPOSX1_13/CLK to DFFPOSX1_63/D delay 12008.9 ps
Path DFFPOSX1_89/CLK to DFFPOSX1_76/D delay 11973.9 ps
Path DFFPOSX1_91/CLK to DFFPOSX1_76/D delay 11900.3 ps
Path DFFPOSX1_89/CLK to DFFPOSX1_63/D delay 11895.4 ps
Path DFFPOSX1_90/CLK to DFFPOSX1_76/D delay 11894 ps
Path DFFPOSX1_67/CLK to DFFPOSX1_76/D delay 11849.7 ps
Path DFFPOSX1_66/CLK to DFFPOSX1_76/D delay 11830.5 ps
Path DFFPOSX1_91/CLK to DFFPOSX1_63/D delay 11821.9 ps
Computed maximum clock frequency (zero slack) = 78.2492 MHz
-----------------------------------------

Number of paths analyzed:  853

Top 20 minimum delay paths:
Path DFFPOSX1_64/CLK to output pin LOAD[0] delay 335.614 ps
Path DFFPOSX1_82/CLK to output pin LOAD[3] delay 335.614 ps
Path DFFPOSX1_12/CLK to output pin LOAD[6] delay 335.614 ps
Path DFFPOSX1_76/CLK to output pin LOAD[2] delay 335.614 ps
Path DFFPOSX1_94/CLK to output pin LOAD[5] delay 335.614 ps
Path DFFPOSX1_6/CLK to output pin LOAD[5] delay 335.614 ps
Path DFFPOSX1_70/CLK to output pin LOAD[1] delay 335.614 ps
Path DFFPOSX1_88/CLK to output pin LOAD[4] delay 335.614 ps
Path DFFPOSX1_17/CLK to output pin RCO delay 335.614 ps
Path DFFPOSX1_18/CLK to output pin LOAD[7] delay 335.614 ps
Path DFFPOSX1_49/CLK to DFFPOSX1_82/D delay 393.003 ps
Path DFFPOSX1_38/CLK to DFFPOSX1_69/D delay 419.687 ps
Path DFFPOSX1_69/CLK to DFFPOSX1_21/D delay 436.38 ps
Path DFFPOSX1_87/CLK to DFFPOSX1_25/D delay 436.38 ps
Path DFFPOSX1_63/CLK to DFFPOSX1_23/D delay 436.38 ps
Path DFFPOSX1_75/CLK to DFFPOSX1_18/D delay 447.049 ps
Path DFFPOSX1_75/CLK to DFFPOSX1_15/D delay 447.049 ps
Path DFFPOSX1_93/CLK to DFFPOSX1_24/D delay 447.049 ps
Path DFFPOSX1_93/CLK to DFFPOSX1_19/D delay 447.049 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_24/D delay 447.049 ps
Design meets minimum hold timing.
-----------------------------------------

Number of paths analyzed:  221

Top 20 maximum delay paths:
Path input pin ENABLE to DFFPOSX1_93/D delay 11410.5 ps
Path input pin ENABLE to DFFPOSX1_76/D delay 10998.5 ps
Path input pin ENABLE to DFFPOSX1_63/D delay 10913.8 ps
Path input pin ENABLE to DFFPOSX1_12/D delay 10600.9 ps
Path input pin ENABLE to DFFPOSX1_60/D delay 10537 ps
Path input pin ENABLE to DFFPOSX1_58/D delay 8278.2 ps
Path input pin ENABLE to DFFPOSX1_57/D delay 8270.75 ps
Path input pin RESET to DFFPOSX1_93/D delay 8199.33 ps
Path input pin ENABLE to DFFPOSX1_56/D delay 8146.37 ps
Path input pin ENABLE to DFFPOSX1_11/D delay 8078.6 ps
Path input pin ENABLE to DFFPOSX1_14/D delay 7807.08 ps
Path input pin RESET to DFFPOSX1_63/D delay 7615.63 ps
Path input pin RESET to DFFPOSX1_60/D delay 7238.72 ps
Path input pin RESET to DFFPOSX1_76/D delay 6875.27 ps
Path input pin MODO[1] to DFFPOSX1_93/D delay 6813.62 ps
Path input pin MODO[1] to DFFPOSX1_63/D delay 6229.92 ps
Path input pin ENABLE to DFFPOSX1_61/D delay 5976.34 ps
Path input pin ENABLE to DFFPOSX1_53/D delay 5963.17 ps
Path input pin MODO[0] to DFFPOSX1_93/D delay 5959.45 ps
Path input pin RESET to DFFPOSX1_12/D delay 5930.74 ps
-----------------------------------------

Number of paths analyzed:  221

Top 20 minimum delay paths:
Path input pin MODO[0] to DFFPOSX1_57/D delay 94.2814 ps
Path input pin D[22] to DFFPOSX1_46/D delay 136.862 ps
Path input pin D[21] to DFFPOSX1_45/D delay 136.862 ps
Path input pin D[20] to DFFPOSX1_44/D delay 136.862 ps
Path input pin D[19] to DFFPOSX1_43/D delay 136.862 ps
Path input pin D[18] to DFFPOSX1_42/D delay 136.862 ps
Path input pin D[17] to DFFPOSX1_41/D delay 136.862 ps
Path input pin D[16] to DFFPOSX1_40/D delay 136.862 ps
Path input pin D[15] to DFFPOSX1_39/D delay 136.862 ps
Path input pin D[14] to DFFPOSX1_38/D delay 136.862 ps
Path input pin D[13] to DFFPOSX1_37/D delay 136.862 ps
Path input pin D[12] to DFFPOSX1_36/D delay 136.862 ps
Path input pin D[11] to DFFPOSX1_35/D delay 136.862 ps
Path input pin D[10] to DFFPOSX1_34/D delay 136.862 ps
Path input pin D[9] to DFFPOSX1_33/D delay 136.862 ps
Path input pin D[8] to DFFPOSX1_32/D delay 136.862 ps
Path input pin D[7] to DFFPOSX1_31/D delay 136.862 ps
Path input pin D[6] to DFFPOSX1_30/D delay 136.862 ps
Path input pin D[5] to DFFPOSX1_29/D delay 136.862 ps
Path input pin D[4] to DFFPOSX1_28/D delay 136.862 ps
-----------------------------------------

